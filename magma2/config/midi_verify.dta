(beatmatcher
   #include beatmatch.dta
)
(difficulties easy medium hard expert)
(num_gem_slots
   ('PART REAL_KEYS_E' 32)
   ('PART REAL_KEYS_M' 32)
   ('PART REAL_KEYS_H' 32)
   ('PART REAL_KEYS_X' 32)
   ('PART REAL_KEYS' 32)
   ('PART REAL_GUITAR' 6)
   ('PART REAL_GUITAR_22' 6)
   ('PART REAL_BASS' 4)
   ('PART REAL_BASS_22' 4)
   (default 5)
)
(max_gems_per_chord
   ('PART REAL_GUITAR' 6)
   ('PART REAL_GUITAR_22' 6)
   ('PART REAL_BASS' 6)
   ('PART REAL_BASS_22' 6)
   ('PART REAL_KEYS_E' 4)
   ('PART REAL_KEYS_M' 4)
   ('PART REAL_KEYS_H' 4)
   ('PART REAL_KEYS_X' 4)
   ('PART REAL_KEYS' 4)
   (default 3)
)
(enforce_equal_lanes
   ('PART DRUMS' FALSE)
   ('PART BASS' TRUE)
   ('PART GUITAR' TRUE)
   ('PART VOCALS' FALSE)
   ('PART REAL_GUITAR' FALSE)
   ('PART REAL_GUITAR_22' FALSE)
   ('PART REAL_BASS' FALSE)
   ('PART REAL_BASS_22' FALSE)
   ('PART KEYS' TRUE)
   ('PART REAL_KEYS_E' FALSE)
   ('PART REAL_KEYS_M' FALSE)
   ('PART REAL_KEYS_H' FALSE)
   ('PART REAL_KEYS_X' FALSE)
   ('PART REAL_KEYS' FALSE)
   ('PART KEYS_ANIM_LH' FALSE)
   ('PART KEYS_ANIM_RH' FALSE)
   (default TRUE)
)
(practice_section_parsers ())
#autorun {func test_early_event
   ($list)
   {if {find_elem $list $mv.val}
      {if {< $mv.start 1.8}
         {notify
            "("
            $mv.track
            "): "
            $mv.val
            " event at ["
            $mv.mbt
            "] is less than 2 beats from the beginning"
         }
      }
   }
}
#define BAND_COMMON_MUSICIAN_EVENTS (idle_realtime idle idle_intense play mellow intense)
#define BAND_BASS_EVENTS (BAND_COMMON_MUSICIAN_EVENTS play_solo)
#define BAND_DRUM_EVENTS (BAND_COMMON_MUSICIAN_EVENTS)
#define BAND_GUITAR_EVENTS (BAND_COMMON_MUSICIAN_EVENTS play_solo)
#define BAND_KEYBOARD_EVENTS (BAND_COMMON_MUSICIAN_EVENTS)
#define BAND_MIC_EVENTS (
   BAND_COMMON_MUSICIAN_EVENTS
   tambourine_start
   tambourine_end
   cowbell_start
   cowbell_end
   clap_start
   clap_end
)
#define BAND_CROWD_EVENTS (
   crowd_realtime
   crowd_mellow
   crowd_normal
   crowd_intense
   crowd_lighters_on
   crowd_lighters_off
   crowd_horns_on
   crowd_horns_off
   crowd_fists_on
   crowd_fists_off
)
#define SHARED_GUITAR_NOTES (
   (60 64)
   (72 76)
   (84 88)
   (96 100)
   103
   105
   106
   (65 66)
   (77 78)
   (89 90)
   (101 102)
   116
   (120 124)
   126
   127
)
#define REAL_KEYS_NOTES (
   127
   126
   120
   116
   115
   (48 72)
   (0 24)
)
#define REAL_KEYS_EVENTS ()
(tracks
   (required EVENTS BEAT)
   (allowed
      'PART DRUMS'
      'PART BASS'
      'PART GUITAR'
      'PART VOCALS'
      'PART KEYS'
      'PART REAL_KEYS_E'
      'PART REAL_KEYS_M'
      'PART REAL_KEYS_H'
      'PART REAL_KEYS_X'
      'PART KEYS_ANIM_LH'
      'PART KEYS_ANIM_RH'
      VENUE
   )
   (vocals 'PART VOCALS' HARM1 HARM2 HARM3)
)
(events
   (BEAT (midi (12 13)))
   (EVENTS
      (midi (24 26))
      (required_once music_start music_end end)
      (allowed
         coda
         crowd_noclap
         crowd_clap
         BAND_CROWD_EVENTS
         #include practice_sections.dta
      )
      (last end)
      (check_init
         {set $sections_found {array 0}}
         {set $section_type -1}
         {set $first_authored_section_name ""}
         {set $first_authored_section_mbt ""}
         {set $first_autogen_section_name ""}
         {set $first_autogen_section_mbt ""}
         {set $mixed_section_type_errors FALSE}
         {set $mixed_section_type_error_reported FALSE}
      )
      (check_term
         {if
            {&&
               {> {size $sections_found} 0}
               {!= {/ 100 $section_type} {size $sections_found}}
            }
            {notify "(" $mv.track "): Found an incomplete list of practice sections"}
         }
         {set $sections_found 0}
      )
      (check
         {if {has_substr $mv.val "prc_"}
            {do
               ($section_name $mv.val)
               {if_else {find_elem AUTOGEN_SECTION_NAMES $section_name}
                  {do
                     {if {== $section_type -1}
                        {if {has_substr $section_name "_5_"}
                           {set $section_type 5}
                        }
                        {if {has_substr $section_name "_10_"}
                           {set $section_type 10}
                        }
                        {if {has_substr $section_name "_20_"}
                           {set $section_type 20}
                        }
                     }
                     {if {!= $section_type -1}
                        {if {! {has_substr $section_name {sprintf "_%d_" $section_type}}}
                           {notify "(" $mv.track "): Section types are mixed; this is not allowed"}
                        }
                     }
                     {if_else {find_elem $sections_found $section_name}
                        {notify
                           "("
                           $mv.track
                           "): Found a duplicate section "
                           $section_name
                           " at ["
                           $mv.mbt
                           "]"
                        }
                        {push_back $sections_found $section_name}
                     }
                     {if {!= $first_authored_section_name ""}
                        {set $mixed_section_type_error TRUE}
                     }
                     {if {== $first_autogen_section_name ""}
                        {set $first_autogen_section_name $section_name}
                        {set $first_autogen_section_mbt $mv.mbt}
                     }
                  }
                  {do
                     {if {!= $first_autogen_section_name ""}
                        {set $mixed_section_type_error TRUE}
                     }
                     {if {== $first_authored_section_name ""}
                        {set $first_authored_section_name $section_name}
                        {set $first_authored_section_mbt $mv.mbt}
                     }
                  }
               }
            }
            {if {&& $mixed_section_type_error {! $mixed_section_type_error_reported}}
               {set $mixed_section_type_error FALSE}
               {set $mixed_section_type_error_reported TRUE}
               {notify
                  "("
                  $mv.track
                  "): authored section "
                  $first_authored_section_name
                  " at ["
                  $first_authored_section_mbt
                  "] conflicts with autogenerated section "
                  $first_autogen_section_name
                  " at ["
                  $first_autogen_section_mbt
                  "]"
               }
            }
         }
      )
   )
   (VENUE
      (midi
         (37 41)
         (85 87)
      )
      (allowed
         lighting
         next
         prev
         first
         bonusfx
         bonusfx_optional
         COOP_CAM_CATS
         DIRECTED_CAM_CATS
         POST_PROCS
      )
      (required)
      (check_init {set $mv.dircount 0})
      (check_term
         {if {> $mv.dircount MAX_DIRCUTS}
            {set $freedirs ""}
            {foreach $i (FREE_DIRCUTS)
               {set $freedirs
                  {sprint $freedirs " " $i}
               }
            }
            {notify
               "("
               $mv.track
               "): "
               $mv.dircount
               " directed cuts are authored; maximum is "
               MAX_DIRCUTS
               "; freebies are ("
               $freedirs
               " )"
            }
         }
      )
      (check
         {if {== $mv.val lighting}
            {if_else {< {size $mv.data} 3}
               {notify
                  "("
                  $mv.track
                  "): "
                  $mv.val
                  " at ["
                  $mv.mbt
                  "] does not specify a lighting type; the argument is missing"
               }
               {do
                  ($adjectives {elem $mv.data 2})
                  ($adjectives_string "")
                  ($bad_adjectives {array 0})
                  {foreach $adj $adjectives
                     {unless {find_elem SONG_LIGHTING_ADJECTIVES $adj}
                        {push_back $bad_adjectives $adj}
                     }
                     {if_else {== {strlen $adjectives_string} 0}
                        {set $adjectives_string $adj}
                        {set $adjectives_string
                           {sprintf "%s %s" $adjectives_string $adj}
                        }
                     }
                  }
                  {foreach $adj $bad_adjectives
                     {notify
                        "("
                        $mv.track
                        "): Lighting "
                        $adjectives_string
                        " at ["
                        $mv.mbt
                        "] uses unknown preset: '"
                        $adj
                        "'"
                     }
                  }
               }
            }
         }
         {if {has_substr $mv.val "directed_"}
            {unless {find_elem (FREE_DIRCUTS) $mv.val}
               {'++' $mv.dircount}
            }
         }
      )
   )
   ('PART GUITAR'
      (allowed map BAND_GUITAR_EVENTS)
      (midi (40 59) SHARED_GUITAR_NOTES)
      (check {test_early_event (BAND_GUITAR_EVENTS)})
   )
   ('PART BASS'
      (allowed map BAND_BASS_EVENTS)
      (midi (40 59) SHARED_GUITAR_NOTES)
      (check {test_early_event (BAND_BASS_EVENTS)})
   )
   ('PART DRUMS'
      (allowed
         mix
         ride_side_true
         ride_side_false
         begin_drm
         end_drm
         challenge_cd
         BAND_DRUM_EVENTS
      )
      (midi
         (24 27)
         28
         29
         (30 32)
         (34 42)
         43
         44
         45
         (46 51)
         (60 64)
         (72 76)
         (84 88)
         (96 100)
         103
         105
         106
         (110 112)
         116
         (120 124)
         126
         127
      )
      (check {test_early_event (BAND_DRUM_EVENTS)})
   )
   ('PART VOCALS'
      (allowed BAND_MIC_EVENTS)
      (midi
         (0 1)
         (36 84)
         (96 97)
         103
         (105 106)
         116
      )
      (check {test_early_event (BAND_MIC_EVENTS)})
   )
   ('PART KEYS'
      (allowed BAND_KEYBOARD_EVENTS)
      (midi SHARED_GUITAR_NOTES)
      (check {test_early_event (BAND_KEYBOARD_EVENTS)})
   )
   ('PART KEYS_ANIM_LH' (midi (48 72)))
   ('PART KEYS_ANIM_RH' (midi (48 72)))
   ('PART REAL_KEYS_E' (midi REAL_KEYS_NOTES))
   ('PART REAL_KEYS_M' (midi REAL_KEYS_NOTES))
   ('PART REAL_KEYS_H' (midi REAL_KEYS_NOTES))
   ('PART REAL_KEYS_X'
      (allowed REAL_KEYS_EVENTS)
      (midi REAL_KEYS_NOTES)
   )
)