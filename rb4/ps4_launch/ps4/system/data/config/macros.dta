
#ifdef TRUE


#else 


#define FALSE (0)


#define TRUE (1)


#define kPlatformNone (0)


#define kPlatformXbox (2)


#define kPlatformPC (3)


#define kPlatformPS3 (4)


#define kPlatformXB1 (5)


#define kPlatformWiiU (6)


#define kPlatformPS4 (7)


#define kPlatformAndroid (8)


#define kPlatformIOS (9)


#define kPlatformOSX (10)


#define PLATFORM_NONE (
   ("kPlatformNone" 
      (alias "None") 
      (help "Sets target platform to None")))


#define PLATFORM_XBOX (
   ("kPlatformXbox" 
      (alias "XBox360") 
      (help "Sets target platform to XBox360")))


#define PLAFORM_PC (
   ("kPlatformPC" 
      (alias "PC") 
      (help "Sets target platform to PC")))


#define PLAFORM_XB1 (
   ("kPlatformXB1" 
      (alias "XB1") 
      (help "Sets target platform to XB1")))


#define PLAFORM_PS4 (
   ("kPlatformPS4" 
      (alias "PS4") 
      (help "Sets target platform to PS4")))


#define PLATFORM_TARGETS (
   (PLAFORM_PC PLATFORM_XBOX PLATFORM_XB1 PLAFORM_PS4))


#define kDataInt (0)


#define kDataFloat (1)


#define kDataVar (2)


#define kDataFunc (3)


#define kDataObject (4)


#define kDataSymbol (5)


#define kDataArray (16)


#define kDataCommand (17)


#define kDataString (18)


#define kDataProperty (19)


#define kMergeMerge (0)


#define kMergeReplace (1)


#define kMergeKeep (2)


#define kMergeIgnore (3)


#define kLoadFront (0)


#define kLoadBack (1)


#define kLoadFrontStayBack (2)


#define kLoadStayBack (3)


#define kTaskSeconds (0)


#define kTaskBeats (1)


#define kTaskUISeconds (2)


#define kTaskTutorialSeconds (3)


#define TASK_UNITS (
   (
      ("kTaskSeconds" 
         (alias "Seconds") 
         (help "Use the game's seconds timeline for time reference")) 
      ("kTaskBeats" 
         (alias "Beats") 
         (help "Use the game's beat timeline for time reference")) 
      ("kTaskUISeconds" 
         (alias "UI seconds") 
         (help "Use the UI's seconds timeline for time reference, will not pause when game is paused")) 
      ("kTaskTutorialSeconds" 
         (alias "Tutorial seconds") 
         (help "Use the tutorial seconds timeline for time reference, will not pause when game or UI are paused"))))


#define k30_fps (0)


#define k480_fpb (1)


#define k30_fps_ui (2)


#define k1_fpb (3)


#define k30_fps_tutorial (4)


#define RATE_ENUM (
   (
      ("k30_fps" 
         (alias "30 FPS") 
         (help "30 frames is equivelent to 1 second on the game timeline")) 
      ("k480_fpb" 
         (alias "480 FPB") 
         (help "480 frames is equivelent to 1 beat on the game timeline")) 
      ("k30_fps_ui" 
         (alias "30 FPS UI") 
         (help "30 frames is equivelent to 1 second on the UI timeline")) 
      ("k1_fpb" 
         (alias "1 FPB") 
         (help "1 frame is equivelent to 1 beat on the game timeline")) 
      ("k30_fps_tutorial" 
         (alias "30 FPS tutorial") 
         (help "30 frames is equivelent to 1 second on the tutorial timeline"))))


#define PI (3.14)


#define kHugeFloat (1000000000000000000000000000000.0)


#define kSmallFloat (0.0)


#define kFirstFit (0)


#define kBestFit (1)


#define kLRUFit (2)


#define kLastFit (3)


#define kTimeKeeperPause (0)


#define kTimeKeeperUnpause (1)


#define kTimeKeeperIgnore (2)


#define kPad_L2 (0)


#define kPad_R2 (1)


#define kPad_L1 (2)


#define kPad_R1 (3)


#define kPad_Tri (4)


#define kPad_Circle (5)


#define kPad_X (6)


#define kPad_Square (7)


#define kPad_Select (8)


#define kPad_L3 (9)


#define kPad_R3 (10)


#define kPad_Start (11)


#define kPad_DUp (12)


#define kPad_DRight (13)


#define kPad_DDown (14)


#define kPad_DLeft (15)


#define kPad_LStickUp (16)


#define kPad_LStickRight (17)


#define kPad_LStickDown (18)


#define kPad_LStickLeft (19)


#define kPad_RStickUp (20)


#define kPad_RStickRight (21)


#define kPad_RStickDown (22)


#define kPad_RStickLeft (23)


#define DPAD_BUTTON_ALIASES (
   ("kPad_DUp" 
      (alias "Up")) 
   ("kPad_DRight" 
      (alias "Right")) 
   ("kPad_DDown" 
      (alias "Down")) 
   ("kPad_DLeft" 
      (alias "Left")))


#define kPad_TouchPad (24)


#define kPad_ConsoleButton (25)


#define kPad_NumButtons (26)


#define kPad_Xbox_LT (0)


#define kPad_Xbox_RT (1)


#define kPad_Xbox_LB (2)


#define kPad_Xbox_RB (3)


#define kPad_Xbox_Y (4)


#define kPad_Xbox_B (5)


#define kPad_Xbox_A (6)


#define kPad_Xbox_X (7)


#define kPad_Xbox_LS (9)


#define kPad_Xbox_RS (10)


#define XBOX_BUTTON_ALIASES (
   ("kPad_Xbox_LT" 
      (alias "left trigger")) 
   ("kPad_Xbox_RT" 
      (alias "right trigger")) 
   ("kPad_Xbox_LB" 
      (alias "left button")) 
   ("kPad_Xbox_RB" 
      (alias "left button")) 
   ("kPad_Xbox_Y" 
      (alias "Y button")) 
   ("kPad_Xbox_B" 
      (alias "B button")) 
   ("kPad_Xbox_A" 
      (alias "A button")) 
   ("kPad_Xbox_X" 
      (alias "X button")) 
   ("kPad_Xbox_LS" 
      (alias "left stick")) 
   ("kPad_Xbox_RS" 
      (alias "right stick")))


#define kAction_None (0)


#define kAction_Confirm (1)


#define kAction_Cancel (2)


#define kAction_Option (3)


#define kAction_Start (4)


#define kAction_ViewModify (5)


#define kAction_Up (6)


#define kAction_Right (7)


#define kAction_Down (8)


#define kAction_Left (9)


#define kAction_PageUp (10)


#define kAction_PageDown (11)


#define kAction_ExtendedOption1 (12)


#define kAction_ExtendedOption2 (13)


#define kAction_ShellOption (14)


#define kLeftAnalog (0)


#define kRightAnalog (1)


#define kJoypadNone (0)


#define kJoypadDigital (1)


#define kJoypadAnalog (2)


#define kJoypadDualShock (3)


#define kJoypadMidi (4)


#define kJoypadXboxHxGuitar (5)


#define kJoypadXboxHxGuitarRb2 (6)


#define kJoypadXboxRoGuitar (7)


#define kJoypadXboxDrums (8)


#define kJoypadXboxDrumsRb2 (9)


#define kJoypadXboxRoDrums (10)


#define kJoypadXboxStageKit (11)


#define kJoypadPs3HxGuitar (12)


#define kJoypadPs3HxGuitarRb2 (13)


#define kJoypadPs3HxDrums (14)


#define kJoypadPs3HxDrumsRb2 (15)


#define kJoypadPs3RoGuitar (16)


#define kJoypadPs3RoDrums (17)


#define kJoypadPs3KonamiDrums (18)


#define kJoypadXboxCoreGuitar (19)


#define kJoypadXboxButtonGuitar (20)


#define kJoypadXboxRealGuitar22Fret (21)


#define kJoypadXboxMidiBoxKeyboard (22)


#define kJoypadXboxMidiBoxDrums (23)


#define kJoypadXboxKeytar (24)


#define kJoypadPs3CoreGuitar (25)


#define kJoypadPs3ButtonGuitar (26)


#define kJoypadPs3RealGuitar22Fret (27)


#define kJoypadPs3MidiBoxKeyboard (28)


#define kJoypadPs3MidiBoxDrums (29)


#define kJoypadPs3Keytar (30)


#define kJoypadPembrokeGuitar (31)


#define kJoypadGlamorganDrums (32)


#define kJoypadNumTypes (33)


#define kBMAction_None (0)


#define kBMAction_Lane0 (1)


#define kBMAction_Lane1 (2)


#define kBMAction_Lane2 (3)


#define kBMAction_TrackUp (4)


#define kBMAction_TrackDown (5)


#define kBMAction_UsePowerUp (6)


#define kGame (0)


#define kVCal (1)


#define kACal (2)


#define kPractice90 (3)


#define kPractice80 (4)


#define kPractice70 (5)


#define kNumLagContexts (6)


#define kJoypadAccelQuery (0)


#define kJoypadAccelDisableAll (1)


#define kJoypadAccelSetXOnly (3)


#define kJoypadAccelSetYOnly (5)


#define kJoypadAccelSetXYOnly (7)


#define kJoypadAccelSetZOnly (9)


#define kJoypadAccelSetXZOnly (11)


#define kJoypadAccelSetYZOnly (13)


#define kJoypadAccelSetEnableAll (15)


#define kJoypadCalbertOff (0)


#define kJoypadCalbertPhoto (1)


#define kJoypadCalbertAudio (2)


#define kJoypadCalbertBothOn (254)


#define KB_ENTER (10)


#define KB_BACKSPACE (8)


#define KB_TAB (9)


#define KB_SPACE (32)


#define KB_a (97)


#define KB_b (98)


#define KB_c (99)


#define KB_d (100)


#define KB_e (101)


#define KB_f (102)


#define KB_g (103)


#define KB_h (104)


#define KB_i (105)


#define KB_j (106)


#define KB_k (107)


#define KB_l (108)


#define KB_m (109)


#define KB_n (110)


#define KB_o (111)


#define KB_p (112)


#define KB_q (113)


#define KB_r (114)


#define KB_s (115)


#define KB_t (116)


#define KB_u (117)


#define KB_v (118)


#define KB_w (119)


#define KB_x (120)


#define KB_y (121)


#define KB_z (122)


#define KB_CAP_LOCK (290)


#define KB_NUM_LOCK (291)


#define KB_SCROLL_LOCK (292)


#define KB_PRINT (300)


#define KB_PAUSE (301)


#define KB_ESCAPE (302)


#define KB_INSERT (310)


#define KB_DELETE (311)


#define KB_HOME (312)


#define KB_END (313)


#define KB_PAGE_UP (314)


#define KB_PAGE_DOWN (315)


#define KB_LEFT (320)


#define KB_RIGHT (321)


#define KB_UP (322)


#define KB_DOWN (323)


#define KB_F1 (401)


#define KB_F2 (402)


#define KB_F3 (403)


#define KB_F4 (404)


#define KB_F5 (405)


#define KB_F6 (406)


#define KB_F7 (407)


#define KB_F8 (408)


#define KB_F9 (409)


#define KB_F10 (410)


#define KB_F11 (411)


#define KB_F12 (412)


#define kMCNoError (0)


#define kMCNoCard (1)


#define kMCNotFormatted (2)


#define kMCDifferentCard (3)


#define kMCReadWriteFailed (4)


#define kMCCorrupt (5)


#define kMCNotEnoughSpace (6)


#define kMCFileExists (7)


#define kMCFileNotFound (8)


#define kMCMultipleFilesFound (9)


#define kMCObsoleteVersion (10)


#define kMCNewerVersion (11)


#define kMCGeneralError (12)


#define kMCUnsupported (13)


#define kMCAccessError (14)


#define kUserPrivilegeBlocked (0)


#define kUserPrivilegeFriendsOnly (1)


#define kUserPrivilegeAllowed (2)


#define kOSNotifyTopRight (0)


#define kOSNotifyBottomCenter (1)


#define kRegionNone (0)


#define kRegionNA (1)


#define kRegionEurope (2)


#define kRegionJapan (3)


#define kNumRegions (4)


#define k1KHz (300000)


#define k2KHz (150000)


#define k4KHz (75000)


#define k10KHz (30000)


#define k20KHz (15000)


#define kRecordRegular (0)


#define kRecordCreated (1)


#define kRecordDeleted (2)


#define kNetUnreliable (0)


#define kNetReliable (1)


#define ADD_USER_RESULT_MSG (add_user_result 
   ($success))


#define NEW_REMOTE_USER_MSG (new_remote_user 
   ($user))


#define REMOVING_REMOTE_USER_MSG (removing_remote_user 
   ($user))


#define REMOTE_USER_LEFT_MSG (remote_user_left 
   ($user))


#define REMOTE_USER_UPDATED_MSG (remote_user_updated 
   ($user))


#define PROCESSED_JOIN_REQUEST_MSG (processed_join_request 
   ($accepted))


#define GAME_ENDED_MSG (game_ended 
   ($result))


#define INVITE_ACCEPTED_MSG (invite_accepted 
   ($pad_num $session_id $expired))


#define VIRTUAL_KEYBOARD_RESULT_MSG (virtual_keyboard_result_msg 
   ($ok $text))


#define UI_CHANGED_MSG (ui_changed 
   ($showing))


#ifdef HX_XBOX


#define KINECT_GUIDE_GESTURE_MSG (kinect_guide_gesture 
   ($engaged))


#define SPEECH_RECO_MSG (speech_reco 
   ($token $confidence))


#endif 


#define SIGNIN_CHANGED_MSG (signin_changed 
   ($signin_mask $signin_changed_mask))


#define BUTTON_DOWN_MSG (button_down 
   ($user $raw_button $action $pad_num))


#define BUTTON_UP_MSG (button_up 
   ($user $raw_button $action $pad_num))


#define JOYPAD_CONNECT_MSG (joypad_connect 
   ($user $connected))


#define KEY_MSG (key 
   ($key $shift $control $alt))


#define MEMCARD_RESULT_MSG (memcard_result 
   ($result))


#define UI_BUTTON_DOWN_MSG (ui_button_down 
   ($user $raw_button $action $pad_num))


#define SELECT_MSG (ui_select 
   ($objId $objName $padNum $user))


#define SELECT_DONE_MSG (ui_select_done 
   ($widget $user))


#define SCROLL_SELECT_MSG (ui_scroll_select 
   ($widget $user $selected))


#define SCROLL_START_MSG (ui_scroll_start 
   ($widget $user))


#define SCROLL_MSG (ui_scroll 
   ($widget $user))


#define TRANSITION_MSG (ui_transition 
   ($stratum $old_screen $new_screen $back))


#define TRANSITION_DONE_MSG (ui_transition_done 
   ($stratum $old_screen $new_screen))


#define kUIInvalid (-1)


#define kUINormal (0)


#define kUIFocused (1)


#define kUIDisabled (2)


#define kUISelected (3)


#define kUISelecting (4)


#define INPUT_RECEIVER_SELECTION_STATES (
   (
      (kUIInvalid "kUIInvalid" "") 
      (kUINormal "kUINormal" "") 
      (kUIFocused "kUIFocused" "") 
      (kUIDisabled "kUIDisabled" "") 
      (kUISelected "kUISelected" "") 
      (kUISelecting "kUISelecting" "")))


#define kNavHorizontal (0)


#define kNavVertical (1)


#define UINAVDIRECTION_ENUM (
   (
      ("kNavHorizontal" 
         (alias "Horizontal") 
         (help "The player navigates left/right through the widgets when using the joypad")) 
      ("kNavVertical" 
         (alias "Vertical") 
         (help "The player navigates up/down through the widgets when using the joypad"))))


#define kComponentNormal (0)


#define kComponentFocused (1)


#define kComponentDisabled (2)


#define kComponentSelecting (3)


#define kComponentSelected (4)


#define kNoFocus (0)


#define kMaybeFocus (1)


#define kAlwaysFocus (2)


#define kLODPerFrame (-1)


#define kLOD0 (0)


#define kLOD1 (1)


#define kLOD2 (2)


#define kCompressNone (0)


#define kCompressRots (1)


#define kCompressVects (2)


#define kCompressQuats (3)


#define kCompressionDistance (0)


#define kCompressionAverageDistance (1)


#define kCompressionSumDistances (2)


#define kCompressionAccumulatedDistance (3)


#define kCompressionDistanceAndSpeed (4)


#define kPlayNow (1)


#define kPlayNoBlend (2)


#define kPlayFirst (3)


#define kPlayLast (4)


#define kPlayDirty (8)


#define kPlayNoLoop (16)


#define kPlayLoop (32)


#define kPlayGraphLoop (48)


#define kPlayNodeLoop (64)


#define kPlayRealTime (512)


#define kPlayUserTime (1024)


#define kPlayBeatAlign1 (4096)


#define kPlayBeatAlign2 (8192)


#define kPlayBeatAlign4 (16384)


#define kPlayBeatAlign8 (32768)


#define kPlayNoDefault (0)


#define kPlayBeatTime (0)


#define PLAY_BLEND_FLAGS (
   ("kPlayNoDefault" "kPlayNow" "kPlayDirty" "kPlayNoBlend" "kPlayFirst" "kPlayLast"))


#define PLAY_LOOP_FLAGS (
   ("kPlayNoDefault" "kPlayNoLoop" "kPlayLoop" "kPlayGraphLoop" "kPlayNodeLoop"))


#define PLAY_TIME_FLAGS (
   ("kPlayBeatTime" "kPlayRealTime" "kPlayBeatAlign1" "kPlayBeatAlign2" "kPlayBeatAlign4" "kPlayBeatAlign8"))


#define kRotFull (3)


#define kRotX (4)


#define kRotY (5)


#define kRotZ (6)


#define kApplyBlend (0)


#define kApplyAdd (1)


#define kApplyRotateTo (2)


#define kApplyBlendWeights (3)


#define kCollidePlane (0)


#define kCollideSphere (1)


#define kCollideInsideSphere (2)


#define kCollideCigar (3)


#define kCollideInsideCigar (4)


#define kApplyRotationX (0)


#define kApplyRotationY (1)


#define kApplyRotationZ (2)


#define kDbSilence (-96.0)


#define XBOX_HD_EXTS (.dta .seq .mid .bin .scene .layer .dir .xnse .xbnk .xbv .mogg .png .png_xbox .bmp .ltf .acs .acg)


#define kStageOff (0)


#define kStageOn (1)


#define kStageBass (2)


#define kStageDrumKick (3)


#define kStageDrumSnare (4)


#define kStageDrumCrash (5)


#define kStageGuitar (6)


#define kStageVocal (7)


#define kStageSweepLeft_slow (8)


#define kStageSweepLeft_medium (9)


#define kStageSweepLeft_fast (10)


#define kStageSweepRight_slow (11)


#define kStageSweepRight_medium (12)


#define kStageSweepRight_fast (13)


#define kStageOne (0)


#define kStageTwo (1)


#define kStageFour (2)


#define kStageOneOffset (3)


#define kStageTwoOffset (4)


#define kStageFourOffset (5)


#define kStageAll (6)


#define kStageStrobeOff (0)


#define kStageStrobe6 (6)


#define kStageStrobe8 (8)


#define kStageStrobe10 (10)


#define kStageStrobe12 (12)


#define kStoreErrorSuccess (0)


#define kStoreErrorNoContent (1)


#define kStoreErrorLiveServer (2)


#define kStoreErrorStoreServer (3)


#define kStoreErrorSignedOut (4)


#define kStoreErrorDroppedOut (5)


#define kStoreErrorNoMetadata (6)


#define kStoreErrorNoEthernetCable (7)


#define kSTArtist (0)


#define kSTPackName (1)


#define kSTName (2)


#define kSTDateReleased (3)


#define kSTRank (4)


#define kSTGenre (5)


#define kSTLeftSide (6)


#define kGuideVertical (0)


#define kGuideHorizontal (1)


#define UIGUIDE_ENUM (
   ("kGuideVertical" "kGuideHorizontal"))


#define kKeyboard_Normal (0)


#define kKeyboard_Numeric (1)


#define kBufferColor (0)


#define kBufferDepth (1)


#define kBufferPlayer (2)


#define kBufferPlayerColor (3)


#define kBufferNum (4)


#define kHandStateOpen (0)


#define kHandStateClosed (1)


#define kHandStateLasso (2)


#define kHandStateUnknown (3)


#define kHandStateNum (4)


#define HANDSTATE_ENUM (
   ("kHandStateOpen" "kHandStateClosed" "kHandStateLasso" "kHandStateUnknown"))


#define kSkeletonAssignmentMode_None (0)


#define kSkeletonAssignmentMode_FrontAndCenter (1)


#define kSkeletonAssignmentMode_FirstValid (2)


#define kSkeletonAssignmentMode_LeftRight (3)


#define kSkeletonAssignmentMode_RaisedRightHand (4)


#define kInterpStep (0)


#define kInterpLinear (1)


#define kInterpSpline (2)


#define kInterpSlerp (3)


#define kInterpHermite (4)


#define kInterpEaseIn (5)


#define kInterpEaseOut (6)


#define kEaseLinear (0)


#define kEasePolyIn (1)


#define kEasePolyOut (2)


#define kEasePolyInOut (3)


#define kEasePolyOutIn (4)


#define kEaseBackIn (5)


#define kEaseBackOut (6)


#define kEaseBackInOut (7)


#define kEaseBackOutIn (8)


#define kEaseBounceIn (9)


#define kEaseBounceOut (10)


#define kEaseBounceInOut (11)


#define kEaseBounceOutIn (12)


#define kEaseCircIn (13)


#define kEaseCircOut (14)


#define kEaseCircInOut (15)


#define kEaseCircOutIn (16)


#define kEaseElasticIn (17)


#define kEaseElasticOut (18)


#define kEaseElasticInOut (19)


#define kEaseElasticOutIn (20)


#define kEaseExpoIn (21)


#define kEaseExpoOut (22)


#define kEaseExpoInOut (23)


#define kEaseExpoOutIn (24)


#define kEaseSigmoid (25)


#define kEaseSineIn (26)


#define kEaseSineOut (27)


#define kEaseSineInOut (28)


#define kEaseSineOutIn (29)


#define kEaseStairstep (30)


#define kEaseThirdStairstep (31)


#define kEaseQuarterStairstep (32)


#define kEaseHalfQuarterStairstep (33)


#define kEaseQuarterHalfStairstep (34)


#define EASING_TYPES (
   (
      ("kEaseLinear" 
         (alias "None") 
         (help "No Ease")) 
      ("kEasePolyIn" 
         (alias "In") 
         (help "Non-linear ease in")) 
      ("kEasePolyOut" 
         (alias "Out") 
         (help "Non-linear ease out")) 
      ("kEasePolyInOut" 
         (alias "In, then Out") 
         (help "Non-linear ease in, then out")) 
      ("kEasePolyOutIn" 
         (alias "Out, then In") 
         (help "Non-linear ease out, then in")) 
      ("kEaseBackIn" 
         (alias "Back In") 
         (help "Overarching ease in")) 
      ("kEaseBackOut" 
         (alias "Back Out") 
         (help "Overarching ease out")) 
      ("kEaseBackInOut" 
         (alias "Back In, then Out") 
         (help "Overarching ease in, then out")) 
      ("kEaseBackOutIn" 
         (alias "Back Out, then In.") 
         (help "Overarching ease out, then in")) 
      ("kEaseBounceIn" 
         (alias "Bounce In") 
         (help "Bouncing ease in")) 
      ("kEaseBounceOut" 
         (alias "Bounce Out") 
         (help "Bouncing ease out")) 
      ("kEaseBounceInOut" 
         (alias "Bounce In, then Out") 
         (help "Bouncing ease in, then out")) 
      ("kEaseBounceOutIn" 
         (alias "Bounce Out, then In") 
         (help "Bouncing ease out, then in")) 
      ("kEaseCircIn" 
         (alias "Circular In") 
         (help "Circular ease in")) 
      ("kEaseCircOut" 
         (alias "Circular Out") 
         (help "Circular ease out")) 
      ("kEaseCircInOut" 
         (alias "Circular In, then Out") 
         (help "Circular ease in/out")) 
      ("kEaseCircOutIn" 
         (alias "Circular Out, then In") 
         (help "Circular ease out/in")) 
      ("kEaseElasticIn" 
         (alias "Elastic In") 
         (help "Overshoots target and returns")) 
      ("kEaseElasticOut" 
         (alias "Elastic Out") 
         (help "Overshoots target and returns")) 
      ("kEaseElasticInOut" 
         (alias "Elastic In, then Out") 
         (help "Overshoots target and returns")) 
      ("kEaseElasticOutIn" 
         (alias "Elastic Out, then In") 
         (help "Overshoots target and returns")) 
      ("kEaseExpoIn" 
         (alias "Exponential In") 
         (help "quick ease in")) 
      ("kEaseExpoOut" 
         (alias "Exponential Out") 
         (help "quick ease out")) 
      ("kEaseExpoInOut" 
         (alias "Exponential In, then Out") 
         (help "quick ease in/out")) 
      ("kEaseExpoOutIn" 
         (alias "Exponential Out, then In") 
         (help "quick ease out/in")) 
      ("kEaseSigmoid" 
         (alias "Sigmoid") 
         (help "Sigmoidal ease")) 
      ("kEaseSineIn" 
         (alias "Sine In") 
         (help "Sinusoidal ease in")) 
      ("kEaseSineOut" 
         (alias "Sine Out") 
         (help "Sinusoidal ease out")) 
      ("kEaseSineInOut" 
         (alias "Sine In, then Out") 
         (help "Sinusoidal ease in/out")) 
      ("kEaseSineOutIn" 
         (alias "Sine Out, then In") 
         (help "Sinusoidal ease out/in")) 
      ("kEaseStairstep" 
         (alias "Stair Step") 
         (help "jerky ease")) 
      ("kEaseThirdStairstep" 
         (alias "1/3 Stair Step") 
         (help "jerky ease")) 
      ("kEaseQuarterStairstep" 
         (alias "1/4 Stair Step") 
         (help "jerky ease")) 
      ("kEaseHalfQuarterStairstep" 
         (alias "1/2 Stair Step") 
         (help "jerky ease")) 
      ("kEaseQuarterHalfStairstep" 
         (alias "1/8 Stair Step") 
         (help "jerky ease"))))


#define SPHERE (
   (struct 
      (x float) 
      (y float) 
      (z float) 
      (radius float)))


#define VECTOR4 (
   (struct 
      (x float) 
      (y float) 
      (z float) 
      (w float)) 
   (editor_type vector))


#define VECTOR3 (
   (struct 
      (x float) 
      (y float) 
      (z float)) 
   (editor_type vector))


#define SPHERICALVECTOR3 (
   (struct 
      (r float) 
      (theta float) 
      (phi float)) 
   (editor_type vector))


#define SPHERICALHARMONICS3 (
   (struct 
      (y0 float) 
      (y1 float) 
      (y2 float) 
      (y3 float) 
      (y4 float) 
      (y5 float) 
      (y6 float) 
      (y7 float) 
      (y8 float)))


#define VECTOR2 (
   (struct 
      (x float) 
      (y float)) 
   (editor_type vector))


#define MINMAXVECTOR2 (
   (struct 
      (x float 
         (alias "Minimum")) 
      (y float 
         (alias "Maximum"))) 
   (editor_type vector))


#define COLOR (
   (struct 
      (r float) 
      (g float) 
      (b float)))


#define RECT (
   (struct 
      (x float) 
      (y float) 
      (w float) 
      (h float)))


#define MATRIX3 (
   (struct 
      (pitch float 
         (no_test)) 
      (roll float 
         (no_test)) 
      (yaw float 
         (no_test)) 
      (x_scale float 
         (no_test)) 
      (y_scale float 
         (no_test)) 
      (z_scale float 
         (no_test))))


#define TRANSFORM (
   (struct 
      (pitch float 
         (no_test)) 
      (roll float 
         (no_test)) 
      (yaw float 
         (no_test)) 
      (x_scale float 
         (no_test)) 
      (y_scale float 
         (no_test)) 
      (z_scale float 
         (no_test)) 
      (x float) 
      (y float) 
      (z float)))


#define QUAT (
   (struct 
      (x float) 
      (y float) 
      (z float) 
      (w float)))


#define BOX (
   (struct 
      (min VECTOR3) 
      (max VECTOR3)))


#define RESOURCE_DIR_PTR (string 
   (list 
      {$this get 
         {flatten $editor_prop_path list }}) 
   (no_test))


#define LINEAR_INTERPOLATOR (
   (struct 
      (p0 VECTOR2 
         (help "first point x vs y")) 
      (p1 VECTOR2 
         (help "second point x vs y")) 
      (highlight bool 
         (help "Show this curve on screen in milo"))))


#define EXP_INTERPOLATOR (
   (struct 
      (p0 VECTOR2 
         (help "first point x vs y")) 
      (p1 VECTOR2 
         (help "second point x vs y")) 
      (power float 
         (help "power curve to use to go between them, 2 is good default")) 
      (highlight bool 
         (help "Show this curve on screen in milo"))))


#define INVEXP_INTERPOLATOR (
   (struct 
      (p0 VECTOR2 
         (help "first point x vs y")) 
      (p1 VECTOR2 
         (help "second point x vs y")) 
      (power float 
         (help "power curve to use to go between them, 2 is good default")) 
      (highlight bool 
         (help "Show this curve on screen in milo"))))


#define ATAN_INTERPOLATOR (
   (struct 
      (p0 VECTOR2 
         (help "first point x vs y")) 
      (p1 VECTOR2 
         (help "second point x vs y")) 
      (severity float 
         (help "power curve to use to go between them, 2 is good default")) 
      (highlight bool 
         (help "Show this curve on screen in milo"))))


#define PIECEWISELINEAR_INTERPOLATOR (
   (struct 
      (keys 
         (array 
            (struct 
               (frame float 
                  (help "x")) 
               (value float 
                  (help "y"))))) 
      (highlight bool 
         (help "Show this curve on screen in milo"))))


#define CUBIC_INTERPOLATOR (
   (struct 
      (deadzone float 
         (help "end of deadzone, y is zero between 0 and [deadzone]") 
         (range 0 10000)) 
      (x0 float 
         (help "first point after [deadzone], can be more or less than [p1 x]") 
         (no_test)) 
      (sr0 float 
         (help "slope at [x0] / slope at [deadzone]")) 
      (p1 VECTOR2 
         (help "Point that determines a y value vs the max x value, must be greater than [deadzone]") 
         (no_test)) 
      (sr1 float 
         (help "slope at [p1] / slope at [deadzone]")) 
      (highlight bool 
         (help "Show this curve on screen in milo"))) 
   (header "cubic interpolator"))


#define kSync_TicksOnly (0)


#define kSync_BeatsAndTicks (1)


#define kSync_MeasuresBeatsAndTicks (2)


#define BEATCLOCK_SYNC_MODES (
   (
      ("kSync_TicksOnly" 
         (alias "Ticks Only") 
         (help "Copy only the fractional part of the current beat over")) 
      ("kSync_BeatsAndTicks" 
         (alias "Beats and Ticks") 
         (help "Copy over beat and ticks")) 
      ("kSync_MeasuresBeatsAndTicks" 
         (alias "Measure Beats and Ticks") 
         (help "Copy measure, beat, and ticks"))))


#define kRangeMapping_Linear (0)


#define RANGEMAPPER_FUNCTION_ENUM (
   ("kRangeMapping_Linear" 
      (alias "linear interpolation")))


#define RANGEMAPPER_STRUCT (
   (struct 
      (raw_val float 
         (help "Raw input value for the rangemapper to map")) 
      (normalized_val float 
         (help "Mapped output value. (The result of the mapping)") 
         (read_only TRUE)) 
      (raw_range VECTOR2 
         (help "Range of the input mapping")) 
      (normalized_range VECTOR2 
         (help "Range of the output mapping")) 
      (function int 
         (list RANGEMAPPER_FUNCTION_ENUM) 
         (help "Mapping function to use")) 
      (clamp bool 
         (help "TRUE to clamp the output value to the normalized range"))))


#define kTimerType_CPUTimer (0)


#define kTimerType_GPUTimer (1)


#define kTimerType_GPUStatsQuery (2)


#define SIMPLE_RANGED_FLOAT (
   (struct 
      (start_value float) 
      (end_value float)) 
   (editor_type vector))


#define SIMPLE_RANGED_FLOAT_0_TO_1 (
   (struct 
      (start_value float 
         (range 0.0 1.0)) 
      (end_value float 
         (range 0.0 1.0))) 
   (editor_type vector))


#define SIMPLE_RANGED_RATIO (
   (struct 
      (start_value float) 
      (0 to 1) 
      (end_value float) 
      (0 to 1)) 
   (editor_type vector))


#define SIMPLE_RANGED_INT (
   (struct 
      (start_value int) 
      (end_value int)) 
   (editor_type vector))


#define BEAT_SOURCE_OFFSET (
   (struct 
      (ticks int) 
      (ms float) 
      (beats float) 
      (measures int) 
      (phrase int)))


#define BEAT_SOURCE_RANGE (
   (struct 
      (name symbol 
         (read_only TRUE)) 
      (offset BEAT_SOURCE_OFFSET 
         (read_only TRUE)) 
      (duration BEAT_SOURCE_OFFSET 
         (read_only TRUE)) 
      (has_duration bool 
         (read_only TRUE))))


#define BEAT_SOURCE_RANGE_OFFSET (
   (struct 
      (offset BEAT_SOURCE_OFFSET 
         (read_only TRUE)) 
      (range BEAT_SOURCE_RANGE 
         (read_only TRUE))))


#define BEAT_SOURCE_RANGE_HISTORY (
   (struct 
      (current_offset BEAT_SOURCE_OFFSET 
         (read_only TRUE))))


#define SONG_POS (
   (struct 
      (elapsed_seconds float 
         (read_only TRUE)) 
      (elapsed_ticks float 
         (read_only TRUE)) 
      (elapsed_beats float 
         (read_only TRUE)) 
      (phrase int 
         (read_only TRUE)) 
      (measure int 
         (read_only TRUE)) 
      (beat int 
         (read_only TRUE)) 
      (tick int 
         (read_only TRUE))))


#define SONG_SEGMENT (
   (struct 
      (type symbol 
         (read_only TRUE)) 
      (name symbol 
         (read_only TRUE)) 
      (offset BEAT_SOURCE_OFFSET 
         (read_only TRUE)) 
      (duration BEAT_SOURCE_OFFSET 
         (read_only TRUE)) 
      (has_duration bool 
         (read_only TRUE)) 
      (auto_advance bool 
         (read_only TRUE)) 
      (subsegments 
         (array BEAT_SOURCE_RANGE) 
         (read_only TRUE))))


#define PROPREF_FLOAT (prop_ref 
   (allowed_prop_types 
      (int float)))


#define PROPREF_INT (prop_ref 
   (allowed_prop_types 
      (int)))


#define PROPANIM_ONLY (
   (hide propedit flow) 
   (no_test) 
   (no_validate))


#define kSmoothNone (0)


#define kSmoothLinear (1)


#define kSmoothRubberBand (2)


#define kSmoothAverage (3)


#define PROPERTYSMOOTHER_FUNCS (
   ("kSmoothNone" "kSmoothLinear" "kSmoothRubberBand" "kSmoothAverage"))


#define kSmootherModeNormal (0)


#define kSmootherModeIncreaseOnly (1)


#define kSmootherModeDecreaseOnly (2)


#define PROPERTYSMOOTHER_MODES (
   ("kSmootherModeNormal" "kSmootherModeIncreaseOnly" "kSmootherModeDecreaseOnly"))


#define kWaveformValue (0)


#define kWaveformValuePair (1)


#define kWaveformCurve (2)


#define kWaveformCurvePair (3)


#define kWaveformRandomEvenBlend (0)


#define kWaveformRandomSlopedBlend (1)


#define kWaveformRandomNoise (2)


#define kWaveformRandomEvenBlendHSV (3)


#define kWaveformRandomSlopedBlendHSV (4)


#define kWaveformRandomNoiseHSV (5)


#define kNoSmoothing (0)


#define kLinearSmoothing (1)


#define kRubberBandSmoothing (2)


#define SMOOTHED_FLOAT (
   (struct 
      (smoothing_constant float 
         (help "Average change per second")) 
      (smoothing_type int 
         (list 
            ("kNoSmoothing" "kLinearSmoothing" "kRubberBandSmoothing")) 
         (help "Smoothing type")) 
      (smoothed_value float 
         (read_only TRUE) 
         (no_test readback) 
         (help "Current smoothed value"))))


#define SMOOTHED_VECTOR (
   (struct 
      (smoothing_constant float 
         (help "Average change per second")) 
      (smoothing_type int 
         (list 
            ("kNoSmoothing" "kLinearSmoothing" "kRubberBandSmoothing")) 
         (help "Smoothing type")) 
      (smoothed_value VECTOR3 
         (read_only TRUE) 
         (no_test readback) 
         (help "Current smoothed value"))))


#define TRANSPORT_STATES (
   (Invalid PlayRequested Playing Paused Stopped Stopping Unknown))


#define SYSTEM_ARK_EXCLUSION_PATTERNS (&.fbx++rawanim++*)


#define SYSTEM_ARK_NOT_CACHE_EXTS (bank fusion fusion2 h264 midisong moggsong mogg mp3 ogg wav mid)


#endif 

