(left
   (kPad_Tri
      "Game: Cycle Free Camera / Splash: Goto Framerate Test / Framerate Test: Restart"
      (filters game)
      {cond
         ({==
               {ui current_screen}
               splash_screen}
            {ui goto_screen frame_rate_screen}
         )
         ({==
               {ui current_screen}
               frame_rate_game_screen}
            {ui push_screen meta_loading_return_to_frame_rate_screen}
         )
         (TRUE {cycle_free_camera})
      }
   )
   (kPad_R2 "HAQ display all" {haq_display_all})
)
(right
   (kPad_Square
      "Print Current Screen"
      (filters meta)
      {handle ({ui current_screen} print)}
   )
)
(keyboard
   ('`' alt "Toggle fake file errors" {toggle_fake_file_errors})
   #ifdef HX_XBOX
   (KB_F2 "Fake a signout change on controller 1" {fake_signout 0})
   (KB_F3 "Fake a signout change on controller 2" {fake_signout 1})
   (KB_F4 "Fake a signout change on controller 3" {fake_signout 2})
   #endif
   (KB_F9
      "Check if gameplay timer is running"
      {cheat_display show_bool
         "Gameplay timer running"
         {meta_performer is_gameplay_timer_running}
      }
   )
   (KB_F10
      "Add 1 minute of played time"
      {cheat_display show "Adding 1 minute to gameplay timer"}
      {meta_performer jump_gameplay_timer_forward 60}
   )
   (KB_F11
      "Add 1 hour of played time"
      {cheat_display show "Adding 1 hour to gameplay timer"}
      {meta_performer jump_gameplay_timer_forward 3600}
   )
   (KB_F12
      "Add 1 day of played time"
      {cheat_display show "Adding 1 day to gameplay timer"}
      {meta_performer jump_gameplay_timer_forward 86400}
   )
   (0
      "Pause/unpause game"
      (filters game)
      {toggle_time_paused}
   )
   (1
      "Player 1: Toggle Auto-Play"
      (filters game)
      {cheat_display show_bool "Player 1 Autoplay" {toggle_autoplay 0}}
   )
   (1
      alt
      "Player 1: Cycle Auto-Play rating levels"
      (filters game)
      {cheat_display show {sprint "Player 1 Autoplay :" {cycle_autoplay 0}}}
   )
   (2
      "Player 2: Toggle Auto-Play"
      (filters game)
      {cheat_display show_bool "Player 2 Autoplay" {toggle_autoplay 1}}
   )
   (2
      alt
      "Player 2: Cycle Auto-Play rating levels"
      (filters game)
      {cheat_display show {sprint "Player 2 Autoplay :" {cycle_autoplay 1}}}
   )
   (5
      "Cycle through graphical character debugging in game"
      (filters game)
      {next_character_driver}
   )
   (&
      "Next Loading Tip entry"
      (filters game meta)
      {cheat_next_loading_tip_entry}
   )
   ('*' "Reload Campaign Data" {reload_campaign_data})
   ('['
      "Toggle in-game timer stats"
      (filters game)
      {rnd toggle_timers_verbose}
   )
   (';'
      "Cycle Loading tip mode"
      (filters game meta)
      {cheat_next_loading_tip_mode}
   )
   ('{'
      "Previous venue state"
      (filters game)
      {do
         ($list (low high awesome))
         ($index -1)
         {if {find_elem $list {hamprovider get performance} $index}
            {-- $index}
            {if {>= $index 0}
               {handle (game_panel force_venue_state {elem $list $index})}
               {cheat_display show {sprint "Venue State: " {elem $list $index}}}
            }
         }
      }
   )
   ('}'
      "Next venue state"
      (filters game)
      {do
         ($list (low high awesome))
         ($index -1)
         {if {find_elem $list {hamprovider get performance} $index}
            {'++' $index}
            {if {< $index {size $list}}
               {handle (game_panel force_venue_state {elem $list $index})}
               {cheat_display show {sprint "Venue State: " {elem $list $index}}}
            }
         }
      }
   )
   (a
      ctrl
      "Game: Load next character 0"
      (filters game)
      {if $hamwardrobe
         {{$hamwardrobe get_character 0} next_character}
      }
   )
   (A
      "Meta: unlock all"
      (filters meta)
      {if {meta is_up}
         {cheat_display show_bool "Unlock All" {toggle_unlock_all}}
      }
   )
   (A
      ctrl
      "Keep pressing the A button every 1/2 second"
      {ui set_button_spam {! {ui button_spam}}}
      {cheat_display show_bool "A button repeat " {ui button_spam}}
   )
   (a
      alt
      "Skip BiD move"
      {handle (game_panel on_skip)}
      {cheat_display show "Skip BiD move"}
   )
   (A
      alt
      "Previous BiD move"
      {handle (game_panel on_previous)}
      {cheat_display show "Previous BiD move"}
   )
   (b
      "Hide characters"
      (filters game)
      {if $hamdirector
         {do
            ($world {$hamdirector get cur_world})
            {-- $cheat.hide_char}
            {if {< $cheat.hide_char 0}
               {set $cheat.hide_char 7}
            }
            {do
               ($show_main_dancer {== 0 {& $cheat.hide_char 1}})
               ($show_backup_dancers {== 0 {& $cheat.hide_char 2}})
               ($show_crowd {== 0 {& $cheat.hide_char 4}})
               {$world iterate
                  Character
                  $c
                  {cond
                     ({has_substr
                           {$c name}
                           "player"}
                        {$c set_showing $show_main_dancer}
                     )
                     ({has_substr
                           {$c name}
                           "backup"}
                        {$c set_showing $show_backup_dancers}
                     )
                     {$c set_showing $show_crowd}
                  }
               }
               {$world iterate
                  RndDir
                  $r
                  {if
                     {'||'
                        {has_substr {$r name} "move_feedback"}
                        {has_substr {$r name} "phrase_meter"}
                     }
                     {$r set_showing $show_main_dancer}
                  }
               }
               {cheat_display show
                  {sprintf
                     "Showing Characters - main: %s, backup: %s, crowd: %s"
                     {if_else $show_main_dancer
                        "yes"
                        "no"
                     }
                     {if_else $show_backup_dancers
                        "yes"
                        "no"
                     }
                     {if_else $show_crowd
                        "yes"
                        "no"
                     }
                  }
               }
            }
         }
      }
   )
   (B
      "Game: Toggle Boombox"
      (filters game)
      {do
         ($boomy {find_obj {$hamdirector get cur_world} boombox.grp})
         ($score {find_obj {$hamdirector get cur_world} boombox_score.grp})
         ($visible TRUE)
         {if {&& $boomy $score}
            {set $visible {! {$boomy showing}}}
            {$boomy set_showing $visible}
            {$score set_showing $visible}
            {cheat_display show_bool "Boomy " $visible}
         }
      }
   )
   #ifdef HX_XBOX
   (b
      ctrl
      "Toggle Speech Recognition"
      (filters natural_input)
      (value_bool {speech_mgr is_recognizing})
      {speech_mgr set_recognizing {! {speech_mgr is_recognizing}}}
      {cheat_display show_bool "Speech Recognition" {speech_mgr is_recognizing}}
   )
   (b
      alt
      "Toggle Speech Recognition overlay"
      (filters natural_input)
      {cheat_display show_bool
         "Speech Recognition overlay"
         {rnd toggle_overlay speech_mgr}
      }
   )
   #endif
   (c
      "Game: Cycle CamShots of matching Band Configuration"
      (filters game)
      {cond
         ({game_panel is_up}
            {if $hamdirector
               {$hamdirector cycle_shot}
            }
         )
      }
   )
   (c
      ctrl
      "Game: Display fitness mode (calories)"
      (filters game)
      {rnd toggle_overlay fitness}
      {rnd toggle_overlay fitness_meter}
   )
   (c
      alt
      "Isolate Main Character (there is no recovery)"
      (filters game)
      {do
         ($wrld {$hamdirector get cur_world})
         ($name "")
         {if $wrld
            {$wrld iterate
               Draw
               $draw
               {set $name {$draw name}}
               {if_else {'||' {== $name "player0.grp"} {== $name "player0"}}
                  {$draw set_showing TRUE}
                  {$draw set_showing FALSE}
               }
            }
         }
         {cheat_display show "Isolate Character... no recovery!"}
      }
   )
   (C
      "Toggle Current CamShot Info"
      (filters game)
      {rnd toggle_overlay camera}
      {if $hamdirector
         {handle ({$hamdirector get cur_shot} update_overlay)}
      }
   )
   (d
      "Toggle Difficulty"
      (filters meta)
      {cheat_toggle_difficulty}
   )
   (d
      alt
      "Toggle use of procedural eye darts"
      {set $cheat.disable_eye_darts {! $cheat.disable_eye_darts}}
      {cheat_display show_bool
         "Disable character eye darts"
         $cheat.disable_eye_darts
      }
   )
   (d
      ctrl
      "Game: Toggle Song Recording Dancer"
      (filters game)
      {cheat_display show {sprintf "Dancer: %s" {cycle_test_dancer}}}
   )
   (D
      "Cycle HamBattleData"
      (filters game)
      {if {== dance_battle {game_panel get type}}
         {do
            ($moves {$hud_panel get moves_dir})
            ($battle_list {array 0})
            ($cur_name {game_panel get battle_obj_name})
            ($cur_index -1)
            ($new_name "")
            {$moves iterate
               HamBattleData
               $btl
               {if {== $cur_name {$btl get name}}
                  {set $cur_index {size $battle_list}}
               }
               {push_back $battle_list $btl}
            }
            {if {>= $cur_index 0}
               {'++' $cur_index}
               {if {>= $cur_index {size $battle_list}}
                  {set $cur_index 0}
               }
               {set $new_name {{elem $battle_list $cur_index} get name}}
               {game_panel set battle_obj_name $new_name}
               {cheat_display show {sprint "Setting battle to " $new_name}}
            }
         }
      }
   )
   (D ctrl "Trigger Dirty Disc Error" {platform_mgr trigger_disk_error})
   (e
      "Toggle depth buffer displays"
      {do
         ($depth_left {cursor_panel find depth_buffer_left.grp})
         ($depth_right {cursor_panel find depth_buffer_right.grp})
         {$depth_left set_showing {! {$depth_right showing}}}
         {$depth_right set_showing {! {$depth_right showing}}}
         {cheat_display show_bool "Depth buffer display" {$depth_right showing}}
      }
   )
   (e
      alt
      "Toggle swipe detection debug overlay"
      (filters natural_input)
      {rnd toggle_overlay swipe_direction}
   )
   (e
      ctrl
      "Toggles on/off visual debugging of eye interest object system"
      (filters game)
      {if $hamdirector
         {$hamdirector toggle_debug_interests}
         {cheat_display show "toggle visual debugging of eye interest system"}
      }
   )
   (E
      "Skip credits movie"
      (filters meta)
      {set $skip_movie_credits {! $skip_movie_credits}}
      {cheat_display show_bool "Skip credits movie" $skip_movie_credits}
   )
   (f
      "Fake player 2 skeleton"
      (filters natural_input)
      {cheat_display show
         {sprintf "Fake shell skeleton 2: %i" {cycle_fake_shell_skeletons 1}}
      }
   )
   (F
      ctrl
      "Cycle active fake shell skeletons"
      (filters natural_input)
      {cheat_display show
         {sprintf
            "Active fake shell skeleton %i"
            {cycle_active_fake_shell_skeleton}
         }
      }
   )
   (f
      ctrl
      "Toggle move detection overlay"
      (filters natural_input)
      {cheat_display show {sprintf "Move overlay: %s" {toggle_move_overlay}}}
   )
   (f
      alt
      "Toggle per-limb feedback"
      (filters natural_input)
      {cheat_display show_bool "Per-limb feedback" {toggle_char_feedback}}
   )
   (F
      "Cycle Free Camera"
      (filters game)
      {cycle_free_camera}
   )
   (g
      "Fake player 1 skeleton"
      (filters natural_input)
      {cheat_display show
         {sprintf "Fake shell skeleton 1: %i" {cycle_fake_shell_skeletons 0}}
      }
   )
   (G "Print faders" {audio print_faders})
   (h
      "Toggle HUD"
      (filters game)
      (value_bool {&& $hud_panel {$hud_panel showing}})
      {if $hud_panel
         {$hud_panel set_showing {! {$hud_panel showing}}}
         {cheat_display show_bool "HUD" {$hud_panel showing}}
      }
   )
   (H "Toggle forced detection of calbert" {toggle_forced_autocal})
   (H
      ctrl
      "Reload hud/gameplay scripts and milo files"
      (filters game)
      {game_panel reload_data}
      {game_panel init}
   )
   (i
      "Force long intro cams"
      (filters game)
      {set $cheat.force_long_intro_cam {! $cheat.force_long_intro_cam}}
      {cheat_display show_bool
         "Force long intro cams"
         $cheat.force_long_intro_cam
      }
   )
   (i
      ctrl
      "Toggle eye debug overlay"
      (filters game)
      {rnd toggle_overlay eye_status}
   )
   (i
      alt
      "Show final pose effect"
      (filters game)
      {if $hud_panel
         {$hud_panel final_pose_snapshot}
      }
   )
   (j
      "Dump scoring stats"
      {set $dump_scoring_stats {! $dump_scoring_stats}}
      {cheat_display show_bool "Dump scoring stats" $dump_scoring_stats}
   )
   (j
      ctrl
      "Toggle use of eye jitter in lookats"
      {set $cheat.disable_eye_jitter {! $cheat.disable_eye_jitter}}
      {cheat_display show_bool
         "Disable character eye jitter"
         $cheat.disable_eye_jitter
      }
   )
   (K "Toggle HAQ Printouts" {toggle_haq_printouts})
   (l
      "Toggle loop visualization"
      (filters game)
      {rnd toggle_overlay loop_viz}
   )
   (L "Toggle audio levels" {synth toggle_hud})
   (m
      "Game: Toggle midi audio"
      (filters game meta)
      {if {game_panel is_up}
         {do
            ($midi_cross_fader {synth find midi_music_cross_fade.fade FALSE})
            ($active {! {midi_player get active}})
            {midi_player set active $active}
            {if $midi_cross_fader
               {$midi_cross_fader set level 0}
            }
            {cheat_display show {sprint "Midi playing " {midi_player get active}}}
         }
      }
   )
   (m
      alt
      "Get latest strings from Magnu"
      (filters writer)
      {do
         ($num_strings {magnu_refresh_strings})
         {cheat_display show
            {sprintf "Found %i new strings from Magnu" $num_strings}
         }
      }
   )
   (m
      ctrl
      "Game: Toggle crowd meter/Meta: Mute shell music"
      (filters game meta)
      {if_else {game_panel is_up}
         {toggle_crowd_meter}
         {toggle_mute_shell_music}
      }
   )
   (M
      "Toggle mutes all"
      (value_bool $mute_cheat)
      {toggle_mute_global}
   )
   (M
      ctrl
      "Toggle motd cheat"
      (filters meta)
      {if {meta is_up}
         {cheat_display show_bool "Toggle Motd Cheat" {toggle_motd_cheat}}
      }
   )
   (n
      "Cycle notify level"
      (value {elem (disable overlay modal) $notify_level})
      {do
         ($names (disable overlay modal))
         {set $notify_level {mod {'++' $notify_level} {size $names}}}
         {cheat_display show {sprint "Notify level " {elem $names $notify_level}}}
      }
   )
   (N
      "Toggle Natal autoexposure"
      (filters natural_input)
      (value_bool {gesture_mgr using_autoexposure_tweak})
      {gesture_mgr toggle_autoexposure_tweak}
      {cheat_display show_bool
         "Camera night mode"
         {gesture_mgr using_autoexposure_tweak}
      }
   )
   (n
      ctrl
      "Toggle finale"
      (filters game)
      {if hamprovider
         {do
            ($finale {! {hamprovider get finale}})
            {hamprovider set finale $finale}
            {cheat_display show_bool "Finale: " $finale}
         }
      }
   )
   (o "Toggle Post Proc overlay" {rnd toggle_overlay postproc})
   (O "Print the symbol table" {print_symbol_table syms})
   (o
      alt
      "Lower depth alpha threshold"
      {do
         ($depth {cursor_panel find depth_buffer.mat})
         ($alpha_threshold {$depth get alpha_threshold})
         {$depth set alpha_threshold {- $alpha_threshold 1}}
         {cheat_display show
            {sprint "Alpha threshold: " {$depth get alpha_threshold}}
         }
      }
   )
   (o
      ctrl
      "Raise depth alpha threshold"
      {do
         ($depth {cursor_panel find depth_buffer.mat})
         ($alpha_threshold {$depth get alpha_threshold})
         {$depth set alpha_threshold {'+' $alpha_threshold 1}}
         {cheat_display show
            {sprint "Alpha threshold: " {$depth get alpha_threshold}}
         }
      }
   )
   (p
      "Fake BiD video record"
      (filters game)
      {handle ({$hud_panel find practice_options} start_recording)}
   )
   (P
      "Fake BiD video record stop"
      (filters game)
      {handle ({$hud_panel find practice_options} stop_recording)}
   )
   (p
      ctrl
      "Fake BiD video playback"
      (filters game)
      {handle ({$hud_panel find practice_options} start_playback)}
   )
   (P
      ctrl
      "Fake BiD video playback stop"
      (filters game)
      {handle ({$hud_panel find practice_options} stop_playback)}
   )
   (p
      ctrl
      "Display current blended PostProcs"
      (filters game)
      {display_postprocs}
   )
   (p
      alt
      "Toggle all postprocess effects"
      (filters game meta)
      {cheat_display show
         {sprint
            "PostProcs: "
            {if_else {rnd toggle_all_postprocs}
               "off"
               "on"
            }
         }
      }
   )
   (q
      "Print Current Screen"
      (filters meta)
      {handle ({ui current_screen} print)}
   )
   (q
      ctrl
      "Toggle shuffling OMG moves"
      (filters game)
      {set $kill_omg_shuffle {! $kill_omg_shuffle}}
      {cheat_display show_bool "OMG move shuffle: " {! $kill_omg_shuffle}}
   )
   (Q
      "Toggle Credits Autoscroll"
      {if {== {ui current_screen} text_credits_screen}
         {text_credits_panel debug_toggle_autoscroll}
         {cheat_display show "Credits Autoscroll toggled"}
      }
   )
   (r
      "Toggle Shell Automation"
      (value {ui auto_script})
      {cheat_display show {sprint "Shell Automation: " {ui toggle_auto}}}
   )
   (R
      "Toggle Shell Recording"
      (value {ui record_script})
      {cheat_display show {sprint "Shell Recording: " {ui toggle_record}}}
   )
   (r
      ctrl
      "Game: Reset Detection"
      (filters game)
      {if {exists game}
         {game reset_detection}
      }
   )
   (r
      alt
      "Game: Toggle Song Recording"
      (filters game)
      {cheat_display show_bool "Song recording" {toggle_song_record}}
   )
   (R
      ctrl
      "Use Restart as the default option in the end game screens"
      {set $cheat_focus_restart {! $cheat_focus_restart}}
      {cheat_display show
         {sprint
            "Default end game screen option: "
            {if_else $cheat_focus_restart
               "Restart"
               "Continue"
            }
         }
      }
   )
   (s
      "Toggle Skeleton Drawing"
      (filters natural_input)
      {cheat_display show_bool "Skeleton drawing" {ui toggle_draw_skeletons}}
   )
   (s
      ctrl
      "Cycle stub skeletons"
      (filters natural_input)
      {cheat_display show
         {sprintf "Num Stub Skeletons %i" {cycle_num_stub_skeletons}}
      }
   )
   (s
      alt
      "Toggle between 30 and 60 frames per second"
      {do
         ($curr_sync {rnd get_sync})
         {rnd set_sync
            {if_else {== 1 $curr_sync}
               2
               1
            }
         }
         {cheat_display show
            {sprintf
               "Max frames per second: %d"
               {if_else {== 1 {rnd get_sync}}
                  60
                  30
               }
            }
         }
      }
   )
   (S
      "Toggle scoring info"
      (filters game)
      {if {game_panel is_up}
         {rnd toggle_overlay score}
      }
   )
   (t
      "Toggle time overlay"
      (filters game)
      {rnd toggle_overlay time}
   )
   (t
      alt
      "Hi-reZ screen shot"
      (filters game meta)
      {rnd hi_res_screen 5}
   )
   (T
      "Toggle profiling timers"
      (filters game)
      {rnd toggle_timers}
      {rnd toggle_overlay rate}
   )
   (u
      "Toggle fullscreen camera/skeleton debug drawing"
      (filters natural_input)
      {cheat_display show_bool
         "Fullscreen camera/skeleton"
         {ui toggle_full_screen_draw}
      }
   )
   (u
      ctrl
      "Toggle threaded skeleton update"
      (filters natural_input)
      {cheat_display show_bool
         "Threaded Skeleton Update"
         {toggle_skeletal_update_thread}
      }
   )
   (U
      "Toggle UI load times"
      (filters meta)
      (value_bool {ui showing_load_times})
      {ui toggle_load_times}
   )
   (v
      "Venue preference cycle"
      (filters meta)
      {meta cycle_venue_preference}
      {meta_performer setup_venue}
      {cheat_display show
         {sprintf "Venue Preference: %s" {meta get_venue_preference}}
      }
   )
   (V
      "Turn on verb barks"
      (filters game)
      {if {game_panel is_up}
         {if_else {action_bark_player get active}
            {action_bark_player set_active FALSE}
            {$hud_panel add_all_barks}
         }
         {cheat_display show_bool "actions barks " {action_bark_player get active}}
      }
   )
   (v
      ctrl
      "toggle VO spew"
      {if {game_panel is_up}
         {do
            ($new_state {! {game_panel get vo_spew}})
            {game_panel set vo_spew $new_state}
            {cheat_display show_bool "VO spew" $new_state}
         }
      }
   )
   (w
      "Win the game"
      (filters game)
      {if {game_panel is_up}
         {game_panel win}
      }
   )
   (x
      "Show skeleton identification debug"
      (filters gesture)
      {cheat_display show_bool
         "Skeleton identification debug"
         {skeleton_identifier toggle_draw_debug}
      }
   )
   (x
      ctrl
      "Show skeleton chooser debug"
      (filters gesture)
      {cheat_display show_bool
         "Skeleton chooser debug"
         {skeleton_chooser toggle_draw_debug}
      }
   )
   (x
      alt
      "Toggle Kinect autoexposure"
      (filters game meta)
      {cheat_display show
         {sprint
            "Autoexposure: "
            {if_else {gesture_mgr toggle_autoexposure}
               "on"
               "off"
            }
         }
      }
   )
   (X
      "Toggle shuttle"
      (filters game)
      {toggle_shuttle}
   )
   (X
      alt
      "Disable skeleton identification"
      (filters gesture)
      {gesture_mgr set_identification_enabled FALSE}
      {cheat_display show "Disable skeleton identification"}
   )
   (y
      "Toggle fake leaderboard upload failure"
      {toggle_fake_leaderboard_upload_failure}
   )
   (y
      ctrl
      "Toggle on character feedback"
      (filters game)
      {set $hide_character_feedback {! $hide_character_feedback}}
      {do
         ($wrld {$hamdirector get cur_world})
         ($feedback_list ())
         {resize $feedback_list 0}
         {push_back
            $feedback_list
            {find_obj $wrld phrase_meter draw.grp}
         }
         {push_back
            $feedback_list
            {find_obj $wrld text_feedback draw.grp}
         }
         {push_back $feedback_list {find_obj $wrld move_feedback}}
         {foreach $elem $feedback_list
            {if $elem
               {$elem set_showing {! $hide_character_feedback}}
            }
         }
      }
      {cheat_display show_bool
         "On character feedback "
         {! $hide_character_feedback}
      }
   )
   (Y
      "Game: Toggle mute master fader"
      (filters game)
      {if {game_panel is_up}
         {audio toggle_mute_master}
      }
   )
   (z
      "Toggle showing world"
      (filters game)
      (value_bool
         {&&
            $hamdirector
            {$hamdirector get cur_world}
            {{$hamdirector get cur_world} showing}
         }
      )
      {if {&& $hamdirector {$hamdirector get cur_world}}
         {{$hamdirector get cur_world} set_showing
            {! {{$hamdirector get cur_world} showing}}
         }
         {cheat_display show_bool "VENUE" {{$hamdirector get cur_world} showing}}
      }
   )
   (z
      ctrl
      "Toggle pause on skeleton loss"
      (filters natural_input)
      {cheat_display show_bool
         "Pause on skeleton loss"
         {gesture_mgr toggle_pause_on_skeleton_loss}
      }
      {if {pause_panel is_up}
         {pause_panel update_skeleton_status}
      }
   )
   (Z "Print the particle pool size" {print_particle_pool_size})
   ('+'
      "Toggle Store Metadata Index"
      (value {net_cache_mgr server_type})
      (filters store)
      {cheat_display show
         {sprintf
            "Music Store now using %s metadata"
            {net_cache_mgr cheat_next_server}
         }
      }
   )
   (KB_F5
      ctrl
      "Fake 'xbox' voice command"
      (filters game)
      {speech_mgr emulate_input "xbox"}
   )
   (KB_F6
      ctrl
      "Fake 'xbox previous' voice command"
      (filters game)
      {speech_mgr emulate_input "xbox previous"}
   )
   (KB_F7
      ctrl
      "Fake 'xbox skip' voice command"
      (filters game)
      {speech_mgr emulate_input "xbox skip"}
   )
   (KB_F8
      ctrl
      "Fake 'back' voice command"
      (filters game)
      {speech_mgr emulate_input "back"}
   )
   (KB_F9
      ctrl
      "Fake 'xbox play song' voice command"
      (filters game)
      {speech_mgr emulate_input "xbox play song"}
   )
   (')' "Win with 0 stars" {fake_win 0})
   (! "Win with 1 star" {fake_win 1})
   ('@' "Win with 2 stars" {fake_win 2})
   (# "Win with 3 stars" {fake_win 3})
   ('$' "Win with 4 stars" {fake_win 4})
   ('%' "Win with 5 stars" {fake_win 5})
   ('^' "Win with 6 stars" {fake_win 6})
   (<
      "Jump backward a bit in time"
      (filters game)
      {if {&& {exists game} {game_panel is_up}}
         {game jump {- {game get_song_ms} 1000.0}}
      }
   )
   (KB_UP
      "Double song speed / Paused: increase vocal pitch window size"
      (filters game)
      {if {game_panel is_up}
         {change_speed 2.0}
      }
   )
   (KB_DOWN
      "Halve song speed / Paused: decrease vocal pitch window size"
      (filters game)
      {if {game_panel is_up}
         {change_speed 0.5}
      }
   )
   (KB_LEFT
      "Rewind back in time 3 seconds"
      (filters game)
      {if {game_panel is_up}
         {game jump {max 0 {- {'*' 1000 {master stream_time}} 3000}}}
      }
   )
   (KB_RIGHT
      "Fast forward in time 3 seconds"
      (filters game)
      {if {game_panel is_up}
         {game jump
            {min {master song_duration_ms} {'+' {'*' 1000 {master stream_time}} 3000}}
         }
      }
   )
   (KB_RIGHT
      ctrl
      "Rotate Debug Skeleton drawing by 90 degrees"
      (filters natural_input)
      {cheat_display show
         {sprintf "Skeleton rotation: %f degrees" {ui next_skeleton_draw_rot}}
      }
   )
   (KB_ENTER
      "Skills - skip to next section/ Multiplayer - skip to end of section"
      (filters game)
      {switch {game_panel get_type}
         (practice {game_panel cheat_skip_section})
         (multiplayer {game_panel cheat_skip_phase})
      }
   )
   (':'
      "Toggle pink error shaders"
      (filters game meta)
      {cheat_display show
         {sprint
            "Pink error shaders (for uncached shaders): "
            {if_else {rnd toggle_error_shaders}
               "on"
               "off"
            }
         }
      }
   )
   ('['
      alt
      "Previous performance level"
      (filters game)
      {if {== {game_panel get_type} perform}
         {game_panel force_performance_previous}
      }
   )
   (']'
      alt
      "Next performance level"
      (filters game)
      {if {== {game_panel get_type} perform}
         {game_panel force_performance_next}
      }
   )
   (>
      "Toggle Language"
      (filters writer)
      (value {system_language})
      {do
         ($old_notify_level $notify_level)
         {set $notify_level 0}
         {switch_system_language}
         {cheat_display show {sprint "System language set to " {system_language}}}
         {set $notify_level $old_notify_level}
      }
   )
   ('\\'
      "Sync and reload locale files"
      (filters writer)
      {sync_reload_locale}
      {cheat_display show "Locale files synced and reloaded"}
   )
   ('?'
      "Switch camera area"
      (filters game)
      {if $hamdirector
         {do
            ($output "Reset")
            ($cur_shot {$hamdirector get cur_shot})
            {'++' $cheat.cam_area}
            {if {> $cheat.cam_area 2}
               {set $cheat.cam_area 0}
            }
            {cond
               ({== $cheat.cam_area 0}
                  {$hamdirector force_shot ""}
               )
               ({== $cheat.cam_area 1}
                  {$hamdirector force_shot area1_far01.shot}
                  {set $output "Area1"}
               )
               ({== $cheat.cam_area 2}
                  {$hamdirector force_shot area2_far01.shot}
                  {set $output "Area2"}
               )
            }
            {cheat_display show {sprint "Venue Area: " $output}}
         }
      }
   )
   (' '
      "Show next camera output (RGB/depth/off)"
      (filters natural_input)
      {cheat_display show
         {sprintf "Camera output: %s" {ui display_next_camera_output}}
      }
   )
   (' '
      alt
      "Toggle player visualizer"
      (filters natural_input)
      {if $hamdirector
         {do
            ($vis {! {$hamdirector get player_freestyle}})
            {$hamdirector set player_freestyle $vis}
            {set $force_freestyle $vis}
            {cheat_display show_bool "Player Visualizer: " $vis}
         }
      }
   )
   #ifndef HX_PC
   ('}'
      #ifdef HX_XBOX
      "Check locale achievements vs. xlast"
      #else
      "Check locale trophies vs. trophy file"
      #endif
      (filters writer)
      {achievements check_strings}
   )
   #endif
)