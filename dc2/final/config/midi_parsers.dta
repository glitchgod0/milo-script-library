(init
   {func rt_test_space
      ($before $after)
      {&& {> $mp.before_delta_sec $before} {> $mp.after_delta_sec $after}}
   }
   {func extract_start_offset
      ($snd)
      {do
         ($samp "")
         ($ret 0)
         {if $snd
            {switch {$snd class_name}
               (Sfx
                  {if {$snd size (sfxmaps)}
                     {set $samp {$snd get (sfxmaps 0 sample)}}
                  }
               )
               (Sound {set $samp {$snd get sample}})
            }
         }
         {if {&& $samp {$samp size (markers)}}
            {set $ret {/ {$samp get (markers 0 sample)} {$samp get sample_rate}}}
         }
         $ret
      }
   }
   {func calculate_lined_beat
      ($dest_beat $offset_seconds $audio_speed)
      {do
         ($offset
            {if_else {exists profile_mgr}
               {/ {profile_mgr get_song_to_taskmgr_ms} 1000}
               0
            }
         )
         {seconds_to_beat
            {'+'
               {- {beat_to_seconds $dest_beat} {'*' $offset_seconds $audio_speed}}
               $offset
            }
         }
      }
   }
   {new MidiParser
      events_parser
      (track_name EVENTS)
      (text
         {unless {has_substr $mp.val crowd_}
            {$this add_message $mp.data}
         }
      )
      (init
         {if {exists hamprovider}
            {$this add_sink hamprovider () kSinkModeExportType}
         }
      )
   }
   {new MidiParser
      active_events_parser
      (track_name EVENTS)
      (compress TRUE)
      (text
         {unless
            {'||'
               {== $mp.val section}
               {has_substr $mp.val tut_}
               {&&
                  {has_substr $mp.val crowd_}
                  {! {find_elem (crowd_clap crowd_noclap) $mp.val}}
               }
            }
            {$this add_message $mp.val}
         }
      )
   }
   {new MidiParser
      world_crowd_parser
      (track_name EVENTS)
      (compress TRUE)
      (text
         {if {has_substr $mp.val crowd_}
            {$this add_message $mp.val}
         }
      )
   }
   {new MidiParser
      song_sections
      (track_name EVENTS)
      (compress TRUE)
      (text
         {if {== $mp.val section}
            #ifdef HX_PC
            {if $tool_song
               {$tool_song add_section {elem $mp.data 1} $mp.start}
            }
            #endif
         }
      )
   }
   {new MidiParser
      midi_player
      (play_note
         ($val)
         {if [active]
            {do
               ($sample {elem [mapping] $val})
               {if $sample
                  {$sample play}
               }
            }
         }
      )
      (track_name DRUMS)
      (compress TRUE)
      (message_self TRUE)
      (message_type play_note)
      (mapping ())
      (active FALSE)
      (play_range_start -1)
      (play_range_end -1)
      (init
         {resize [mapping] 128}
         {foreach_int $i 0 128
            {set_elem [mapping] $i ""}
         }
         {if {&& $hamdirector {$hamdirector get_world}}
            {do
               ($midi_bank {{$hamdirector get_world} find midi_bank FALSE})
               {if $midi_bank
                  {$midi_bank iterate
                     (Sfx midi_sample)
                     $midi_sample
                     {do
                        ($index {$midi_sample get index})
                        {if {>= $index 0}
                           {set_elem [mapping] $index $midi_sample}
                        }
                     }
                  }
                  {$midi_bank iterate
                     (Sound midi_sample)
                     $midi_sample
                     {do
                        ($index {$midi_sample get index})
                        {if {>= $index 0}
                           {set_elem [mapping] $index $midi_sample}
                        }
                     }
                  }
               }
            }
         }
      )
      (midi {$this add_message $mp.val})
   }
   #define MIDI_COUNT_IN_PLAYER_COMMON (
      (message_self TRUE)
      (message_type play)
      (track_name '')
      (midi)
      (ignore_next FALSE)
      (active TRUE)
      (last_played "")
      (play
         ($val)
         {if {&& $val {!= $val [last_played]} [active] {! [ignore_next]}}
            {$val play}
            {set [last_played] $val}
         }
         {set [ignore_next] FALSE}
      )
      (reset
         {$this clear_events}
         {set [last_played] ""}
      )
      (set_section
         ($s $e)
         {$this clear_events}
         {if $hud_panel
            {do
               ($sound_bank {$hud_panel find sound_bank})
               ($mybeat 0)
               ($offsetbeat 0)
               ($sound "")
               {foreach_int $i 0 4
                  {set $mybeat {'+' {round $s} $i}}
                  {set $sound
                     {$sound_bank find {elem [count_list] $i} FALSE}
                  }
                  {if $sound
                     {set $offsetbeat
                        {calculate_lined_beat $mybeat {extract_start_offset $sound} [audio_speed]}
                     }
                     {$this add_message_se $offsetbeat $offsetbeat $sound}
                     {if {&& {== $i 0} {> $e 0}}
                        {set $mybeat {'+' {round $e} $i}}
                        {set $offsetbeat
                           {calculate_lined_beat $mybeat {extract_start_offset $sound} [audio_speed]}
                        }
                        {$this add_message_se $offsetbeat $offsetbeat $sound}
                     }
                  }
               }
               {$this reset_to_beat $beat}
            }
         }
      )
   )
   {new MidiParser
      count_in_player
      (audio_speed 1)
      (count_list (5_fast_01.snd 6_fast_01.snd 7_fast_01.snd 8_fast_01.snd))
      MIDI_COUNT_IN_PLAYER_COMMON
   }
   {new MidiParser
      slow_count_in_player
      (audio_speed 0.6)
      (count_list (5_slow_04.snd 6_slow_04.snd 7_slow_04.snd 8_slow_04.snd))
      MIDI_COUNT_IN_PLAYER_COMMON
   }
   {new MidiParser
      action_bark_player
      (message_self TRUE)
      (message_type play)
      (track_name '')
      (midi)
      (active FALSE)
      (bank "")
      (bank_name barks)
      (play
         ($val)
         {if {&& $val [active]}
            {$val play}
         }
      )
      (add_barks
         ($move $prop $start)
         {if {&& $hud_panel $move}
            {do
               ($audio_speed {audio get speed})
               ($b 0)
               ($sound "")
               {if {! [bank]}
                  {set [bank] {find_obj {$move dir} [bank_name]}}
               }
               {$move foreach_keyframe $move
                  $prop
                  $frame
                  $value
                  {set $b {'+' $start {/ $frame 480}}}
                  {if [bank]
                     {set $sound
                        {[bank] find {sprint $value ".snd"} FALSE}
                     }
                  }
                  #ifdef HX_PC
                  {if {&& {! $sound} {exists milo}}
                     {if {! {exists master_barks_bank}}
                        {do
                           ($master_barks {load_objects "sfx/vo_actionbarks.milo"})
                           {$master_barks set_name "master_barks_bank"}
                           {set [bank] $master_barks}
                        }
                     }
                     {if {exists master_barks_bank}
                        {set $sound
                           {[bank] find {sprint $value ".snd"} FALSE}
                        }
                     }
                  }
                  #endif
                  {if $sound
                     {set $b
                        {calculate_lined_beat $b {extract_start_offset $sound} $audio_speed}
                     }
                     {$this add_message_se $b $b $sound}
                  }
               }
            }
         }
      )
      (set_active
         ($active)
         {if {!= $active [active]}
            {set [active] $active}
            {if_else [active]
               {$this reset_to_beat $beat}
               {$this clear_events}
            }
         }
      )
   }
   {new MidiParser
      move_sound_player
      (message_self TRUE)
      (message_type play)
      (track_name '')
      (midi)
      (bank '')
      (play
         ($val)
         {if $val
            {$val play}
         }
      )
      (init
         {if $hud_panel
            {set [bank] {$hud_panel find sound_bank}}
         }
      )
      (set_move
         ($move $start_beat)
         {$this clear_events}
         {if {&& [bank] $move}
            {do
               ($b 0)
               ($audio_speed {audio get speed})
               {$move foreach_keyframe $move
                  (move_sound)
                  $frame
                  $value
                  {set $b {'+' $start_beat {/ $frame 480}}}
                  {set $sound {find_obj [bank] {sprint $value ".snd"}}}
                  {if $sound
                     {set $b
                        {calculate_lined_beat $b {extract_start_offset $sound} $audio_speed}
                     }
                     {$this add_message_se $b $b $sound}
                  }
               }
            }
         }
      )
   }
   {new MidiParser
      photo_taker
      (message_self TRUE)
      (message_type update)
      (track_name '')
      (midi)
      (take_rate 2)
      (photos_taken 0)
      (photo_count 0)
      (rating '')
      (display_token '')
      (init
         ($start_take_beat
            $photo_count
            $display_token
            $show_beat
            $show_result_beat
            $hide_beat
         )
         {do
            ($flash_beat {- $start_take_beat 4})
            ($auto_expose_on {- $start_take_beat 6})
            ($auto_expose_off {- $start_take_beat 1})
            ($take_beat -1)
            {$this clear_events}
            {set [photos_taken] 0}
            {set [photo_count] $photo_count}
            {$this add_message_se $auto_expose_on $auto_expose_on autoexpose_on}
            {set [display_token] $display_token}
            {$this add_message_se $flash_beat $flash_beat flash}
            {$this add_message_se $auto_expose_off $auto_expose_off autoexpose_off}
            {foreach_int $i 0 [photo_count]
               {set $take_beat {'+' $start_take_beat {/ $i [take_rate]}}}
               {$this add_message_se $take_beat $take_beat take}
            }
            {if {>= $show_result_beat 0}
               {$this add_message_se $show_result_beat $show_result_beat show_result}
            }
            {$this add_message_se $show_beat $show_beat show}
            {$this add_message_se $hide_beat $hide_beat hide}
            {set [rating] ''}
         }
      )
      (update
         ($state)
         {if {&& $hud_panel $hamdirector}
            {switch $state
               (flash
                  {if {&& {exists profile_mgr} {! {profile_mgr get_disable_photos}}}
                     {handle (hamprovider prepare_photo_take)}
                  }
               )
               (take
                  {if {&& {exists profile_mgr} {! {profile_mgr get_disable_photos}}}
                     {$hud_panel take_snapshot}
                     {if {exists meta_performer}
                        {meta_performer freestyle_picture_taken}
                     }
                     {handle
                        (hamprovider photo_take [photos_taken] [photo_count])
                     }
                     {'++' [photos_taken]}
                  }
               )
               (show
                  {if {&& {exists profile_mgr} {! {profile_mgr get_disable_photos}}}
                     {$hud_panel show_snapshots TRUE [display_token]}
                  }
               )
               (hide
                  {$hud_panel show_snapshots FALSE 0}
                  {$this clear_events}
               )
               (show_result
                  {do
                     ($result_anim
                        {find_obj $hud_panel freestyle_text_feedback {sprint [rating] ".anim"}}
                     )
                     {if $result_anim
                        {$result_anim animate}
                     }
                  }
               )
            }
         }
      )
   }
   {new MidiParser
      gameplay_event_scheduler
      (message_self TRUE)
      (message_type process)
      (track_name '')
      (midi)
      (process
         ($data)
         {switch {type $data}
            (kDataObject {$hud_panel play $data})
            (kDataSymbol
               {switch $data
                  (done {$this reset})
                  (deactivate_timeline
                     {do
                        ($timeline {find_obj $hud_panel dynamic_hud})
                        {if $timeline
                           {$timeline deactivate}
                        }
                     }
                  )
                  (highlight_awards
                     {do
                        ($timeline {find_obj $hud_panel dynamic_hud})
                        {if $timeline
                           {$timeline highlight_awards}
                        }
                     }
                  )
                  {handle (hamprovider $data)}
               }
            )
         }
      )
      (add_world_message
         ($beat $message)
         {$this add_message_se $beat $beat $message}
      )
      (reset {$this clear_events})
   }
)
(finish_loading)