#define kChoiceOrdered (0)
#define kChoiceRandom (1)
#define kChoiceRandomNoRepeat (2)
#define kChoiceRandomJukeBox (3)
#define kIgnore (0)
#define kQueue (1)
#define kQueueOne (2)
#define kImmediate (3)
#define kWhenAble (4)
#define kEqual (0)
#define kNotEqual (1)
#define kGreaterThan (2)
#define kGreaterThanOrEqual (3)
#define kLessThan (4)
#define kLessThanOrEqual (5)
#define kTransition (6)
#define kDefault (7)
#define kInt (0)
#define kFloat (1)
#define kBool (2)
#define kString (3)
#define kColor (4)
#define kObject (5)
#define kStopImmediate (0)
#define kStopLastFrame (1)
#define kStopOnMarker (2)
#define kStopBetweenMarkers (3)
#define kReleaseAndContinue (4)
#define kDeactivateOnly (0)
#define kRequestStopOnly (1)
#define kDeactivateOrRequestStop (2)
#define kAlways (3)
#ifdef _DEBUG
#define kBreakNone (0)
#define kBreakActivate (1)
#define kBreakDeactivate (2)
#define kBreakRequestStop (3)
#define kBreakRequestStopCancel (4)
#define kBreakChildFinished (5)
#define kBreakReactivate (6)
#define kBreakExecute (7)
#define kBreakAll (8)
#endif
#define FLOWNODE_EDITORBLOCK (
   (comment string (help "notes about this node"))
   (debug_output
      bool
      (no_test)
      (help
         "Causes information about this node to be printed to the console for debugging, please set to false when done!"
      )
   )
   #ifdef _DEBUG
   (breakpoint
      int
      (list
         (
            ("kBreakNone" "No Breakpoint")
            ("kBreakActivate" "Break on initial activation")
            ("kBreakDeactivate" "Break when forced to stop")
            ("kBreakRequestStop" "Break when asked to stop")
            ("kBreakRequestStopCancel" "Break when request stop is canceled")
            ("kBreakChildFinished" "Break when a child of this node is finished")
            ("kBreakReactivate" "Break on re-entrance due to event")
            ("kBreakExecute" "Break on execute function of this node")
            ("kBreakAll" "Break on all functions within this node")
         )
      )
      (help
         "To use breakpoints select the function which will call punt you into the debuger when hit. Not serialized with the file!"
      )
   )
   #endif
)
#define FLOW_LOADING_DIR (
   (dir
      {if_else {&& {!= {$this dir} NULL} {!= {{$this dir} dir} NULL}}
         {{$this dir} dir}
         {$this dir}
      }
   )
)
#define DRIVE_PROPERTY_BUTTON (
   (inline_script
      ">"
      (script
         {milo edit_math_ops
            $this
            $milo_prop_path
            {$this get_property_src_objects TRUE}
            TRUE
         }
         {milo refresh_flow_editor}
      )
   )
)
#define DRIVE_PROPERTY_BUTTON_NO_FILTER (
   (inline_script
      ">"
      (script
         {milo edit_math_ops
            $this
            $milo_prop_path
            {$this get_property_src_objects TRUE}
            FALSE
         }
         {milo refresh_flow_editor}
      )
   )
)
#define DRIVE_PROPERTY_BUTTON_PROVIDERS (
   (inline_script
      ">"
      (script
         {milo edit_math_ops
            $this
            $milo_prop_path
            {$this get_property_event_providers TRUE}
            FALSE
         }
         {milo refresh_flow_editor}
      )
   )
)
#define USE_VALUE_ALIAS (
   (value_alias
      {$this is_driven_property $milo_prop_path}
      {$this get_driven_display $milo_prop_path}
   )
)
#define kFlowStart (0)
#define kFlowStopImmediate (1)
#define kFlowStopWhenAble (2)
#define FLOW_PROPANIM_COMMANDS_ENUM (("kFlowStart" "kFlowStopImmediate" "kFlowStopWhenAble"))
(Flow
   (description "Top level flow")
   (allowed_dirs ObjectDir)
   (superclasses ObjectDir)
   (hide_from_milo {$this is_embedded})
   (ext flow)
   (types
      (UI
         (editor
            (start_on_exit bool (help "Should we automatically start on exit?"))
            (block_exit bool (help "Should we block exit until this flow finishes?"))
         )
         (start_on_exit FALSE)
         (block_exit FALSE)
      )
   )
   (editor
      (start_on_enter
         bool
         (hide {$this is_embedded})
         (help "Should we automatically start on enter?")
         (refresh)
      )
      (private
         bool
         (hide {'||' {$this is_embedded} [start_on_enter]})
         (help "Are we hidden from run nodes?")
         (no_test)
      )
      (event_provider
         object
         (class MsgSource)
         (list {$this get_event_providers TRUE})
         (hide {'||' {$this is_embedded} [start_on_enter]})
         (help "The Object which I listen to for events")
      )
      (trigger_events
         (array
            symbol
            (list {$this supported_events})
            (help "Events which run this flow")
         )
         (hide {'||' {$this is_embedded} [start_on_enter]})
         (no_test)
         (post_sync
            {if {exists milo}
               {milo refresh_flow_editor}
            }
         )
      )
      (interrupt
         int
         (list
            (
               ("kIgnore" "Ignore the event")
               (
                  "kQueue"
                  "Queue all events and execute each when the last one is finished"
               )
               (
                  "kQueueOne"
                  "Queue all events, but only ever let the queue be one event in size"
               )
               ("kImmediate" "Forceably stop everything and do this right now!")
               ("kWhenAble" "Ask children to stop, and run the event when they finish")
            )
         )
         (hide {'||' {$this is_embedded} [start_on_enter]})
         (help "Determines how we handle re-triggering of this flow")
      )
      (stop_events
         (array
            symbol
            (list {$this supported_events})
            (help "Events which stop this flow")
         )
         (hide {$this is_embedded})
         (no_test)
         (post_sync
            {if {exists milo}
               {milo refresh_flow_editor}
            }
         )
      )
      (hard_stop
         bool
         (help "force things to stop immediately?")
         (hide {$this is_embedded})
      )
      (dynamic_properties
         (array
            (struct
               (name string (help "Name for the property"))
               (type
                  int
                  (list ("kInt" "kFloat" "kBool" "kString" "kColor" "kObject"))
                  (help "type of the property")
                  (refresh dynamic_properties)
               )
               (default_int
                  int
                  (hide {!= [dynamic_properties {elem $milo_prop_path 1} type] kInt})
               )
               (default_bool
                  bool
                  (hide {!= [dynamic_properties {elem $milo_prop_path 1} type] kBool})
               )
               (default_float
                  float
                  (hide {!= [dynamic_properties {elem $milo_prop_path 1} type] kFloat})
               )
               (default_string
                  string
                  (hide {!= [dynamic_properties {elem $milo_prop_path 1} type] kString})
               )
               (default_color
                  color
                  (hide {!= [dynamic_properties {elem $milo_prop_path 1} type] kColor})
               )
               (default_object
                  object
                  (class Object)
                  (hide {!= [dynamic_properties {elem $milo_prop_path 1} type] kObject})
               )
               (class_type
                  symbol
                  (list (Object Anim Flow))
                  (hide {!= [dynamic_properties {elem $milo_prop_path 1} type] kObject})
               )
               (help string (help "Help string for the user"))
            )
         )
         (hide {$this is_embedded})
      )
      FLOWNODE_EDITORBLOCK
      (parameters (indent))
   )
   (anim_props
      (toggle_running
         int
         (list FLOW_PROPANIM_COMMANDS_ENUM)
         (help "Property to start or stop a flow via a prop anim")
      )
   )
   (supported_events
      (
         (test_event
            (editor
               (param1 float)
               (param2 float)
            )
            (param1 0.0)
            (param2 0.0)
         )
      )
   )
)
(FlowCommand
   (description "Runs a handler exposed by coders on an object")
   (allowed_dirs)
   (ext fact)
   (hide_from_milo TRUE)
   (types)
   (editor
      (target
         object
         (class Object)
         FLOW_LOADING_DIR
         (list {$this get_possible_targets})
         (help "The object which I'm going to trigger a handler on")
      )
      (handler
         symbol
         (list {$this get_handler_list [target]})
         (help "Handler to fire on the target object")
         (post_sync
            {if {exists milo}
               {milo refresh_flow_editor}
            }
         )
      )
      FLOWNODE_EDITORBLOCK
      (parameters (indent))
   )
)
(FlowEventListener
   (description "Listens for/filters events and triggers children")
   (allowed_dirs)
   (hide_from_milo TRUE)
   (ext el)
   (types)
   (editor
      (event_provider
         object
         (class MsgSource)
         FLOW_LOADING_DIR
         (list {$this get_event_providers TRUE})
         (help "The Object which I listen to for events")
      )
      (trigger_events
         (array
            symbol
            (list {$this supported_events})
            (help "Events which run this flow")
         )
         (no_test)
         (post_sync
            {if {exists milo}
               {milo refresh_flow_editor}
            }
         )
      )
      (stop_events
         (array
            symbol
            (list {$this supported_events})
            (help "Events which stop this flow")
         )
         (no_test)
         (post_sync
            {if {exists milo}
               {milo refresh_flow_editor}
            }
         )
      )
      (hard_stop bool (help "force things to stop immediately?"))
      (interrupt
         int
         (list
            (
               ("kIgnore" "Ignore the event")
               (
                  "kQueue"
                  "Queue all events and execute each when the last one is finished"
               )
               (
                  "kQueueOne"
                  "Queue all events, but only ever let the queue be one event in size"
               )
               ("kImmediate" "Forceably stop everything and do this right now!")
               ("kWhenAble" "Ask children to stop, and run the event when they finish")
            )
         )
         (help "Determines how we handle re-triggering of this flow")
      )
      (event_count
         int
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (help
            "How many events do we process before disabling ourselves? 0 is infinite"
         )
      )
      (start_on_activate
         bool
         (help
            "When true, we will start our children when we begin listening for events"
         )
      )
      FLOWNODE_EDITORBLOCK
   )
)
(FlowNode
   (description "A flow node")
   (allowed_dirs)
   (hide_from_milo TRUE)
   (ext fnode)
   (types)
   (editor FLOWNODE_EDITORBLOCK)
   (mathops
      (scalar_to_db
         (help "convert 0 to 1 scalar value to -96 to 0 db")
         (script
            {do
               {clamp $val 0 1}
               {- {'*' $val 96} 96}
            }
         )
      )
      (range_to_scalar
         (help "convert a 0 to n value to 0 to 1 scalar")
         (script
            {do
               {clamp $val 0 $prop_val}
               {if {!= $prop_val 0}
                  {set $val {/ $val $prop_val}}
               }
               $val
            }
         )
      )
   )
)
(FlowSequence
   (description "A sequence of flow objects")
   (allowed_dirs)
   (superclasses)
   (hide_from_milo TRUE)
   (ext fseq)
   (types)
   (editor
      (looping bool (help "Loop forever?") DRIVE_PROPERTY_BUTTON USE_VALUE_ALIAS)
      (repeats
         int
         (help "how many times to reapeat this sequence")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (hide {== [looping] TRUE})
      )
      FLOWNODE_EDITORBLOCK
   )
)
(FlowAnimate
   (description "Plays an animation")
   (allowed_dirs)
   (superclasses)
   (hide_from_milo TRUE)
   (ext fanim)
   (types)
   (editor
      (anim
         object
         (class Anim)
         FLOW_LOADING_DIR
         (help "Anim object to animate")
         DRIVE_PROPERTY_BUTTON
      )
      (blend float DRIVE_PROPERTY_BUTTON USE_VALUE_ALIAS)
      (delay float DRIVE_PROPERTY_BUTTON USE_VALUE_ALIAS)
      (wait bool DRIVE_PROPERTY_BUTTON USE_VALUE_ALIAS)
      (stop_mode
         int
         (list
            (
               "kStopImmediate"
               "kStopLastFrame"
               "kStopOnMarker"
               "kStopBetweenMarkers"
               "kReleaseAndContinue"
            )
         )
         (help "How should we handle stop requests?")
      )
      (immediate_release
         bool
         (help
            "do not wait for animation to finish before continuing flow execution"
         )
      )
      (filter
         (indent
            (enable
               bool
               (refresh)
               (help "Enable animation filtering")
               DRIVE_PROPERTY_BUTTON
               USE_VALUE_ALIAS
            )
            (rate
               int
               (list RATE_ENUM)
               (help "Rate to animate")
               (read_only {! [enable]})
            )
            (start
               float
               (help "Start frame of animation")
               (read_only {! [enable]})
               DRIVE_PROPERTY_BUTTON
               USE_VALUE_ALIAS
            )
            (end
               float
               (help "End frame of animation")
               (read_only {! [enable]})
               DRIVE_PROPERTY_BUTTON
               USE_VALUE_ALIAS
            )
            (scale
               float
               (help "Scale of animation")
               (read_only {! [enable]})
               DRIVE_PROPERTY_BUTTON
               USE_VALUE_ALIAS
            )
            (period
               float
               (help "Period of animation if non-zero")
               (read_only {! [enable]})
               DRIVE_PROPERTY_BUTTON
               USE_VALUE_ALIAS
            )
            (type
               symbol
               (list (range loop dest))
               (help "Type of animation")
               (read_only {! [enable]})
            )
            (ease
               int
               (list EASING_TYPES)
               (help "Easing to apply to animation")
               (read_only {! [enable]})
            )
            (ease_power
               float
               (help "Modifier to easing equation")
               (read_only {! [enable]})
               DRIVE_PROPERTY_BUTTON
               USE_VALUE_ALIAS
            )
            (wrap
               bool
               (help "Wraps animation frame values into range rather than clamping them")
               (read_only {! [enable]})
               DRIVE_PROPERTY_BUTTON
               USE_VALUE_ALIAS
            )
         )
      )
      FLOWNODE_EDITORBLOCK
   )
)
(FlowPickOne
   (description "Picks a single child and activates it")
   (allowed_dirs)
   (ext fpick)
   (hide_from_milo TRUE)
   (superclasses)
   (types)
   (editor
      (choice_type
         int
         (list
            (
               ("kChoiceOrdered" "Picked in order")
               ("kChoiceRandom" "Pick randomly (can repeat)")
               ("kChoiceRandomNoRepeat" "Pick randomly, but don't repeat")
               (
                  "kChoiceRandomJukeBox"
                  "Only repeat when everything from the list has been chosen"
               )
            )
         )
         (help "Style of choice made")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      FLOWNODE_EDITORBLOCK
   )
)
(FlowOnStop
   (description "Runs code when a flow is deactivated or requested to stop")
   (allowed_dirs)
   (ext fstop)
   (hide_from_milo TRUE)
   (superclasses)
   (types)
   (editor
      (mode
         int
         (list
            (
               ("kDeactivateOnly" "Only runs when deactivated (hard, forced stop)")
               ("kRequestStopOnly" "Only runs when request stop is called (latent stop)")
               ("kDeactivateOrRequestStop" "Runs regardless of which stop mode is used")
               ("kAlways" "even runs when the node stops naturally")
            )
         )
         (help
            "Do we only work on interuption request, or when forced to stop immediately"
         )
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      FLOWNODE_EDITORBLOCK
   )
)
(FlowIf
   (description "a single case decision node")
   (allowed_dirs)
   (ext if)
   (hide_from_milo TRUE)
   (superclasses)
   (types)
   (editor
      (first_value
         int
         (help "left hand value in comparison")
         USE_VALUE_ALIAS
         DRIVE_PROPERTY_BUTTON_NO_FILTER
      )
      (operator
         int
         (list
            (
               "kEqual"
               "kNotEqual"
               "kGreaterThan"
               "kGreaterThanOrEqual"
               "kLessThan"
               "kLessThanOrEqual"
            )
         )
         (hide {== [operator] kDefault})
         (post_sync {milo stop_edit_flow})
         (help "equality case to use for comparison")
         (refresh)
      )
      (second_value
         int
         (help "right hand value in comparison")
         USE_VALUE_ALIAS
         DRIVE_PROPERTY_BUTTON_NO_FILTER
      )
      FLOWNODE_EDITORBLOCK
   )
)
(FlowSwitch
   (description "activates children based on comparison cases")
   (allowed_dirs)
   (ext fswitch)
   (hide_from_milo TRUE)
   (superclasses)
   (types)
   (editor
      (value
         int
         (value_alias TRUE {$this get_value_display})
         DRIVE_PROPERTY_BUTTON_NO_FILTER
      )
      (first_valid_case_only
         bool
         (help "When true, the first case to be valid is the only one activated")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      FLOWNODE_EDITORBLOCK
   )
)
(FlowSwitchCase
   (description "a case for a flow switch")
   (allowed_dirs)
   (ext fcase)
   (hide_from_milo TRUE)
   (superclasses)
   (types)
   (editor
      (use_last_value
         bool
         (help "Use the last value to compare against")
         (refresh to_value)
      )
      (to_value
         int
         (alias
            {if_else {== [operator] kTransition}
               to_value
               value
            }
         )
         (help
            {if_else {&& {$this has (operator)} {== [operator] kTransition}}
               "the value we're transitioning to"
               "the value"
            }
         )
         (hide
            {'||'
               {== [operator] kDefault}
               {&& {!= [operator] kTransition} {== [use_last_value] TRUE}}
            }
         )
         (post_sync {milo stop_edit_flow})
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      (from_value
         int
         (hide
            {'||'
               {!= [operator] kTransition}
               {&& {== [operator] kTransition} {== [use_last_value] TRUE}}
            }
         )
         (help "the value we're transitioning from")
         (post_sync {milo stop_edit_flow})
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      (operator
         int
         (list
            (
               "kEqual"
               "kNotEqual"
               "kGreaterThan"
               "kGreaterThanOrEqual"
               "kLessThan"
               "kLessThanOrEqual"
               "kTransition"
            )
         )
         (hide {== [operator] kDefault})
         (post_sync {milo stop_edit_flow})
         (help "equality case to use for comparison")
         (refresh)
      )
      (unregister_parent
         bool
         (help
            "When true, the while node will quit listening for events once this case is run"
         )
         (hide {! {$this is_parent_while}})
      )
      FLOWNODE_EDITORBLOCK
   )
)
(FlowSound
   (description "Plays a sound cue")
   (allowed_dirs)
   (ext fsound)
   (hide_from_milo TRUE)
   (superclasses)
   (types)
   (editor
      (sound
         object
         (class Sound)
         FLOW_LOADING_DIR
         (help "The cue file to play")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      (force_stop
         bool
         (refresh)
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (help "If true, we stop all instances of this sound from playing")
      )
      (volume float (hide [force_stop]) DRIVE_PROPERTY_BUTTON USE_VALUE_ALIAS)
      (pan float (hide [force_stop]) DRIVE_PROPERTY_BUTTON USE_VALUE_ALIAS)
      (transpose float (hide [force_stop]) DRIVE_PROPERTY_BUTTON USE_VALUE_ALIAS)
      (immediate_release
         bool
         (help "do not wait for sound to finish before finishing flow execution")
         (hide [force_stop])
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      (stop_mode
         int
         (list
            ("kStopImmediate" "kStopLastFrame" "kStopOnMarker" "kStopBetweenMarkers")
         )
         (hide [force_stop])
         (help "How should we handle stop requests?")
      )
      FLOWNODE_EDITORBLOCK
   )
)
(FlowRun
   (description "Run or stop another Flow")
   (allowed_dirs)
   (ext frun)
   (hide_from_milo TRUE)
   (superclasses)
   (types)
   (editor
      (target_dir
         object
         FLOW_LOADING_DIR
         (class ObjectDir)
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (help "Allows you to target flows inside of proxies")
      )
      (target
         object
         (list {$this get_target_list})
         (dir [target_dir])
         (help "Flow to start or stop")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      (stop
         bool
         (help "Stop instead of starting the target flow?")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      (immediate_release
         bool
         (help "If true, we don't track the running state of the target flow")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      FLOWNODE_EDITORBLOCK
   )
)
(FlowTimer
   (description "Simple timer with child support")
   (allowed_dirs)
   (ext ftimer)
   (hide_from_milo TRUE)
   (superclasses)
   (types)
   (editor
      (rate
         int
         (list RATE_ENUM)
         (help "Rate to animate")
      )
      (total_time
         float
         (help "total time of timer")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      FLOWNODE_EDITORBLOCK
   )
)
(FlowValueCase
   (description "A value case")
   (allowed_dirs)
   (ext fvcase)
   (hide_from_milo TRUE)
   (superclasses)
   (types)
   (editor
      (value float DRIVE_PROPERTY_BUTTON USE_VALUE_ALIAS)
      FLOWNODE_EDITORBLOCK
   )
)
(FlowOutPort
   (description "An output port for flow encapsulation")
   (allowed_dirs)
   (ext fout)
   (hide_from_milo TRUE)
   (superclasses)
   (types)
   (editor
      (label string (help "Name to show when encapsulated"))
      (immediate_release
         bool
         (help "do not wait around for the label to finish?")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      (stop
         bool
         (help "When true, we request the label to stop instead of running it")
      )
      (exposed bool (help "Is this port exposed for possible linking?"))
      FLOWNODE_EDITORBLOCK
   )
)
(FlowLabel
   (description "A label for flow encapsulation")
   (allowed_dirs)
   (ext flbl)
   (hide_from_milo TRUE)
   (superclasses)
   (types)
   (editor
      (interrupt
         int
         (list ("kIgnore" "kQueue" "kQueueOne" "kImmediate" "kWhenAble"))
         (help "Determines how we handle re-triggering of this label")
      )
      FLOWNODE_EDITORBLOCK
   )
)
(FlowSetProperty
   (description "Set a property on an object")
   (allowed_dirs)
   (ext fset)
   (hide_from_milo TRUE)
   (superclasses)
   (types)
   (editor
      (target
         object
         (class Object)
         FLOW_LOADING_DIR
         (list {$this get_property_target_objects TRUE})
         (help "object to set property on")
      )
      (select_property
         script
         (script
            {if [target]
               {do
                  ($path $prev)
                  {set $prev {$this get_property_path}}
                  {set $path
                     {milo select_prop [target] $prev}
                  }
                  {if $path
                     {milo record $this select_property}
                     {$this set_property_target $path}
                     {milo refresh_flow_sync}
                     {milo refresh_flow_editor}
                  }
               }
            }
         )
      )
      (prop string (read_only TRUE))
      (value int FLOW_LOADING_DIR DRIVE_PROPERTY_BUTTON USE_VALUE_ALIAS)
      (persistent
         bool
         (help
            "Makes this node act like While node, updating automatically when a driven property changes"
         )
      )
      (rate
         int
         (list RATE_ENUM)
         (help "Rate to animate")
         (hide {! {$this allow_blend}})
      )
      (blend_time
         float
         (help "total time of blend to value")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
         (hide {! {$this allow_blend}})
      )
      (change_per_unit
         float
         (help "base time of blend of distance to value")
         (hide {! {$this allow_blend}})
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      (ease
         int
         (list EASING_TYPES)
         (help "easing style to use for blend")
         (hide {! {$this allow_blend}})
      )
      (ease_power
         float
         (help "used in regular, elasic, and back easing")
         (hide {! {$this allow_blend}})
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      (stop_mode
         int
         (list ("kStopImmediate" "kStopLastFrame"))
         (help "How should we handle stop requests?")
         (hide {! {$this allow_blend}})
      )
      FLOWNODE_EDITORBLOCK
   )
)
(FlowMultiSetProperty
   (description "Set a property a bunch of objects at once")
   (allowed_dirs)
   (ext fmset)
   (hide_from_milo TRUE)
   (superclasses)
   (types)
   (editor
      (targets
         (array
            object
            (class Object)
            FLOW_LOADING_DIR
            (list {$this get_property_target_objects FALSE})
            (help "object to set property on")
         )
      )
      (select_property
         script
         (script
            {if {> {size [targets]} 0}
               {do
                  ($path $prev)
                  {set $prev {$this get_property_path}}
                  {set $path
                     {milo select_prop {$this get (targets 0)} $prev}
                  }
                  {if $path
                     {milo record $this select_property}
                     {$this set_property_target $path}
                     {milo refresh_flow_sync}
                     {milo refresh_flow_editor}
                  }
               }
            }
         )
      )
      (prop string (read_only TRUE))
      (value int DRIVE_PROPERTY_BUTTON USE_VALUE_ALIAS)
      FLOWNODE_EDITORBLOCK
   )
)
(FlowWhile
   (description
      "A while node; behaves as if constantly evaluting it's property"
   )
   (allowed_dirs)
   (ext fwhile)
   (hide_from_milo TRUE)
   (superclasses)
   (types)
   (editor
      (value
         int
         (value_alias TRUE {$this get_value_display})
         DRIVE_PROPERTY_BUTTON_PROVIDERS
      )
      (first_valid_case_only
         bool
         (help "When true, the first case to be valid is the only one activated")
         DRIVE_PROPERTY_BUTTON
         USE_VALUE_ALIAS
      )
      FLOWNODE_EDITORBLOCK
   )
)
(PropertyEventProvider
   (description "Object which provides property based events for flow.")
   (allowed_dirs)
   (ext ep)
   (superclasses MsgSource)
   (types
      (example
         (editor
            (score int)
            (game_state
               symbol
               (list (Bad OK Good Awesome))
               (help "How is the band/player doing?")
            )
         )
         (score 0)
         (game_state Bad)
         (supported_events
            (
               (test_event
                  (editor
                     (param1 float)
                     (param2 float)
                  )
                  (param1 0.0)
                  (param2 0.0)
               )
            )
         )
      )
   )
   (editor
      (test_event
         symbol
         (list {$this get_events_list})
         (help "Test event")
         (no_test)
         (no_cdb)
         (post_sync
            {if {exists milo}
               {milo refresh_flow_editor}
            }
         )
         (inline_script "!" (script {$this fire_test_event [test_event]}))
      )
      (parameters (indent))
      (test_event_2
         symbol
         (list {$this get_events_list})
         (help "Test event")
         (no_test)
         (no_cdb)
         (post_sync
            {if {exists milo}
               {milo refresh_flow_editor}
            }
         )
         (inline_script "!" (script {$this fire_test_event [test_event_2]}))
      )
      (test_event_3
         symbol
         (list {$this get_events_list})
         (help "Test event")
         (no_test)
         (no_cdb)
         (post_sync
            {if {exists milo}
               {milo refresh_flow_editor}
            }
         )
         (inline_script "!" (script {$this fire_test_event [test_event_3]}))
      )
      (test_event_4
         symbol
         (list {$this get_events_list})
         (help "Test event")
         (no_test)
         (no_cdb)
         (post_sync
            {if {exists milo}
               {milo refresh_flow_editor}
            }
         )
         (inline_script "!" (script {$this fire_test_event [test_event_4]}))
      )
   )
   (test_event_2)
   (test_event_3)
   (test_event_4)
   (supported_events ())
)