{new UIPanel
   options_panel
   (file options.milo)
   (focus op_audio.btn)
   (poll
      {if $disable_save
         {op_data.btn set_state kDisabled}
      }
   )
   (SELECT_MSG
      {switch $component
         (op_audio.btn {ui goto_screen audio_settings_screen})
         (video_settings.btn {ui goto_screen video_settings_screen})
         (op_data.btn {ui goto_screen options_chooseprof_screen})
         (memory_card.btn {ui goto_screen mem_card_screen})
         (op_bonus.btn {ui goto_screen bonus_material_screen})
         (op_credit.btn {ui goto_screen credits_screen})
      }
      kDataUnhandled
   )
}
{new GHScreen
   options_screen
   (panels meta options_panel helpbar)
   (focus options_panel)
   (helpbar
      (default
         (
            (fret1 help_continue)
            (fret2 help_back)
            (strum help_updown)
         )
      )
   )
}
#define SLIDER_LEVELS (12)
#define AUDIO_SETTINGS_PANEL_HANDLERS (
   (focus gs_band.sld)
   (focus_component "")
   (reset_focus TRUE)
   (orig_vol 0)
   (finish_load
      {gs_band.sld set_num_steps SLIDER_LEVELS}
      {gs_guitar.sld set_num_steps SLIDER_LEVELS}
      {gs_sfx.sld set_num_steps SLIDER_LEVELS}
   )
   (slider_changed
      {'||'
         {!= {options get band_volume_idx} {gs_band.sld current}}
         {!= {options get guitar_volume_idx} {gs_guitar.sld current}}
         {!=
            {options get fx_volume idx}
            {gs_sfx.sld current}
         }
      }
   )
   (enter
      {gs_band.sld set_current {options get band_volume_idx}}
      {gs_guitar.sld set_current {options get guitar_volume_idx}}
      {gs_sfx.sld set_current {options get fx_volume_idx}}
      {stereo.chk set_check {options get_stereo}}
   )
   (set_volumes
      {if_else {$this slider_changed}
         {do
            {options set band_volume_idx {gs_band.sld current}}
            {options set guitar_volume_idx {gs_guitar.sld current}}
            {options set fx_volume_idx {gs_sfx.sld current}}
         }
         kDataUnhandled
      }
   )
   (slider_select_cancel
      ($component)
      {switch $component
         (gs_band.sld {$component set_current [orig_vol]})
         (gs_guitar.sld {$component set_current [orig_vol]})
         (gs_sfx.sld {$component set_current [orig_vol]})
      }
      {$this update_help_display}
      kDataUnhandled
   )
   (FOCUS_MSG
      {$this set focus_component {$new_focus name}}
      {$this update_help_display}
   )
   (update_help_display
      {if_else {$this slider_selected}
         {helpbar set_display
            (
               (fret1 help_confirm)
               (fret2 help_cancel)
               (strum help_adjvol)
            )
         }
         {do
            {if_else {== [focus_component] "gs_stereo.btn"}
               {helpbar set_display
                  (
                     (fret1 help_onoff)
                     (fret2 help_back)
                     (strum help_updown)
                  )
               }
               {helpbar set_display
                  (
                     (fret1 help_select)
                     (fret2 help_back)
                     (strum help_updown)
                  )
               }
            }
         }
      }
   )
   (slider_start_msg
      ($component)
      {do
         ($vol {options get_volume_from_idx {$component current}})
         {switch $component
            (gs_band.sld {play_sfx slider_band (volume $vol) (stop TRUE)})
            (gs_guitar.sld {play_sfx slider_gtr (volume $vol) (stop TRUE)})
            (gs_sfx.sld {play_sfx slider_sfx (volume $vol) (stop TRUE)})
         }
      }
   )
   (SELECT_MSG
      {switch $component
         (gs_band.sld {$this set orig_vol {gs_band.sld current}})
         (gs_guitar.sld {$this set orig_vol {gs_guitar.sld current}})
         (gs_sfx.sld {$this set orig_vol {gs_sfx.sld current}})
         (gs_stereo.btn
            {stereo.chk toggle}
            {options set_stereo {stereo.chk get_check}}
         )
         kDataUnhandled
      }
      {$this update_help_display}
   )
)
{new SliderPanel
   audio_settings_panel
   (file game_settings.milo)
   AUDIO_SETTINGS_PANEL_HANDLERS
}
{new GHScreen
   audio_settings_screen
   (panels meta audio_settings_panel helpbar)
   (focus audio_settings_panel)
   (allow_back FALSE)
   (BUTTON_DOWN_MSG
      {if {&& {! {audio_settings_panel slider_selected}} {== $button kPad_Tri}}
         {$this backwards_anim}
         {synth play_sequence button_back}
         {$this set_volumes}
         {autosave_goto options_screen}
      }
      kDataUnhandled
   )
}
{new SliderPanel
   pause_audio_settings_panel
   (file pause_audio_settings.milo)
   AUDIO_SETTINGS_PANEL_HANDLERS
}
{new GHScreen
   pause_audio_settings_screen
   (panels GAME_PANELS pause_audio_settings_panel helpbar)
   (focus pause_audio_settings_panel)
   (in_game TRUE)
   (allow_back FALSE)
   (animate_transition FALSE)
   (BUTTON_DOWN_MSG
      {if {&& {! {pause_audio_settings_panel slider_selected}} {== $button kPad_Tri}}
         {$this set_volumes}
         {ui goto_screen pause_screen}
      }
      kDataUnhandled
   )
}
{new GHPanel mem_card_panel (file mem_card.milo) (focus save_bands.btn)}
{new GHScreen
   mem_card_screen
   (panels meta mem_card_panel helpbar)
   (focus mem_card_panel)
   (helpbar
      (default
         (
            (fret1 help_continue)
            (fret2 help_back)
            (strum help_updown)
         )
      )
      (autosave.btn
         (
            (fret1 help_onoff)
            (fret2 help_back)
            (strum help_updown)
         )
      )
   )
   (enter {{mem_card_panel find autosave.chk} set_check $autosave})
   (SELECT_MSG
      {switch $component
         (autosave.btn
            {{mem_card_panel find autosave.chk} toggle}
            {set $autosave {{mem_card_panel find autosave.chk} get_check}}
         )
         (save_bands.btn
            {set $mc_save_success_screen $this}
            {set $mc_save_failed_screen $this}
            {ui goto_screen memcard_save_confirm}
         )
         (load_bands.btn
            {set $mc_post_load_screen $this}
            {set $mc_load_failed_screen $this}
            {ui goto_screen memcard_load_confirm}
         )
      }
      kDataUnhandled
   )
}
{new GHPanel
   bonus_material_panel
   (file bonus_material.milo)
   (focus bm_video1.btn)
}
{new GHScreen
   bonus_material_screen
   (item_locked FALSE)
   (panels meta bonus_material_panel helpbar)
   (focus bonus_material_panel)
   (helpbar
      (default
         (
            (fret1 help_select)
            (fret2 help_back)
            (strum help_updown)
         )
      )
      (bm_hidden.btn ((fret2 help_back)))
   )
   (enter
      {$this set item_locked FALSE}
      {$this set_button_state bm_video1.btn}
      {$this set_button_state bm_video2.btn}
      {$this set_button_state bm_video3.btn}
      {{bonus_material_panel find bm_buy.lbl} set_showing [item_locked]}
   )
   (set_button_state
      ($btn)
      {if_else {campaign is_unlocked {$this get_movie $btn}}
         {do
            {$this disable {{bonus_material_panel find bm_hidden.btn} name} kPad_DDown}
            {$this enable {{bonus_material_panel find $btn} name}}
         }
         {do
            {$this disable {{bonus_material_panel find $btn} name} kPad_DDown}
            {$this set item_locked TRUE}
         }
      }
   )
   (BUTTON_DOWN_MSG
      {if_else {&& {== {$this focus_name} bm_hidden.btn} {== $button kPad_X}}
         TRUE
         kDataUnhandled
      }
   )
   (SELECT_MSG
      {play_bonus_video_screen set
         video
         {{game video_provider} get_video_file {$this get_movie $component}}
      }
      {ui goto_screen play_bonus_video_screen}
   )
   (get_movie
      ($btn)
      {switch $btn
         (bm_video1.btn video1)
         (bm_video2.btn video2)
         (bm_video3.btn video3)
         {fail "unknown button: " $btn}
      }
   )
}
{new GHScreen
   play_bonus_video_screen
   (allow_back FALSE)
   (animate_transition FALSE)
   (video "")
   (TRANSITION_COMPLETE_MSG
      {meta play_movie [video]}
      {ui goto_screen bonus_material_screen}
   )
}
{new CreditsPanel
   credits_panel
   (file credits.milo)
   (focus credits.lst)
   (enter {meta_music_stop})
   (exit {meta_music_start})
}
{new GHScreen
   credits_screen
   (panels meta credits_panel helpbar)
   (focus credits_panel)
   (helpbar (default ((fret2 help_back))))
   (go_back
      {$this backwards_anim}
      {ui goto_screen options_screen}
   )
}
#define OFFSET_LEVELS (26)
#define VIDEO_SETTINGS_PANEL_HANDLERS (
   (focus gs_left_p1.btn)
   (focus_component "")
   (orig_sync 0)
   (finish_load {vs_offset.sld set_num_steps OFFSET_LEVELS})
   (enter
      {lefty1.chk set_check {options get_lefty 0}}
      {lefty2.chk set_check {options get_lefty 1}}
      {widescreen.chk set_check {options get_widescreen}}
      {p_scan.chk set_check {options get_pscan}}
      {vs_offset.sld set_current {int {options get_sync_offset}}}
   )
   (update_help_display
      {if_else {$this slider_selected}
         {helpbar set_display
            (
               (fret1 help_confirm)
               (fret2 help_cancel)
               (strum help_adjvol)
            )
         }
         {do
            {switch [focus_component]
               (
                  "p_scan.btn"
                  {helpbar set_display
                     (
                        (fret1 help_onoff)
                        (fret2 help_back)
                        (strum help_updown)
                     )
                  }
               )
               (
                  "widescreen.btn"
                  {helpbar set_display
                     (
                        (fret1 help_onoff)
                        (fret2 help_back)
                        (strum help_updown)
                     )
                  }
               )
               (
                  "vs_auto_adjust.btn"
                  {helpbar set_display
                     (
                        (fret1 help_select)
                        (fret2 help_back)
                        (strum help_updown)
                     )
                  }
               )
            }
         }
      }
   )
   (FOCUS_MSG
      {$this set focus_component {$new_focus name}}
      {$this update_help_display}
   )
   (slider_select_cancel
      ($component)
      {vs_offset.sld set_current [orig_sync]}
      {$this update_help_display}
      kDataUnhandled
   )
   (set_sync
      {if {!= {options get_sync_offset} {vs_offset.sld current}}
         {options set_sync_offset {vs_offset.sld current}}
      }
   )
   (SELECT_MSG
      {switch $component
         (p_scan.btn
            {if_else {p_scan.chk get_check}
               {do
                  {p_scan.chk toggle}
                  {options set_pscan {p_scan.chk get_check}}
               }
               {do
                  {ui goto_screen [pscan_warning]}
               }
            }
         )
         (widescreen.btn
            {widescreen.chk toggle}
            {options set_widescreen {widescreen.chk get_check}}
         )
         (vs_offset.sld {$this set orig_sync {vs_offset.sld current}})
         (gs_left_p1.btn
            {lefty1.chk toggle}
            {options set_lefty 0 {lefty1.chk get_check}}
         )
         (gs_left_p2.btn
            {lefty2.chk toggle}
            {options set_lefty 1 {lefty2.chk get_check}}
         )
         kDataUnhandled
      }
   )
)
{new SliderPanel
   video_settings_panel
   (file video_settings.milo)
   VIDEO_SETTINGS_PANEL_HANDLERS
   (pscan_warning pscan_warning_screen)
}
{new GHScreen
   video_settings_screen
   (panels meta video_settings_panel helpbar)
   (focus video_settings_panel)
   (allow_back FALSE)
   (helpbar
      (default
         (
            (fret1 help_select)
            (fret2 help_back)
            (strum help_updown)
         )
      )
   )
   (BUTTON_DOWN_MSG
      {if {&& {! {video_settings_panel slider_selected}} {== $button kPad_Tri}}
         {$this backwards_anim}
         {synth play_sequence button_back}
         {video_settings_panel set_sync}
         {autosave_goto options_screen}
      }
      kDataUnhandled
   )
}
{new GHPanel
   pscan_warning_panel
   (file pscan_warning.milo)
   (focus pscan_ok.btn)
}
#define PSCAN_WARNING_SCREEN_HANDLERS (
   (focus pscan_warning_panel)
   (allow_back FALSE)
   (helpbar (default ((fret1 help_continue))))
   (SELECT_MSG
      {switch $component
         (pscan_ok.btn
            {pscan_switch_screen set done_screen [done_screen]}
            {ui goto_screen [switch_screen]}
         )
         (pscan_cancel.btn {ui goto_screen [done_screen]})
      }
   )
)
{new GHScreen
   pscan_warning_screen
   (panels meta pscan_warning_panel helpbar)
   PSCAN_WARNING_SCREEN_HANDLERS
   (done_screen video_settings_screen)
   (switch_screen pscan_switch_screen)
}
{new GHScreen
   pause_pscan_warning_screen
   (panels GAME_PANELS pscan_warning_panel helpbar)
   PSCAN_WARNING_SCREEN_HANDLERS
   (animate_transition FALSE)
   (done_screen pause_video_settings_screen)
   (switch_screen pause_pscan_switch_screen)
}
{new GHPanel
   pscan_switching_panel
   (file pscan_switching.milo)
   (focus pscan_yes.btn)
}
#define PSCAN_SWITCH_SCREEN_HANDLERS (
   (focus pscan_switching_panel)
   (allow_back FALSE)
   (test_time 0)
   (helpbar (default ((fret1 help_continue))))
   (TRANSITION_COMPLETE_MSG
      {options set_pscan TRUE}
      {$this set test_time {'+' {taskmgr ui_seconds} 15}}
   )
   (reset_pscan_time {> {taskmgr ui_seconds} [test_time]})
   (poll
      {if {&& {$this reset_pscan_time} {options get_pscan}}
         {options set_pscan FALSE}
         {ui goto_screen [done_screen]}
      }
   )
   (SELECT_MSG
      {switch $component
         (pscan_yes.btn {ui goto_screen [done_screen]})
         (pscan_no.btn
            {options set_pscan FALSE}
            {ui goto_screen [done_screen]}
         )
      }
   )
)
{new GHScreen
   pscan_switch_screen
   (panels meta pscan_switching_panel helpbar)
   PSCAN_SWITCH_SCREEN_HANDLERS
   (done_screen video_settings_screen)
}
{new GHScreen
   pause_pscan_switch_screen
   (panels GAME_PANELS pscan_switching_panel helpbar)
   PSCAN_SWITCH_SCREEN_HANDLERS
   (animate_transition FALSE)
   (done_screen pause_video_settings_screen)
}
{new SliderPanel
   pause_video_settings_panel
   (file pause_video_settings.milo)
   VIDEO_SETTINGS_PANEL_HANDLERS
   (pscan_warning pause_pscan_warning_screen)
}
{new GHScreen
   pause_video_settings_screen
   (panels GAME_PANELS pause_video_settings_panel helpbar)
   (focus pause_video_settings_panel)
   (in_game TRUE)
   (allow_back FALSE)
   (animate_transition FALSE)
   (old_lefty_0 0)
   (old_lefty_1 0)
   (enter
      {set [old_lefty_0] {options get_lefty 0}}
      {set [old_lefty_1] {options get_lefty 1}}
   )
   (lefty_changed
      {'||'
         {!= [old_lefty_0] {options get_lefty 0}}
         {!= [old_lefty_1] {options get_lefty 1}}
      }
   )
   (BUTTON_DOWN_MSG
      {if {&& {! {pause_video_settings_panel slider_selected}} {== $button kPad_Tri}}
         {$this set_sync}
         {if_else {$this lefty_changed}
            {do
               {if_else
                  {&&
                     {!= [old_lefty_0] {options get_lefty 0}}
                     {!= [old_lefty_1] {options get_lefty 1}}
                  }
                  {lefty_restart_screen set lefty_switch 2}
                  {if_else {!= [old_lefty_0] {options get_lefty 0}}
                     {lefty_restart_screen set lefty_switch 0}
                     {lefty_restart_screen set lefty_switch 1}
                  }
               }
               {ui goto_screen lefty_restart_screen}
            }
            {ui goto_screen pause_screen}
         }
      }
      kDataUnhandled
   )
}