#define WAIT_FOR_VO ({$task wait {tutorial is_vo_playing}})
#define LONG_VO_GAP ({$this sleep_seconds $task 0.6})
#define SHORT_VO_GAP ({$this sleep_seconds $task 0.5})
#define WAIT_FOR_SONG_LOAD (
   {$task wait {! {game loaded}}}
   {game start_song}
)
#define END_OF_SONG_PERCENT (97)
#define CORNER_WIDTH (16)
#define PIECE_WIDTH (16)
#define FILLER_WIDTH (16)
#define HEIGHT_SHIFT (25)
#define SONG_DELAY_SEC (3.2)
#define TUT1_1_BOX (270 147)
#define TUT1_1_TASK (264 86 FALSE)
#define TUT1_2_BOX (270 87)
#define TUT1_2_TASK (264 65 TRUE)
#define TUT1_3_BOX (270 87)
#define TUT1_3_TASK (264 87 TRUE)
#define TUT1_4_BOX (270 147)
#define TUT1_4_TASK (264 86 TRUE)
#define TUT1_5_BOX (270 87)
#define TUT1_5_TASK (264 66 TRUE)
#define TUT1_6_BOX (293 147)
#define TUT2_2_BOX (270 107)
#define TUT2_2_TASK (264 86 FALSE)
#define TUT2_3_BOX (270 127)
#define TUT2_3_TASK (264 127 FALSE)
#define TUT2_4_BOX (305 167)
#define TUT2_4_TASK (264 107 TRUE)
#define TUT2_5_BOX (330 187)
#define TUT3_1_BOX (330 107)
#define TUT3_1_TASK (264 86 TRUE)
#define TUT3_2_BOX (285 38)
#define TUT3_2_TASK (264 87 TRUE)
#define TUT3_3_BOX (285 38)
#define TUT3_3_TASK (264 87 TRUE)
{new TutorialPanel
   tutorial
   (file "")
   (start_tutorial {$this set_state {tutorials_panel get start_state}})
   (enter
      #define TUTORIAL_STATES (
         (intro
            playing_notes
            diff_notes
            held_notes
            chords
            interface
            wrapup
            star_intro
            star_combos
            whammy
            wail
            freestyle
            sustain
            pulloff
         )
      )
   )
   (exit {taskmgr clear_tasks})
   (set_state
      ($state)
      {$this set state $state}
      {switch $state
         (intro
            {thread_task
               (units kTaskUISeconds)
               (script
                  #include tutorial_11_tuning.dta
               )
            }
         )
         (playing_notes
            {thread_task
               (units kTaskUISeconds)
               (script
                  #include tutorial_12_playing_notes.dta
               )
            }
         )
         (diff_notes
            {thread_task
               (units kTaskUISeconds)
               (script
                  #include tutorial_13_diff_notes.dta
               )
               (autodelete FALSE)
            }
         )
         (held_notes
            {thread_task
               (units kTaskUISeconds)
               (script
                  #include tutorial_14_held_notes.dta
               )
               (autodelete FALSE)
            }
         )
         (chords
            {thread_task
               (units kTaskUISeconds)
               (script
                  #include tutorial_15_chords.dta
               )
               (autodelete FALSE)
            }
         )
         (interface
            {thread_task
               (units kTaskUISeconds)
               (script
                  #include tutorial_16_interface.dta
               )
            }
         )
         (wrapup
            {thread_task
               (units kTaskUISeconds)
               (script
                  #include tutorial_19_wrapup.dta
               )
            }
         )
         (star_intro
            {thread_task
               (units kTaskUISeconds)
               (script
                  #include tutorial_21_star_intro.dta
               )
            }
         )
         (star_combos
            {thread_task
               (units kTaskUISeconds)
               (script
                  #include tutorial_22_star_combos.dta
               )
            }
         )
         (whammy
            {thread_task
               (units kTaskUISeconds)
               (script
                  #include tutorial_23_whammy.dta
               )
               (autodelete FALSE)
            }
         )
         (wail
            {thread_task
               (units kTaskUISeconds)
               (script
                  #include tutorial_24_wail.dta
               )
               (autodelete FALSE)
            }
         )
         (freestyle
            {thread_task
               (units kTaskUISeconds)
               (script
                  #include tutorial_31_freestyle.dta
               )
            }
         )
         (sustain
            {thread_task
               (units kTaskUISeconds)
               (script
                  #include tutorial_32_sustain.dta
               )
            }
         )
         (pulloff
            {thread_task
               (units kTaskUISeconds)
               (script
                  #include tutorial_33_pulloff.dta
               )
               (autodelete FALSE)
            }
         )
      }
   )
   (get_next_state
      ($inc)
      {do
         ($old)
         ($new)
         {find_elem TUTORIAL_STATES {$this get state} $old}
         {set $new {mod {'+' $old $inc} {size TUTORIAL_STATES}}}
         {elem TUTORIAL_STATES $new}
      }
   )
   (switch_to_state
      ($state)
      {$this set_state $state}
      {$task exit}
   )
   (tutorial_inc
      ($num)
      {do
         ($next {$this get_next_state $num})
         {taskmgr clear_tasks}
         {$this reset_vo}
         {$this set_state $next}
      }
   )
   (update_tut_score
      ($label $score $total)
      {tut_score.lbl set_localized_text
         {sprintf {localize tut_notes_fmt} $label $score $total}
      }
   )
   (size_left_box
      ($width $height)
      {tut_box_ul.mesh set_local_pos
         {- {/ CORNER_WIDTH 2} {/ $width 2}}
         0
         {- {/ $height 2} {/ CORNER_WIDTH 2}}
      }
      {tut_box_ur.mesh set_local_pos
         {- {/ $width 2} {/ CORNER_WIDTH 2}}
         0
         {- {/ $height 2} {/ CORNER_WIDTH 2}}
      }
      {tut_box_rp.mesh set_local_pos {- {/ $width 2} {/ CORNER_WIDTH 2}} 0 0}
      {tut_box_rp.mesh set_local_scale
         1
         1
         {/ {- $height {'*' 2 CORNER_WIDTH}} PIECE_WIDTH}
      }
      {tut_box_bl.mesh set_local_pos
         {- {/ CORNER_WIDTH 2} {/ $width 2}}
         0
         {- {/ CORNER_WIDTH 2} {/ $height 2}}
      }
      {tut_box_lp.mesh set_local_pos {- {/ CORNER_WIDTH 2} {/ $width 2}} 0 0}
      {tut_box_lp.mesh set_local_scale
         1
         1
         {/ {- $height {'*' 2 CORNER_WIDTH}} PIECE_WIDTH}
      }
      {tut_box_br.mesh set_local_pos
         {- {/ $width 2} {/ CORNER_WIDTH 2}}
         0
         {- {/ CORNER_WIDTH 2} {/ $height 2}}
      }
      {tut_box_mp.mesh set_local_scale
         {/ {- $width {'*' 2 CORNER_WIDTH}} FILLER_WIDTH}
         1
         {/ $height FILLER_WIDTH}
      }
      {tut_box_left.view set_local_pos
         {- {/ $width 2} 308}
         0
         {- 227 {/ $height 2}}
      }
   )
   (size_right_box
      ($width $height $score)
      {if_else $score
         {set $height_shift HEIGHT_SHIFT}
         {set $height_shift 0}
      }
      {tut_box_ul1.mesh set_local_pos
         {- {/ CORNER_WIDTH 2} {/ $width 2}}
         0
         {- {/ {'+' $height $height_shift} 2} {/ CORNER_WIDTH 2}}
      }
      {tut_box_ur1.mesh set_local_pos
         {- {/ $width 2} {/ CORNER_WIDTH 2}}
         0
         {- {/ {'+' $height $height_shift} 2} {/ CORNER_WIDTH 2}}
      }
      {tut_box_rp1.mesh set_local_pos {- {/ $width 2} {/ CORNER_WIDTH 2}} 0 0}
      {tut_box_rp1.mesh set_local_scale
         1
         1
         {/ {- {'+' $height $height_shift} {'*' 2 CORNER_WIDTH}} PIECE_WIDTH}
      }
      {tut_box_bl1.mesh set_local_pos
         {- {/ CORNER_WIDTH 2} {/ $width 2}}
         0
         {- {/ CORNER_WIDTH 2} {/ {'+' $height $height_shift} 2}}
      }
      {tut_box_lp1.mesh set_local_pos {- {/ CORNER_WIDTH 2} {/ $width 2}} 0 0}
      {tut_box_lp1.mesh set_local_scale
         1
         1
         {/ {- {'+' $height $height_shift} {'*' 2 CORNER_WIDTH}} PIECE_WIDTH}
      }
      {tut_box_br1.mesh set_local_pos
         {- {/ $width 2} {/ CORNER_WIDTH 2}}
         0
         {- {/ CORNER_WIDTH 2} {/ {'+' $height $height_shift} 2}}
      }
      {tut_box_mp1.mesh set_local_scale
         {/ {- $width {'*' 2 CORNER_WIDTH}} FILLER_WIDTH}
         1
         {/ {'+' $height $height_shift} FILLER_WIDTH}
      }
      {tut_box_right.view set_local_pos
         {- 307 {/ $width 2}}
         0
         {- 226 {/ {'+' $height $height_shift} 2}}
      }
      {tut_score.lbl set_local_pos {- 307 {/ $width 2}} 0 {- 220 $height}}
   )
   (sleep_seconds
      ($taskmgr $duration_in_secs)
      {$taskmgr sleep $duration_in_secs}
   )
   (set_beatmatch_muting
      ($mute)
      {beatmatch set_volume
         {if_else $mute
            kDbSilence
            0
         }
      }
   )
   (state intro)
}
{new UIPanel
   tutorials_panel
   (file "tutorials.milo")
   (enter
      {gamecfg set mode tutorial}
      {$this set_focus tut_1.btn}
      {do
         ($done {campaign tutorials_done})
         {tut_2.btn set_state
            {if_else {>= $done 1}
               kNormal
               kDisabled
            }
         }
         {tut_3.btn set_state
            {if_else {>= $done 2}
               kNormal
               kDisabled
            }
         }
      }
   )
   (FOCUS_MSG
      {switch $new_focus
         (tut_1.btn {tut_blurb.lbl set_text TUT_1_BLURB})
         (tut_2.btn {tut_blurb.lbl set_text TUT_2_BLURB})
         (tut_3.btn {tut_blurb.lbl set_text TUT_3_BLURB})
      }
   )
   (SELECT_MSG
      {switch $component
         (tut_1.btn
            {$this set start_state intro}
            {$this set tut_song tutorial102}
            {campaign do_tutorial 1}
         )
         (tut_2.btn
            {$this set start_state star_intro}
            {$this set tut_song tutorial202}
            {campaign do_tutorial 2}
         )
         (tut_3.btn
            {$this set start_state freestyle}
            {$this set tut_song tutorial205}
            {campaign do_tutorial 3}
         )
      }
      {ui goto_screen tut_loading_screen}
      kDataUnhandled
   )
   (start_state intro)
   (tut_song tutorial102)
}
{new GHScreen
   tutorials_screen
   (panels tutorials_panel meta helpbar)
   (focus tutorials_panel)
   (helpbar
      (default
         (
            (fret1 help_continue)
            (fret2 help_back)
            (strum help_updown)
         )
      )
   )
   (SELECT_MSG {game set_tutorial_running TRUE} kDataUnhandled)
}
{new GHScreen
   tut_loading_screen
   (panels loading_panel)
   (allow_back FALSE)
   (animate_transition FALSE)
   (enter
      {$this reset_ambient}
      {{game get_bank_loader} reset}
      {game set_song {tutorials_panel get tut_song}}
      {{game get_player_config 0} set_difficulty kDifficultyEasy}
      {{game get_player_config 0} set_track_type guitar}
      {ui goto_screen tut_script_screen}
   )
}
{new UIPanel
   tut_script
   (file
      {if_else {options get_lefty 0}
         tut_script_lefty.milo
         tut_script.milo
      }
   )
   (enter
      {game set_start_paused TRUE}
      {game set_time_paused TRUE}
      {tutorial start_tutorial}
   )
   (exit {game set_start_paused FALSE})
}
#define TUTORIAL_PANELS (tutorial hud game track_panel mtv_overlay_panel)
{new GHScreen
   tut_script_screen
   (panels TUTORIAL_PANELS tut_script)
   (focus tut_script)
   (allow_back FALSE)
   (animate_transition FALSE)
   (enter {tutorial set_paused FALSE})
   (BUTTON_DOWN_MSG
      {if {&& {== $player_num 0} {== $button kPad_Start}}
         {tutorial set_paused TRUE}
         {ui goto_screen tut_pause_screen}
      }
   )
   (poll
      {if {&& {tutorial is_missing_guitar} {! {campaign tutorial_access}}}
         {tutorial set_paused TRUE}
         {ui goto_screen tut_pause_controller_screen}
      }
   )
}
{new GHPanel
   tut_pause_panel
   (file tut_pause.milo)
   (player_num 0)
   (enter {$this set_focus resume.btn})
}
#define TUT_PAUSE_SCREEN_HANDLERS (
   (clear_vram TRUE)
   (allow_back FALSE)
   (animate_transition FALSE)
   (enter
      {set [game_paused] {game time_paused}}
      {game set_time_paused TRUE}
      {tut_script set_paused TRUE}
      {synth pause_all_sfx TRUE}
      {hud set_paused TRUE}
   )
   (exit
      {tut_script set_paused FALSE}
      {hud set_paused FALSE}
   )
   (resume
      {synth pause_all_sfx FALSE}
      {game set_time_paused [game_paused]}
      {ui goto_screen tut_script_screen}
   )
   (game_paused FALSE)
)
{new GHScreen
   tut_pause_screen
   (panels TUTORIAL_PANELS tut_script tut_pause_panel)
   (focus tut_pause_panel)
   TUT_PAUSE_SCREEN_HANDLERS
   (SELECT_MSG
      {switch $component
         (resume.btn {$this resume})
         (restart.btn
            {stop_sfx bkgd_music}
            {ui goto_screen tut_loading_screen}
         )
         (quit.btn {ui goto_screen tutorial_quit_screen})
      }
   )
   (BUTTON_DOWN_MSG
      {if {&& {== $player_num 0} {== $button kPad_Start}}
         {$this resume}
      }
      kDataUnhandled
   )
}
{new GHPanel
   tut_pause_controller_panel
   (file tut_pause_controller.milo)
   (player_num 0)
   (focus pause_controller_resume.btn)
   (enter {pause_controller_msg.lbl set_text tut_guitar_loss_msg})
   (poll
      {if_else {tutorial is_missing_guitar}
         {$this disable pause_controller_resume.btn}
         {$this enable pause_controller_resume.btn}
      }
   )
}
{new GHScreen
   tut_pause_controller_screen
   (panels TUTORIAL_PANELS tut_script tut_pause_controller_panel)
   (focus tut_pause_controller_panel)
   TUT_PAUSE_SCREEN_HANDLERS
   (SELECT_MSG
      {switch $component
         (pause_controller_resume.btn {$this resume})
         (pause_controller_exit.btn {ui goto_screen tutorial_quit_screen})
      }
   )
}
{new GHScreen
   tutorial_quit_screen
   (panels game tutorial tut_script)
   (focus tut_script)
   (allow_back FALSE)
   (animate_transition FALSE)
   (enter
      {stop_sfx bkgd_music}
      {synth stop_all_sfx}
      {{tut_script find tut_script.view} set_showing FALSE}
      {meta_loading_goto main_screen}
   )
}