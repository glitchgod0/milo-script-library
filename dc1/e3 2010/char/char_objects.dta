#include ..\config\macros.dta
#include ..\config\process_clips_func.dta
#include ..\world\worldbase.dta
(CharBoneDir (resource_path "char/shared"))
(CharClip
   (init
      {if {$this dir}
         {$this set_type
            {do
               ($path {{$this dir} get_path_name})
               {cond
                  ({has_substr $path "crowd"} crowd)
                  ({has_substr $path "viseme"} viseme)
                  main
               }
            }
         }
         {switch {$this get_type}
            (crowd {set [beat_align] 0})
            (viseme
               {set [beat_align] 512}
               {set [relative] {{$this dir} find Base}}
               {set [default_loop] 32}
            )
         }
      }
   )
   (types
      (main
         (resource main_resource "kHamContextMain")
         (clip_flags
            (
               (
                  "kNoRetargetting"
                  "Don't do any retargetting, use when clip is exported with character specific skeleton, like for using props, don't use in song clips"
               )
               ("kAnimatePropBone" "Animate the prop bone, otherwise won't be animated")
               (
                  "kNoRestStep"
                  "For practice mode _out clips, means no rest_step animation will be played afterwards"
               )
            )
         )
         (transition_version 4)
         (on_transition
            {if {!= {$a_clip get beat_align} 512}
               {$this generate_transitions
                  (restrict
                     {&& {< $b_start 1} {< $a_end 5} {> $a_end 1} {== {floor $b_beat} $b_beat}}
                  )
               }
            }
         )
      )
      (viseme
         (resource viseme_resource "kHamContextViseme")
         (remove_zeros 1)
      )
      (crowd
         (resource crowd_resource "kHamContextCrowd")
         (clip_flags ())
         (transition_version 4)
         (on_transition
            {if {$a_clip shares_groups $b_clip}
               {$this generate_transitions
                  (beat_align 1)
                  (restrict {&& {< $b_start 1} {< $a_end 2}})
               }
            }
         )
      )
   )
)
(HamCharacter
   (skeleton_path "char/main")
   (types
      (main
         (enter
            {if {&& $edit_mode {! $hamdirector}}
               {$this find_interest_objects {$this dir}}
            }
         )
         (next_character
            {do
               ($list {file_list {sprint [outfit_dir] "/*.milo"}})
               ($index 0)
               {if {find_elem $list [outfit] $index}
                  {'++' $index}
                  {if {== $index {size $list}}
                     {set $index 0}
                  }
                  {set [outfit] {elem $list $index}}
                  {$this start_load 0}
               }
            }
         )
      )
   )
)
(Character
   (types
      (crowd
         (stance stand proxy_save)
         (editor
            (load_slow
               script
               (script {crowd_clips.fm load_tempo slow 0 0})
               (help "load slow clips")
            )
            (load_medium
               script
               (script {crowd_clips.fm load_tempo medium 0 0})
               (help "load medium clips")
            )
            (load_fast
               script
               (script {crowd_clips.fm load_tempo fast 0 0})
               (help "load fast clips")
            )
            (stance
               symbol
               (list (crouch sit stand perch))
               (help "What stance this character should be in")
            )
         )
         (enter {bone_pelvis.mesh set trans_parent $this})
      )
   )
)
(CharCollide
   (editor
      (flags
         bitfield
         (list (CHAR_HAIR_FLAGS))
         (help "Which collision volumes to hook up to this strand for collision")
      )
   )
)
(CharHair
   (editor
      (strands
         (array
            (struct
               (hookup_flags
                  bitfield
                  (list (CHAR_HAIR_FLAGS))
                  (help "Which collision volumes to hook up to this strand for collision")
               )
            )
         )
      )
   )
)
(FileMerger
   (types
      (world
         (change_files
            ($async $loading)
            {if {&& $loading $hamdirector}
               {$hamdirector set merger $this}
               {if {exists game_panel}
                  {$hamdirector load_game_song 0}
               }
            }
         )
         (on_pre_merge
            ($cat $from $to)
            {if $hamdirector
               {$hamdirector on_file_loaded $cat $from}
            }
         )
         (on_post_merge
            ($cat $to $final)
            {if {&& {! [loading_load]} {'||' $final [async_load]}}
               {{$this dir} sync_objects}
            }
         )
         (check_sync
            ($filename $cat)
            {if {&& {exists milo} {!= $filename ""} {! {has_substr $filename "none.milo"}}}
               {milo p4_checksync $filename}
               {if {== $cat songs}
                  {milo p4_checklocked $filename 1}
               }
            }
         )
      )
      (main
         (change_files
            ($async $loading)
            {{$this dir} configure_file_merger}
         )
         (on_pre_merge
            ($cat $from $to)
            {if {== $cat outfit}
               {$to copy_bounding_sphere $from}
               {$to set gender {outfit_gender {$to get outfit}}}
            }
         )
         (on_post_merge
            ($cat $to $final)
            {if {&& {! [loading_load]} {'||' $final [async_load]}}
               {{$this dir} sync_objects}
            }
         )
      )
      (crowd_anim
         (change_files
            ($async $loading)
            {if $loading
               {$this select male_tempo ""}
               {$this select female_tempo ""}
            }
         )
         (load_tempo
            ($tempo $async $coordinator)
            {with_file_root
               {file_root}
               {$this select
                  female_tempo
                  {sprint "char/crowd/anim/female_" $tempo ".milo"}
               }
               {$this select
                  male_tempo
                  {sprint "char/crowd/anim/male_" $tempo ".milo"}
               }
               {if_else $coordinator
                  {$coordinator add_outfit_loader $this}
                  {$this start_load $async}
               }
            }
         )
      )
   )
)
(CharLipSync
   (init {$this set_type facial_exp})
   (types
      (facial_exp
         (prop_anim "")
         (Angry 0.0)
         (Concentrate 0.0)
         (Excited 0.0)
         (Grin 0.0)
         (Mouth_Open 0.0)
         (O_Face 0.0)
         (Open_Smile 0.0)
         (Open_Smile_02 0.0)
         (Pursed 0.0)
         (Sexy 0.0)
         (Smile 0.0)
         (Smirk 0.0)
         (Squash_High 0.0)
         (Squash_Low 0.0)
         (viseme_list
            (Angry
               Concentrate
               Excited
               Grin
               Mouth_Open
               O_Face
               Open_Smile
               Open_Smile_02
               Pursed
               Sexy
               Smile
               Smirk
               Squash_High
               Squash_Low
            )
         )
         (editor
            (Angry float (range 0 1))
            (Concentrate float (range 0 1))
            (Excited float (range 0 1))
            (Grin float (range 0 1))
            (Mouth_Open float (range 0 1))
            (O_Face float (range 0 1))
            (Open_Smile float (range 0 1))
            (Open_Smile_02 float (range 0 1))
            (Pursed float (range 0 1))
            (Sexy float (range 0 1))
            (Smile float (range 0 1))
            (Smirk float (range 0 1))
            (Squash_High float (range 0 1))
            (Squash_Low float (range 0 1))
         )
      )
   )
)