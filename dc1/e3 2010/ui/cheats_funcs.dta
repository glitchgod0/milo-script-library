#define CHEAT_DISPLAY_S (5)
{new Object
   cheat_display
   (show
      ($msg)
      {if_else $cheat.no_cheat_display
         {print $msg "\n"}
         {do
            {rnd show_overlay cheats 1 CHEAT_DISPLAY_S}
            {rnd reflect cheats {print $msg "\n"}}
         }
      }
   )
   (show_bool
      ($label $val)
      {$this show
         {sprint
            $label
            ": "
            {if_else $val
               "ON"
               "OFF"
            }
         }
      }
   )
}
#define CHAR_OBJECTS (
   ({find_obj
         {$hamdirector get cur_world}
         player0
         song.hdrv}
      {find_obj {$hamdirector get cur_world} player0 main.drv}
      {find_obj {$hamdirector get cur_world} crowd_f_01 main.drv}
      {find_obj {$hamdirector get cur_world} crowd_f_03 main.drv}
      {find_obj {$hamdirector get cur_world} crowd_f_08 main.drv}
      {find_obj {$hamdirector get cur_world} crowd_f_13 main.drv}
      {find_obj {$hamdirector get cur_world} crowd_m_06 main.drv}
      {find_obj {$hamdirector get cur_world} crowd_m_12 main.drv}
   )
)
{func next_character_driver
   {do
      ($thing {object ''})
      ($start $cheat.debug_driver)
      {while {! $thing}
         {set $thing {eval {elem CHAR_OBJECTS $cheat.debug_driver}}}
         {if $thing
            {char_debug}
            {char_debug $thing}
            {cheat_display show
               {sprint "debugging " {{$thing dir} name} " " {$thing name}}
            }
         }
         {set $cheat.debug_driver
            {mod {'++' $cheat.debug_driver} {size CHAR_OBJECTS}}
         }
         {if {== $cheat.debug_driver $start}
            {set $thing 1}
         }
      }
   }
}
{func toggle_crowd_audio
   {if $world
      {$world iterate
         P9CrowdAudio
         $ca
         {do
            ($new {! {$ca get enabled}})
            {$ca set enabled $new}
            {cheat_display show_bool "CrowdAudio" $new}
         }
      }
   }
}
{func cycle_free_camera
   {if {&& $hamdirector $hamwardrobe}
      {do
         ($world {$hamdirector get_world})
         {unless {$world has_free_cam}
            {set $free_cam.state 0}
         }
         {if_else {< $free_cam.state 4}
            {do
               ($free {$world get_free_cam $cheat_pad})
               {switch $free_cam.state
                  (0
                     {$free set_frozen 0}
                     {$free set_parent {object ""}}
                     {cheat_display show "Free camera: world"}
                  )
                  (1
                     {$free set_frozen 1}
                     {$free set_parent {object ""}}
                     {cheat_display show "Free camera: frozen"}
                  )
                  {$free set_frozen 0}
                  {do
                     ($name player0)
                     {$free set_parent
                        {find_obj
                           {$hamwardrobe chars_dir}
                           $name
                           {switch $free_cam.state
                              (2 bone_L-hand.mesh)
                              bone_head.mesh
                           }
                        }
                     }
                     {if_else {find_elem (3) $free_cam.state}
                        {$free set_parent_dof 1 1 1}
                        {$free set_parent_dof 0 0 1}
                     }
                     {switch $free_cam.state
                        (2
                           {$free set_pos 80 0 10}
                           {$free set_rot 0 -90 90}
                        )
                        {$free set_pos 0 60 0}
                        {$free set_rot 0 -90 180}
                     }
                     {cheat_display show
                        {sprint
                           "Free camera: "
                           $name
                           {switch $free_cam.state
                              ((3 6 9 12) " pinned")
                              ((4 7 10 13) " hand")
                              " floating"
                           }
                        }
                     }
                  }
               }
               {'++' $free_cam.state}
            }
            {do
               {$world delete_free_cam}
               {cheat_display show "Free camera: off"}
            }
         }
      }
   }
}
{func toggle_crowd_meter

}
{func start_shuttle
   {if {exists game}
      {if_else {rnd overlay_showing time}
         {set $cheat.show_time 0}
         {do
            {rnd show_overlay time 1}
            {set $cheat.show_time 1}
         }
      }
      {game set_time_paused 1}
      {game set_shuttle 1 $cheat_pad}
   }
}
{func stop_shuttle
   {game set_shuttle 0}
   {game set_time_paused 0}
   {if $cheat.show_time
      {rnd show_overlay time 0}
   }
}
{func toggle_shuttle
   {if_else {game shuttle_active}
      {stop_shuttle}
      {start_shuttle}
   }
}
{set $mute_cheat 0}
{func toggle_mute_global
   {set $mute_cheat {! $mute_cheat}}
   {if_else $mute_cheat
      {do
         {synth set_master_vol -96.0}
         {cheat_display show "Mute all: TRUE"}
      }
      {do
         {synth set_master_vol 0}
         {cheat_display show "Mute all: FALSE"}
      }
   }
}
{set $mute_shell_music 0}
{func toggle_mute_shell_music
   {set $mute_shell_music {! $mute_shell_music}}
   {if_else $mute_shell_music
      {meta music_stop}
      {meta music_start}
   }
}
{func toggle_forced_autocal
   {if_else {== 1 $force_autocal}
      {set $force_autocal 0}
      {set $force_autocal 1}
   }
   {cheat_display show {sprint "forced calbert: " $force_autocal}}
}
{func toggle_time_paused
   {unless {&& {exists game_time_panel} {game_time_panel is_up}}
      {do
         ($new {! {game_panel paused}})
         {game_panel cheat_pause $new}
         {if_else {game_panel paused}
            {print "Game paused\n"}
            {print "Game unpaused\n"}
         }
      }
   }
}
{func change_speed
   ($factor)
   {if {&& {! {meta is_up}} {exists game}}
      {game set music_speed {'*' {game get music_speed} $factor}}
   }
}
{func cheat_next_loading_tip_mode
   {set $cheat.loading_tip_mode {'+' $cheat.loading_tip_mode 1}}
   {if {> $cheat.loading_tip_mode 5}
      {set $cheat.loading_tip_mode 0}
   }
   {switch $cheat.loading_tip_mode
      (0 {cheat_display show {sprint "Loading Tip (normal)"}})
      (1 {cheat_display show {sprint "Loading Tip (random text tip)"}})
      (2 {cheat_print_loading_tip_entry_index} {cheat_reset_loading_tip_entry})
      (3 {cheat_display show {sprint "Loading Tip (random generic audio)"}})
      (4 {cheat_print_loading_tip_entry_index} {cheat_reset_loading_tip_entry})
      (5 {cheat_print_loading_tip_entry_index} {cheat_reset_loading_tip_entry})
   }
}
{func cheat_get_loading_tip_count
   {switch $cheat.loading_tip_mode
      (2 {random_context_count {find $syscfg tips}})
      (4 {random_context_count {find $syscfg vo_loading_context}})
      (5 1000000)
      0
   }
}
{func cheat_print_loading_tip_entry_index
   {switch $cheat.loading_tip_mode
      (2
         {cheat_display show
            {sprintf
               "Loading Tip (sequential text tip) Entry: %i of %i"
               {'+' $cheat.loading_tip_index 1}
               {cheat_get_loading_tip_count}
            }
         }
      )
      (4
         {cheat_display show
            {sprintf
               "Loading Tip (sequential generic audio) Entry: %i of %i"
               {'+' $cheat.loading_tip_index 1}
               {cheat_get_loading_tip_count}
            }
         }
      )
      (5
         {cheat_display show
            {sprintf
               "Loading Tip (sequential song specific audio) Entry: %i of ???"
               {'+' $cheat.loading_tip_index 1}
            }
         }
      )
      {cheat_display show "Not in a sequential loading tip mode"}
   }
}
{func cheat_reset_loading_tip_entry
   {set $cheat.loading_tip_index 0}
}
{func cheat_next_loading_tip_entry
   {set $cheat.loading_tip_index {'+' $cheat.loading_tip_index 1}}
   {if {>= $cheat.loading_tip_index {cheat_get_loading_tip_count}}
      {set $cheat.loading_tip_index 0}
   }
   {cheat_print_loading_tip_entry_index}
}
#ifdef HX_XBOX
{func fake_signout
   ($pad_num)
   {cheat_display show {sprintf "Fake Signout on pad %d\n" {'+' 1 $pad_num}}}
   {print {sprintf "Fake Signout on pad %d\n" $pad_num}}
   {platform_mgr debug_fake_signin_change_msg $pad_num}
}
#endif
{func cheat_toggle_difficulty
   {do
      ($new_diff -1)
      {if {== $new_diff -1}
         {set $new_diff {'+' {meta_performer get_difficulty} 1}}
         {set $new_diff {mod $new_diff {size (DIFF_SYMBOLS)}}}
         {cheat_display show
            {sprint "New Difficulty Set: " {elem (DIFF_SYMBOLS) $new_diff}}
         }
      }
      {meta_performer set_difficulty $new_diff}
   }
}
{func display_postprocs
   {if $p9director
      {$p9director cur_postprocs $a $b $blend}
      {if_else {== $a $b}
         {cheat_display show {sprint "Current post-proc: " $a}}
         {do
            ($pct {int {'*' $blend 100}})
            {cheat_display show
               {sprint "Current post-proc: " $a " (" $pct "%) " $b " (" {- 100 $pct} "%)"}
            }
         }
      }
   }
}
{func toggle_haq_printouts
   {if haq_mgr
      {haq_mgr toggle_enabled}
      {if_else {haq_mgr is_enabled}
         {cheat_display show "HAQ Printouts Enabled"}
         {cheat_display show "HAQ Printouts Disabled"}
      }
   }
}
{func haq_display_all
   {if haq_mgr
      {haq_mgr display_all}
   }
}
{func fake_win
   ($num_stars)
   {if_else {&& {exists game} {game_panel is_up}}
      {do
         {game_panel set num_stars $num_stars}
         {game_panel set score 666}
         {{game main_performer} win 1}
      }
      {do
         {if {== {ui current_screen} song_select_screen}
            {do
               ($song {song_select_panel get focus_song})
               {if $song
                  {setup_game $song boardwalk ((2))}
                  {meta_performer trigger_song_completion 666 $num_stars}
                  {meta_performer reset_songs}
                  {song_select_panel update_song_list}
               }
            }
         }
         {if {== {ui current_screen} seldiff_screen}
            {do
               ($song {meta_performer song})
               ($diff
                  {switch {{seldiff_panel loaded_dir} get focus_component}
                     (easy.btn 0)
                     (medium.btn 1)
                     (expert.btn 2)
                     2
                  }
               )
               {if $song
                  {meta_performer set_difficulty $diff}
                  {meta_performer trigger_song_completion 666 $num_stars}
                  {meta_performer reset_songs}
                  {meta_performer set_song $song}
                  {seldiff_panel set_up}
               }
            }
         }
         {if {== {ui current_screen} seldiff_practice_screen}
            {do
               ($song {meta_performer song})
               ($diff
                  {switch {{seldiff_practice_panel loaded_dir} get focus_component}
                     (easy.btn 0)
                     (medium.btn 1)
                     (expert.btn 2)
                     2
                  }
               )
               {if $song
                  {meta_performer set_difficulty $diff}
                  {meta_performer trigger_song_completion {'+' 50 {'*' 10 $num_stars}} 0}
                  {meta_performer reset_songs}
                  {meta_performer set_song $song}
                  {seldiff_practice_panel set_up}
               }
            }
         }
      }
   }
}