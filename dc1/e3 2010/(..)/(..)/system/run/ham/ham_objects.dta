#include ham_macros.dta
(CharFeedback
   (description "Drawable for on-character filter feedback/visualization")
   (superclasses Draw)
   (allowed_dirs RndDir)
   (ext cf)
   (editor
      (target
         object
         (class Character)
         (help "Character for displaying filter feedback")
         (no_test)
      )
      (fail_mat
         object
         (class Mat)
         (help "Mat to show on the character")
      )
      (fail_trigger_seconds
         float
         (help "Min time a node must be failing to flash")
      )
      (pass_trigger_seconds
         float
         (help "Min time a node must be passing to stop flashing")
      )
      (test_node
         int
         (list
            (
               "kNodeLeftArm"
               "kNodeRightArm"
               "kNodeLeftLeg"
               "kNodeRightLeg"
               "kNodeHipVelocity"
            )
         )
         (help "Test node for debugging")
      )
      (trigger_fail
         script
         (script {$this trigger_fail 1})
         (help "Put test node into failure state")
      )
      (trigger_success
         script
         (script {$this trigger_fail 0})
         (help "Put test node into success state")
      )
   )
   (types)
)
(HamLabel
   (description "Label with Hammer-specific features")
   (allowed_dirs RndDir)
   (superclasses UILabel)
   (ext lbl)
   (editor)
   (init {set [resource_name] "default"})
   (types)
   (resources_path "../ui/resource/fonts/")
)
(HamButton
   (description "Button with app-specific features")
   (allowed_dirs)
   (superclasses UIButton)
   (init {set [resource_name] "default"})
   (types)
   (focus_anim_duration 0.1)
   (ext btn)
   (editor
      (is_toggle_button
         bool
         (help "True if this button is a toggle that doesn't advance a screen")
      )
   )
   (resources_path "../ui/resource/fonts/")
)
(HamList
   (description "Band specific UIList")
   (allowed_dirs)
   (superclasses UIList)
   (init {$this set_type default})
   (ext lst)
   (editor
      (focus_anim object (class TransAnim))
      (pulse_anim object (class TransAnim))
   )
   (types (default (resource_file "../ui/list.milo")))
)
(HamCamShot
   (description "Hammer specific camera shot")
   (superclasses CamShot)
   (allowed_dirs WorldDir)
   (ext shot)
   (editor
      (targets
         (array
            (struct
               (target
                  symbol
                  (list {$this list_targets})
                  (refresh targets)
                  (help "Symbolic name of target")
               )
               (target_ptr
                  object
                  (class Trans)
                  (read_only 1)
                  (help "pointer to target")
               )
               (anim_group
                  symbol
                  (list
                     {do
                        ($drv {find_obj [targets {elem $milo_prop_path 1} target_ptr] main.drv})
                        {object_list
                           {if_else $drv
                              {$drv get clips}
                              ''
                           }
                           CharClipGroup
                        }
                     }
                  )
                  (help "Name of CharClipGroup to play on character")
               )
               (teleport bool (help "do we teleport this character?"))
               (to TRANSFORM (help "the transform to teleport the character to"))
               (return bool (help "return to original position after shot?"))
               (force_lod
                  int
                  (list ("kLODPerFrame" "kLOD0" "kLOD1" "kLOD2"))
                  (help
                     "Forces LOD, kLODPerFrame is normal behavior of picking per frame, the others force the lod (0 is highest res lod, 2 is lowest res lod)"
                  )
               )
               (self_shadow bool (help "should character cast a self shadow"))
               (spot_cutout bool (help "should character create spotlight cutouts"))
               (floor_shadow bool (help "should character cast a shadow on floor"))
               (fast_forward
                  float
                  (help "Fast forward chosen animation by this time, in camera units")
               )
               (forward_event
                  symbol
                  (help "Event to fastforward relative to")
                  (list ('' freeze))
               )
               (env_override
                  object
                  (class Environ)
                  (help "environment override for this target during this shot")
               )
            )
         )
      )
      (zero_time float (help "synchronization time for this camshot"))
      (min_time
         int
         (help
            "30fps reg: minimum time this shot can last, DCuts: time past zero time in which the shot can be interupted"
         )
      )
      (max_time int (help "30fps maximum duration for this shot, 0 is infinite"))
      (next_shots
         (array object (list {$this allowable_next_shots}))
         (help "Next camshots, in order")
      )
      (store
         script
         (script {$this store})
         (help "store the current target character teleport locations")
      )
      (view script (script {$this view}))
   )
   (types)
   (views
      (flags
         ("Category" [category])
         ("Platform Only" [platform_only])
         ("DoF" [use_depth_of_field])
         ("Target 0" [keyframes 0 targets 0])
         ("Target 1" [keyframes 1 targets 0])
         ("Total Duration" {$this duration_seconds})
         ("Blur Depth" [keyframes 0 blur_depth])
         ("Max Blur" [keyframes 0 max_blur])
         ("Focus Blur Mult" [keyframes 0 focus_blur_multiplier])
         ("Shake Freq" [keyframes 0 shake_noisefreq])
         ("Shake Amp" [keyframes 0 shake_noiseamp])
         ("Shake Max x" [keyframes 0 shake_maxangle x])
         ("Shake Max y" [keyframes 0 shake_maxangle y])
         ("PS3 Per Pixel" [ps3_per_pixel])
      )
      (Shadows
         ("Category" [category])
         ("Bass Shadow" [targets 0 self_shadow])
         ("Bass Cutout" [targets 0 spot_cutout])
         ("Bass Floorspot" [targets 0 floor_shadow])
         ("Drum Shadow" [targets 1 self_shadow])
         ("Drum Cutout" [targets 1 spot_cutout])
         ("Drum Floorspot" [targets 1 floor_shadow])
         ("Guitar Shadow" [targets 2 self_shadow])
         ("Guitar Cutout" [targets 2 spot_cutout])
         ("Guitar Floorspot" [targets 2 floor_shadow])
         ("Vocal Shadow" [targets 3 self_shadow])
         ("Vocal Cutout" [targets 3 spot_cutout])
         ("Vocal Floorspot" [targets 3 floor_shadow])
      )
   )
)
(HamCharacter
   (description
      "Hammer main character class, can be configured to look like characters in /dancer"
   )
   (superclasses Character)
   (editor
      (outfit
         symbol
         (list {file_list {sprint [outfit_dir] "/*.milo"}})
         (help "which character to look like")
      )
      (start_load
         script
         (script {$this start_load 0})
         (help "load up the outfit")
      )
      (outfit_dir symbol (help "where to load outfits from"))
      (gender
         int
         (list kHamGenderList)
         (help "Gender of this character")
         (no_test)
      )
      (song_gender
         int
         (list kHamGenderList)
         (help "Authored song gender for current song")
         (no_test)
      )
      (show_box
         bool
         (help "Draws a 6 foot square box around the character teleport point")
      )
      (reset_waypoint
         script
         (help "moves the character waypoint to its current position")
         (script {$this cam_teleport})
      )
      (analyze_footik
         script
         (help "analyze our clips, temporary for testing")
         (script {$this analyze_footik})
      )
      (toggle_interests_overlay
         script
         (script {$this toggle_interests_overlay})
         (help "Toggles display of debug overlay for interest objects")
      )
      (find_new_interests
         script
         (script {$this find_interest_objects {$this dir}})
         (help
            "If you add an interest, hit this to let the character know about it"
         )
      )
   )
   (types)
)
(HamWardrobe
   (description
      "Manager class that clothes characters and loads animations under different conditions"
   )
   (test_singleton)
   (editor)
   (types)
)
(HamDirector
   (description
      "Hammer Director, sits in each song file and manages camera + scene changes"
   )
   (superclasses Poll Draw)
   (init)
   (editor
      (venue
         symbol
         (help "loaded venue, set by world or song")
         (read_only 1)
         (no_test)
      )
      (debug_char_interests
         script
         (script {$this debug_char_interests})
         (help
            "Cycles through each character, enabling debug rendering of its interest objects"
         )
      )
      (toggle_interests_overlay
         script
         (script {$this toggle_interests_overlay})
         (help "Toggles display of debug overlay for interest objects")
      )
      (difficulty
         int
         (list DIFF_LIST)
         (help "Difficulty to determine which animation to use")
      )
      (practice_start
         symbol
         (list {$this practice_list})
         (help "start frame of practice mode")
      )
      (practice_end
         symbol
         (list {$this practice_list})
         (help "end frame of practice mode")
      )
      (start_loop_margin
         int
         (help "In practice mode, measures before practice_start until loop")
         (range 1 100)
      )
      (end_loop_margin
         int
         (help "In practice mode, measures after practice_end until loop")
         (range 1 100)
      )
      (blend_debug
         int
         (help
            "If > 0, is which clip to show by itself rather than doing full blending"
         )
      )
      (no_transitions bool (help "If true, does not play transitions"))
      (song_properties
         (indent
            (shot
               symbol
               (list (AUTHORED_CAM_CATS))
               (help "HamCamShot category")
               (no_test)
            )
            (cur_shot
               object
               (class CamShot)
               (help "currently shown camshot, nice for debugging.")
               (read_only 1)
               (no_test)
            )
            (excitement
               int
               (help "excitement level")
               (read_only 1)
               (no_test)
            )
            (num_players_failed
               int
               (help "how many have failed")
               (read_only 1)
               (no_test)
            )
            (postproc
               object
               (class PostProc)
               (interp_handlers postproc_interp)
               (dir {milo cur_dir})
               (help "the current venue postproc.")
               (no_test)
            )
            (cam_postproc
               object
               (class PostProc)
               (help "camera postproc override.  If set, does no postproc blends")
               (read_only 1)
               (no_test)
            )
            (world_event
               symbol
               (list (none HAM_WORLD_EVENTS))
               (help "author chorus or verse-specific events, as well as bonusfx")
               (no_test)
            )
            (clip
               symbol
               (propanim_annotate clip_annotate)
               (propanim_safetoadd clip_safetoadd)
               (list {$this clip_list})
               (help "the current clip to play.")
               (no_test)
            )
            (practice
               symbol
               (propanim_annotate practice_annotate)
               (propanim_safetoadd practice_safetoadd)
               (help "practice mode sections")
               (no_test)
            )
            (spot_instructor
               symbol
               (list (on off))
               (help "author character-specific spotlights")
               (no_test)
            )
            (move
               symbol
               (list {object_list {find_obj {milo cur_dir} moves} HamMove 0})
               (help "current active move")
               (interp_handlers move_interp)
               (propanim_safetoadd update_move_keys)
               (no_test)
            )
         )
         (help
            "These are the properties animated by the song, displayed here for debugging"
         )
      )
   )
   (types)
)
(HamDriver
   (description "Class to play back clips, has a tree view of layers")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext hdrv)
   (editor
      (bones
         object
         (class CharBonesObject)
         (help "The CharBones object to add into.")
      )
   )
   (types)
)
(HamRegulate
   (description
      "Class to do regulation on a HamCharacter.  Has two modes of operation"
   )
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext hreg)
   (editor
      (left_foot
         object
         (class CharIKFoot)
         (help
            "left foot ik object, used for clamping regulation when one or more feet are planted"
         )
      )
      (right_foot
         object
         (class CharIKFoot)
         (help
            "right foot ik object, used for clamping regulation when one or more feet are planted"
         )
      )
   )
   (types)
)
(HamIKEffector
   (description "Does IK on end effectors and props")
   (allowed_dirs ObjectDir)
   (superclasses CharPollable CharWeightable)
   (ext ikf)
   (editor
      (effector
         object
         (class Trans)
         (help
            "The character end effector or prop to be constrained.  When hilit, the big red circles are the "
            'natural"'
            'positions,'
            the
            blue
            circles
            are
            the
            desired
            'destination,'
            and
            the
            green
            circle
            is
            where
            it
            was
            'IK\qd'
            to.
            Each
            "target"
            shows
            up
            as
            an
            axis
            display
            with
            the
            current
            weight
            shown
            next
            to
            'it."'
         )
      )
      (finger
         object
         (class Trans)
         (help
            "The actual trans to IK to constraints. Effector is still the thing that gets moved, if NULL, same as effector"
         )
      )
      (constraints
         (array
            (struct
               (target
                  object
                  (class Trans)
                  (help
                     "The thing the [effector] will keep relative xfm to, or absolute xfm if weight <= 0."
                  )
               )
               (weight
                  float
                  (help
                     "Relative weight for this constraint, is same as radius in feet of full effect.  If zero or negative [effector] will be constrained directly to the [target]"
                  )
               )
            )
         )
      )
      (ground
         object
         (class Trans)
         (help "for pelvis/feet specifies a ground plane height")
      )
      (elbow
         object
         (class HamIKEffector)
         (help "If hand, pointer to elbow object")
      )
      (more
         object
         (class HamIKEffector)
         (help "More constraints to evaluate")
      )
      (other
         object
         (class CharPollable)
         (help
            "Can call others to do ik on the same bone before doing shoulder fixup"
         )
      )
   )
   (types)
)
(SkeletonDir
   (description "Dir with skeleton tracking/debugging functionality")
   (superclasses PanelDir)
   (editor
      (test_clip
         object
         (class SkeletonClip)
         (help "Test clip for in-milo visualization")
      )
      (live_camera
         script
         (script {$this live_camera})
         (help "Return to using live camera input")
         (refresh test_clip)
      )
      (tilt_correction
         bool
         (help "Normalize joint data by camera's gravity vector?")
      )
      (use_smoothing bool (help "Apply joint smoothing?"))
      (smoothing_params
         (indent
            (smoothing
               float
               (range 0 1)
               (help
                  "0.0 means raw data is returned. Increasing leads to more highly smoothed position values. As it's increased, responsiveness to raw data decreases. Increased smoothing leads to increased latency in the returned values. Must be within [0.0 .. 1.0]"
               )
            )
            (correction
               float
               (range 0 1)
               (help
                  "Correction parameter. Lower values are slower to correct towards the raw data, and appear smoother, while higher values will correct toward the raw data more quickly. Values must be in the range [0.0 .. 1.0]."
               )
            )
            (prediction
               float
               (help
                  "The number of frames to predict into the future. Values must be greater than or equal to zero. Values greater than 0.5 will likely lead to overshooting when moving quickly. This effect can be damped by using small values of fMaxDeviationRadius."
               )
            )
            (jitter_radius
               float
               (help
                  "The radius in meters for jitter reduction. Any jitter beyond this radius is clamped to the radius"
               )
            )
            (max_deviation_radius
               float
               (help
                  "The maximum radius in meters that filtered positions are allowed to deviate from raw data. Filtered values that would be more than this radius from the raw data are clamped at this distance, in the direction of the filtered value."
               )
            )
         )
      )
      (draw_raw_skeleton bool (help "Draw the raw (unsmoothed) skeleton too?"))
      (tilt_camera
         string
         (read_only 1)
         (help "Use RT + right analog stick to adjust camera tilt")
      )
      (print_skeleton
         script
         (script {$this print_skeleton})
         (help "Output skeleton/joint information")
      )
   )
   (types)
)
#define DETECT_WEIGHT_TYPE (int (list ("kDetectNone" "kDetectNormal" "kDetectLoose")))
(MoveDir
   (description "Dir for HamMoves, contains debugging functionality")
   (superclasses SkeletonDir)
   (editor
      (filters_enabled
         bool
         (help "Allow filter editing?")
         (refresh left_arm right_arm left_leg right_leg)
         (no_test)
      )
      (filtering
         (indent
            (edit_current_move
               script
               (script
                  {if_else [current_move]
                     {milo edit [current_move] HamMove}
                     {notify "Current HamMove is not set"}
                  }
               )
               (help "Pop up the editor for the current HamMove")
            )
            (left_arm DETECT_WEIGHT_TYPE (help "Left arm node weight"))
            (right_arm DETECT_WEIGHT_TYPE (help "Right arm node weight"))
            (left_leg DETECT_WEIGHT_TYPE (help "Left leg node weight"))
            (right_leg DETECT_WEIGHT_TYPE (help "Right leg node weight"))
            (hip_vel DETECT_WEIGHT_TYPE (help "Hip velocity weight"))
            (update_closest
               script
               (script {$this update_closest})
               (help "Update weights of the closest filter frame")
            )
            (remove_closest
               script
               (script {$this remove_closest})
               (help "Delete the closest filter frame")
            )
            (add_new_frame
               script
               (script {$this add_new_frame})
               (help "Create a new filter frame at current beat")
            )
         )
      )
      (move_overlay bool (help "Show debugging overlay for the current HamMove"))
      (debug_visualization bool (help "Show additional filter debug visuals?"))
      (debug_error_node
         int
         (list
            (
               "kNodeLeftArm"
               "kNodeRightArm"
               "kNodeLeftLeg"
               "kNodeRightLeg"
               "kNodeHipVelocity"
               "kNumErrorNodes"
            )
         )
         (help "Specific error node to display debug viz for")
      )
      (reset_detection
         script
         (script {$this reset_detection})
         (help "Reset all detection frames")
      )
      (reload_scoring
         script
         (script {$this reload_scoring})
         (help "Reload scoring/detection config")
      )
      (process_moves
         script
         (script
            {if $hamdirector
               {$hamdirector process_moves $this}
            }
         )
         (help "Process mocap moves for current mode/difficulty")
      )
      (save_moves
         script
         (script
            {do
               ($objs {array 0})
               {$this iterate DancerSequence $seq {push_back $objs $seq}}
               {$this iterate HamMove $move {push_back $objs $move}}
               {$this iterate PracticeSection $sec {push_back $objs $sec}}
               {milo merge_back_objects $objs}
            }
         )
         (help "Merge back all the HamMoves and DancerSequences")
      )
      (playback
         (indent
            (play_clip
               object
               (class SkeletonClip)
               (help "Clip to play back in sync with the song")
               (read_only {! {$this is_proxy}})
               (dir $this)
            )
            (simulate_playback
               script
               (script {$this simulate_playback})
               (help "Do non-realtime playback using play_clip")
            )
         )
      )
      (recording
         (indent
            (record_clip
               object
               (class SkeletonClip)
               (help "Clip to use for song recording")
               (read_only {! {$this is_proxy}})
               (dir $this)
            )
            (start_song_record
               script
               (script {$this start_song_record})
               (help "start recording moves")
               (refresh play_clip)
            )
            (stop_song_record
               script
               (script {$this stop_song_record})
               (help "stop recording moves")
            )
         )
      )
   )
   (types)
)
(DancerSequence
   (description
      "Linear sequence of DancerFrame structs, animatable for preview in milo"
   )
   (allowed_dirs MoveDir)
   (superclasses Anim)
   (ext seq)
   (types)
)
(HamMove
   (description "Data associated with a ham Move")
   (superclasses PropAnim)
   (allowed_dirs MoveDir)
   (ext move)
   (editor
      (test_clip
         object
         (class SkeletonClip)
         (help "The skeleton clip to animate with the move.")
      )
      (success_clip
         object
         (class SkeletonClip)
         (help "A skeleton clip that should always pass the move.")
      )
      (fail_clip
         object
         (class SkeletonClip)
         (help "A skeleton clip that should always fail a move.")
      )
      (mirror
         object
         (class HamMove)
         (help "Move to mirror")
         (refresh tex tex_state)
         (post_sync
            {if {&& {! [tex]} [mirror]}
               {set [tex] {[mirror] get tex}}
               {if [tex]
                  {set [tex_state] 2}
               }
            }
         )
      )
      (tex
         object
         (class Tex)
         (help "Texture to describe the move")
      )
      (tex_state
         int
         (list TEX_STATE_LIST)
         (help "Texture state describes how to display the tex")
      )
      (scored
         bool
         (help
            "True if this is move is scored. False if it's a rest or some kind of indicator (like freestyly)"
         )
      )
      (verb
         symbol
         (help "Verb for use in skills mode to associate with vo.")
         (propanim_safetoadd refresh_barks)
      )
      (derive_name
         script
         (script
            {do
               ($eng_name {$this name})
               {search_replace $eng_name _ ' ' $eng_name}
               {search_replace $eng_name .move '' $eng_name}
               {set [name_eng] $eng_name}
               {milo update_open_editor $this}
            }
         )
         (help "Derive the name of the move from the name of the object")
      )
      (name_eng string (help "English name"))
      (name_fre
         string
         (read_only 1)
         (help "French name")
      )
      (name_ita
         string
         (read_only 1)
         (help "Italian name")
      )
      (name_deu
         string
         (read_only 1)
         (help "German name")
      )
      (name_esl
         string
         (read_only 1)
         (help "Spanish name")
      )
   )
   (types)
   (init
      {do
         ($eng_name {$this name})
         {search_replace $eng_name _ ' ' $eng_name}
         {search_replace $eng_name .move '' $eng_name}
         {set [name_eng] $eng_name}
      }
   )
)
(SkeletonClip
   (description "An animated clip of a skeleton playable in milo")
   (superclasses Anim)
   (allowed_dirs SkeletonDir)
   (editor
      (live_camera
         script
         (script {{$this dir} live_camera})
         (help "Return to using live camera input")
      )
      (make_active
         script
         (script {{$this dir} set test_clip $this})
         (help "Start using this clip as camera input")
      )
      (file
         string
         (help "associated data file")
         (no_test)
         (read_only 1)
      )
      (autoplay
         bool
         (help
            "Automatically animate skeleton data regardless of the current frame."
         )
         (refresh time_recorded song difficulty song_start_seconds song_end_seconds)
         (no_test)
      )
      (start_recording
         script
         (script {$this start_recording})
         (help "start a recording")
      )
      (stop_recording
         script
         (script {$this stop_recording})
         (help "stop the current recording")
      )
      (extract_moves_from_clip
         script
         (script
            {$this split_along_moves}
            {milo update_objects}
         )
         (help "extract clips from the file by move")
      )
      (split_off_front
         script
         (script
            {$this split 1}
            {milo update_objects}
         )
         (help "create new clip from front of up to current frame")
      )
      (split_off_back
         script
         (script
            {$this split 0}
            {milo update_objects}
         )
         (help "create new clip from current frame to end of")
      )
      (extract_start_frame int (help "frame to start the extraction on"))
      (extract_end_frame int (help "frame to end the extraction on"))
      (extract
         script
         (script
            {$this extract}
            {milo update_objects}
         )
         (help
            "extract the frames between the extract_start_frame and extract_end_frame"
         )
      )
      (time_recorded
         string
         (read_only 1)
         (help "Time/Date this clip was recorded")
      )
      (song
         string
         (read_only 1)
         (help "Song clip was recorded from")
      )
      (difficulty
         string
         (read_only 1)
         (help "Difficulty of song during recording")
      )
      (song_start_seconds
         float
         (read_only 1)
         (help "Time in song when recording started")
      )
      (song_end_seconds
         float
         (read_only 1)
         (help "Time in song when recording ended")
      )
      (expected_rating
         symbol
         (list ('' FEEDBACK_STATES))
         (help "Expected move rating to check for when simulating playback")
      )
   )
   (ext clp)
   (types)
)
(SkeletonViz
   (description "Visualization of one natural input skeleton")
   (superclasses Draw Trans)
   (allowed_dirs SkeletonDir)
   (ext viz)
   (types)
   (editor
      (use_physical_cam
         bool
         (help "Draw skeleton from Natal camera perspective?")
      )
      (axes_coord_sys
         COORD_SYS_TYPE
         (help "Which coordinate system axes to draw")
      )
   )
)
#define HAMBUTTONSETANIM (
   (struct
      (highlighted_anim
         object
         (class Anim)
         (help "Animation that plays on the highlighted button.")
      )
      (button_anims
         (array object (class Anim))
         (help "Optional anims for each of the other buttons.")
      )
   )
)
(HamButtonSet
   (description
      "Collection of HamButtons that are controlled on a single hand"
   )
   (superclasses Draw)
   (allowed_dirs PanelDir)
   (ext hbs)
   (editor
      (layout_group
         object
         (class Group)
         (help "Group that contains the template button")
      )
      (layout_trans
         object
         (class Trans)
         (help "Trans to show the button set where to draw")
      )
      (layout_button
         object
         (class HamButton)
         (help "Dummy button to show where to place the other buttons")
      )
      (buttons
         (array object (class HamButton))
         (help "Buttons in group")
      )
      (spacing float (help "Vertical space between buttons"))
      (layout_anim HAMBUTTONSETANIM)
      (swell_anim object (class Anim))
      (slide_anim HAMBUTTONSETANIM)
      (select_anim HAMBUTTONSETANIM)
      (select_toggle_anim HAMBUTTONSETANIM)
      (use_select_anim
         bool
         (help "Apply the select anim if this is checked")
         (no_test)
      )
   )
   (types)
)
(HamButtonList
   (description
      "Collection of HamButtons that are controlled on a single hand, in a scrollable list"
   )
   (superclasses HamButtonSet)
   (allowed_dirs PanelDir)
   (ext hbs)
   (editor
      (first_selectable int (help "Index of first selectable button in list"))
      (num_selectable int (help "Number of selectable buttons in list"))
      (scroll_anim HAMBUTTONSETANIM)
      (scroll_speed_anim HAMBUTTONSETANIM)
      (scroll_fast_up_trigger
         object
         (class EventTrigger)
         (help "Trigger when scrolling up in fast mode")
      )
      (scroll_up_trigger
         object
         (class EventTrigger)
         (help "Trigger when scrolling up")
      )
      (scroll_none_trigger
         object
         (class EventTrigger)
         (help "Trigger when not scrolling")
      )
      (scroll_down_trigger
         object
         (class EventTrigger)
         (help "Trigger when scrolling down")
      )
      (scroll_fast_down_trigger
         object
         (class EventTrigger)
         (help "Trigger when scrolling down in fast mode")
      )
   )
   (types)
)
(HamVisDir
   (description "panel dir that handles the visualizer")
   (superclasses SkeletonDir)
   (editor
      (perspective_cam
         object
         (class Cam)
         (help "Used to draw perspective_draw objects")
      )
      (perspective_draw
         (array
            object
            (class Draw)
            (obj_flags no_null)
         )
         (help "Draw these objects based on perspective of player's head position")
      )
      (perspective_scale
         VECTOR3
         (help "Amount to scale movement of perspective_draw objects in x, y, z")
      )
      (perspective_smooth
         float
         (range 0 0.95)
         (help
            "Amount to smooth perspective_cam movement. 0 means no smoothing, 0.95 smooths a huge amount.  More smoothing means more lag."
         )
      )
      (milo_manual_frame
         bool
         (help
            "Allow Milo anim bar to drive the gesture propanim frame, not the player's skeleton."
         )
      )
      (player1_left
         object
         (class Anim)
         (help "Animated from 0 - 100, depending on active player's hand height")
      )
      (player1_right
         object
         (class Anim)
         (help "Animated from 0 - 100, depending on active player's hand height")
      )
      (player2_left
         object
         (class Anim)
         (help
            "Animated from 0 - 100, depending on non-active player's hand height"
         )
      )
      (player2_right
         object
         (class Anim)
         (help
            "Animated from 0 - 100, depending on non-active player's hand height"
         )
      )
   )
   (init {$this set_type ham})
   (types
      (ham
         (enter
            {if {exists master}
               {master add_sink
                  $this
                  (downbeat beat halfbeat quarterbeat first_beat)
               }
            }
            {set $hamvisdir.downbeat 0}
         )
         (exit
            {if {exists master}
               {master remove_sink $this}
            }
         )
         (downbeat
            {if {$this showing}
               {'++' $hamvisdir.downbeat}
               {if {== 4 $hamvisdir.downbeat}
                  {$this animate_next_shot}
                  {set $hamvisdir.downbeat 0}
               }
            }
         )
      )
   )
)
(HamVisDetails
   (description "Specifics of each visualizer type")
   (superclasses Object)
   (types)
   (editor
      (hide_list
         (array object (list {$this allowable_hide_objects}))
         (help
            "List of objects to hide while this camera shot is active, shows them when done"
         )
      )
      (show_list
         (array object (list {$this allowable_show_objects}))
         (help
            "List of objects to show while this camera shot is active, hides them when done"
         )
      )
      (begin_triggers
         (array object (list {$this allowable_begin_triggers}))
         (help "Triggers to fire when visualization section starts")
      )
      (end_triggers
         (array object (list {$this allowable_end_triggers}))
         (help "Triggers to fire when visualization section ends")
      )
   )
)
(HamMeterEffectMonitor
   (description "Monitor for FxMeterEffect to feed back channel data")
   (superclasses Poll)
   (ext effmon)
   (editor
      (meter_effect
         object
         (class FxSendMeterEffect)
         (help "FxSendMeterEffect for this object to monitor")
      )
   )
   (types)
)
(PracticeSection
   (description "Practice section details for skills mode")
   (superclasses Anim)
   (ext sect)
   (editor
      (display_name
         symbol
         (help "Display name used to show in selection screens")
      )
      (difficulty
         int
         (list DIFF_LIST)
         (help "Difficulty this section is tied to")
      )
      (generate_sections
         script
         (script
            {cond
               ({! $hamdirector}
                  {notify "No hamdirector exists, world must be loaded"}
               )
               ({!
                     {$hamdirector song_anim}}
                  {notify "Song must be loaded with hamdirector"}
               )
               ({!=
                     {$hamdirector get difficulty}
                     [difficulty]}
                  {notify
                     {sprint "Must set hamdirector's difficulty to "}
                     {elem DIFF_LIST [difficulty]}
                  }
               )
               (1
                  {do
                     ($song_anim {$hamdirector song_anim})
                     ($last_keyframe "")
                     ($count 0)
                     {$this clear (steps)}
                     {$song_anim foreach_keyframe $hamdirector
                        (practice)
                        $frame
                        $value
                        {if
                           {&&
                              {!= $last_keyframe ""}
                              {'||'
                                 {< {strlen $last_keyframe} 4}
                                 {!=
                                    {substr $last_keyframe {- {strlen $last_keyframe} 4} 4}
                                    "_end"
                                 }
                              }
                           }
                           {$this append (steps) 0}
                           {$this set (steps $count start) $last_keyframe}
                           {$this set (steps $count end) $value}
                           {$this set (steps $count type) learn}
                           {'++' $count}
                        }
                        {set $last_keyframe $value}
                     }
                  }
                  {milo update_open_editor $this}
               )
            }
         )
      )
      (steps
         (array
            (struct
               (type
                  symbol
                  (list (learn review freestyle))
                  (help "Type of step")
                  (refresh steps)
               )
               (boundry
                  bool
                  (help "True if this step is the START of a subsection")
                  (read_only {!= [steps {elem $milo_prop_path 1} type] learn})
                  (refresh steps)
               )
               (start
                  symbol
                  (help "Start of sequence")
                  (read_only
                     {'||' {! $hamdirector} {!= {$hamdirector get difficulty} [difficulty]}}
                  )
                  (list
                     {if_else {&& $hamdirector {== {$hamdirector get difficulty} [difficulty]}}
                        {$hamdirector practice_list}
                        ([steps {elem $milo_prop_path 1} start])
                     }
                  )
                  (refresh steps)
               )
               (end
                  symbol
                  (help "End of sequence")
                  (read_only
                     {'||' {! $hamdirector} {!= {$hamdirector get difficulty} [difficulty]}}
                  )
                  (list
                     {if_else {&& $hamdirector {== {$hamdirector get difficulty} [difficulty]}}
                        {$hamdirector practice_list}
                        ([steps {elem $milo_prop_path 1} end])
                     }
                  )
                  (refresh steps)
               )
            )
            (header
               {do
                  ($index {elem $milo_prop_path 1})
                  {sprint
                     {if_else [steps $index boundry]
                        "> "
                        "  "
                     }
                     [steps $index type]
                     ":    "
                     [steps $index start]
                     "  "
                     [steps $index end]
                  }
               }
            )
         )
         (read_only
            {&& $hamdirector {!= {$hamdirector get difficulty} [difficulty]}}
         )
         (help "List of steps for this practice section")
      )
      (test_step_sequence int (help "Index of step/sequence to test"))
   )
   (types)
)
(NavigationSkeletonDir
   (description "Dir to view shell navigation gestures in milo")
   (superclasses SkeletonDir)
   (types)
   (editor)
)
(RankProgressBar
   (description "Rank Progress Bar")
   (allowed_dirs)
   (superclasses UIComponent)
   (types)
   (ext rpb)
   (editor)
)
(SongDifficultyDisplay
   (description "Song Difficulty Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (types)
   (ext sdd)
   (editor)
)
(StarsDisplay
   (description "Stars Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (types)
   (ext std)
   (editor)
)
(StreamRenderer
   (description "Renders Natal stream textures into a texture.")
   (superclasses Draw)
   (ext sr)
   (editor
      (output_texture
         object
         (class Tex)
         (help "Texture to write to")
         (list {$this get_render_textures})
         (pre_sync
            {if [output_texture]
               {milo record [output_texture] reset_tex_render}
            }
         )
         (post_sync
            {if [output_texture]
               {milo record [output_texture] set_tex_render}
               {[output_texture] set_rendered}
            }
         )
      )
      (display
         int
         (list STREAM_DISPLAY_LIST)
         (help "Natal buffer to display")
      )
      (num_blurs
         int
         (range 0 64)
         (help "Number of times to blur the player silhouette texture")
      )
      (player_depth_nobody
         color
         (help "Color for non-player pixels (i.e. the background)")
      )
      (player_depth_nobody_alpha float (help "Alpha for non-player pixels"))
      (player_depth_color1 color (help "Player 1 color"))
      (player_depth_color1_alpha float (help "Player 1 alpha"))
      (player_depth_color2 color (help "Player 2 color"))
      (player_depth_color2_alpha float (help "Player 2 alpha"))
      (player_depth_others color (help "Color for players other than 1 and 2"))
      (player_depth_others_alpha
         float
         (help "Alpha for players other than 1 and 2")
      )
      (player_depth_palette_offset
         float
         (range -1 1)
         (help "Starting point for palette")
      )
      (player_depth_palette
         object
         (class Tex)
         (help "1D palette for player depth")
      )
      (background_depth_palette_offset
         float
         (range -1 1)
         (help "Starting point for palette")
      )
      (background_depth_palette
         object
         (class Tex)
         (help "1D palette for background depth ")
      )
      (force_mips bool (help "Generate mip maps for the texture."))
      (pc_test_texture
         object
         (class Tex)
         (help
            "StreamRenderer will output this test texture.\nOnly works on the PC."
         )
      )
   )
   (types)
)
(TransConstraint
   (description "Object for setting up lazy transform parenting")
   (superclasses Poll)
   (ext tc)
   (editor
      (parent
         object
         (class Trans)
         (help "The trans parent")
      )
      (child
         object
         (class Trans)
         (help "The trans child")
      )
      (static_cube
         VECTOR3
         (help "Dimensions of cube in which child transform is not updated")
      )
      (speed
         float
         (range 1 10000)
         (help "Speed of tracking in inches/second")
      )
      (track_x bool (help "Track x-axis to parent?"))
      (track_y bool (help "Track y-axis to parent?"))
      (track_z bool (help "Track z-axis to parent?"))
      (snap_to_parent
         script
         (script {$this snap_to_parent})
         (help "Snap position to parent")
      )
   )
   (types)
)