#include ../config/macros.dta
#include crowd_audio.dta
#define LIGHTING_CATEGORIES ((bright silhouette))
#define CAMSHOT_CATEGORIES ((#include camera_cats.dta))
#include worldbase.dta
(Tex
   (types
      (sticker
         (editor
            (sizex float (help "scaling in x"))
            (sizey float (help "scaling in y"))
            (display_name symbol (help "display name"))
            (palette_index
               int
               (help "default palette index in the colors list for this sticker")
            )
            (allow_color bool (help "can the user apply color to this image?"))
         )
         (sizex 1)
         (sizey 1)
         (display_name '')
         (palette_index 0)
         (allow_color TRUE)
      )
   )
)
(TexRenderer
   (types
      (snapshot
         (editor
            (camshot
               symbol
               (list
                  {do
                     ($array {array 0})
                     {push_back $array none}
                     {if [proxy]
                        {[proxy] iterate BandCamShot $obj {push_back $array {symbol {$obj name}}}}
                     }
                     {sort $array}
                     $array
                  }
               )
               (help "camshot to use for this render to texture")
            )
         )
         (camshot none)
         (pre_render
            {if [camshot]
               {if {!= [camshot] none}
                  {[proxy] force_shot {[proxy] find [camshot]}}
               }
            }
         )
      )
   )
)
(CamShot
   (allowed_dirs PanelDir)
   (init
      {$this set_type ham}
      {set [category] TEST_CAM}
   )
   (editor
      (category
         symbol
         (list CAMSHOT_CATEGORIES)
         (help "Category of the shot")
      )
   )
   (types
      (ham
         (editor
            (postprocess
               object
               (class PostProc)
               (help "Post process object to use for this shot")
            )
         )
         (postprocess {object ""})
         (start_shot
            {if_else $hamdirector
               {$hamdirector set cam_postproc [postprocess]}
               {if [postprocess]
                  {[postprocess] select}
               }
            }
         )
         (stop_shot
            {if $hamdirector
               {$hamdirector set cam_postproc {object ""}}
               {if [postprocess]
                  {[postprocess] unselect}
               }
            }
         )
      )
   )
)
(EventTrigger
   (supported_events
      (intro_start
         intro_end
         music_start
         music_end
         performance_low
         performance_high
         performance_awesome
         performance_high_upto
         performance_high_downto
         skills_learn_low
         skills_learn_high
         skills_learn_awesome
         skills_learn_high_upto
         skills_learn_high_downto
         move_perfect
         move_awesome
         move_ok
         move_bad
         final_pose_perfect
         final_pose_awesome
         final_pose_ok
         final_pose_bad
         points_awarded
         start
         post_switch_cam
         music_start
         game_lost
         game_won
         verse
         chorus
         beat
         halfbeat
         quarterbeat
         downbeat
         beat_2
         beat_3
         beat_4
         beat_animation_start
         beat_animation_stop
         player_freestyle_start
         player_freestyle_stop
         flash_cards_visible
         flash_cards_hidden
         skills_mode
         performance_mode
         multiplayer_mode
         photo_award
         photo_take
         photo_take_first
         photo_take_last
         prepare_photo_take
         photo_flip_show
         photo_flip_hide
         skills_slowdown_start
         skills_slowdown_stop
         skills_learn
         skills_learn_earn_check
         skills_learn_done
         skills_learn_fail_move
         skills_review
         skills_review_done
         skills_review_done_100_percent
         skills_freestyle_enter
         skills_freestyle_exit
         skills_bonus_enter_slowdown
         skills_bonus_fasttrack_first
         skills_bonus_fasttrack_second
         skills_bonus_learn_complete
         skills_bonus_start_scored_slowdown
         skills_show_recap
         skills_show_recap_final
         score_multiplier_up
         score_multiplier_down
         star_earned
         final_star_earned
         game_over
         game_over_stars_0
         game_over_stars_1
         game_over_stars_2
         game_over_stars_3
         game_over_stars_4
         game_over_stars_5
         game_over_stars_6
         game_over_skills
         player_1_turn
         player_2_turn
         player_1_surpass
         player_2_surpass
         player_1_switch_to
         player_2_switch_to
         dance_together
      )
   )
   (types
      (toggler
         (editor
            (disable
               object
               (class EventTrigger)
               (help "disable this event trigger when I'm triggered")
            )
            (enable
               object
               (class EventTrigger)
               (help "enable this event trigger when I'm triggered")
            )
         )
         (disable '')
         (enable '')
         (trigger
            {if [disable]
               {script_task kTaskBeats (delay 1.0e-2) (script {[disable] disable})}
            }
            {if [enable]
               {script_task kTaskBeats (delay 1.0e-2) (script {[enable] enable})}
            }
         )
      )
      (endgame_action
         (supported_events
            (endgame_swing_drum_0
               endgame_swing_drum_1
               endgame_swing_drum_2
               endgame_swing_drum_3
               endgame_swing_drum_4
               endgame_swing_bass_0
               endgame_swing_bass_1
               endgame_swing_bass_2
               endgame_swing_bass_3
               endgame_swing_bass_4
               endgame_swing_guitar_0
               endgame_swing_guitar_1
               endgame_swing_guitar_2
               endgame_swing_guitar_3
               endgame_swing_guitar_4
               endgame_vocals_none
               endgame_vocals_low
               endgame_vocals_medium
               endgame_vocals_high
            )
         )
      )
      (backlight
         (editor
            (tex1
               object
               (class Tex)
               (help "texture for first moving layer")
            )
            (tex2
               object
               (class Tex)
               (help "texture for second moving layer")
            )
            (part_tex1
               object
               (class Tex)
               (help "texture for first particle system")
            )
            (part_tex2
               object
               (class Tex)
               (help "texture for second particle system")
            )
         )
         (tex1 '')
         (tex2 '')
         (part_tex1 '')
         (part_tex2 '')
         (trigger
            {if {exists mat02.mat}
               {mat02.mat set diffuse_tex [tex1]}
            }
            {if {exists mat03.mat}
               {mat03.mat set diffuse_tex [tex2]}
            }
            {if {exists part_mat02.mat}
               {part_mat02.mat set diffuse_tex [part_tex1]}
            }
            {if {exists part_mat03.mat}
               {part_mat03.mat set diffuse_tex [part_tex2]}
            }
         )
      )
   )
)
(LightPreset
   (init {$this set category bright})
   (editor
      (category
         symbol
         (list LIGHTING_CATEGORIES)
         (help "Category of the preset")
      )
   )
   (views
      (flags
         ("category" [category])
         ("platform_only" [platform_only])
      )
   )
   (types
      (target_animator
         (editor
            (backlight
               object
               (class RndDir)
               (help "backlight object to animate")
            )
            (backlight_event
               symbol
               (list
                  {do
                     ($array {array 0})
                     {push_back $array none}
                     {if [backlight]
                        {[backlight] iterate
                           EventTrigger
                           $obj
                           {push_back $array {symbol {$obj name}}}
                        }
                     }
                     {sort $array}
                     $array
                  }
               )
               (help "event trigger to fire for this keyframe")
            )
            (target_1
               (indent
                  (target1
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base1_anim symbol (list {$this get_clip_names}))
                  (base1_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base1_speed float (help "speed multiplier"))
                  (base1_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add1_anim symbol (list {$this get_clip_names}))
                  (add1_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add1_speed float (help "speed multiplier"))
                  (add1_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_2
               (indent
                  (target2
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base2_anim symbol (list {$this get_clip_names}))
                  (base2_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base2_speed float (help "speed multiplier"))
                  (base2_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add2_anim symbol (list {$this get_clip_names}))
                  (add2_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add2_speed float (help "speed multiplier"))
                  (add2_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_3
               (indent
                  (target3
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base3_anim symbol (list {$this get_clip_names}))
                  (base3_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base3_speed float (help "speed multiplier"))
                  (base3_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add3_anim symbol (list {$this get_clip_names}))
                  (add3_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add3_speed float (help "speed multiplier"))
                  (add3_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_4
               (indent
                  (target4
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base4_anim symbol (list {$this get_clip_names}))
                  (base4_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base4_speed float (help "speed multiplier"))
                  (base4_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add4_anim symbol (list {$this get_clip_names}))
                  (add4_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add4_speed float (help "speed multiplier"))
                  (add4_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_5
               (indent
                  (target5
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base5_anim symbol (list {$this get_clip_names}))
                  (base5_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base5_speed float (help "speed multiplier"))
                  (base5_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add5_anim symbol (list {$this get_clip_names}))
                  (add5_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add5_speed float (help "speed multiplier"))
                  (add5_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_6
               (indent
                  (target6
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base6_anim symbol (list {$this get_clip_names}))
                  (base6_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base6_speed float (help "speed multiplier"))
                  (base6_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add6_anim symbol (list {$this get_clip_names}))
                  (add6_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add6_speed float (help "speed multiplier"))
                  (add6_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (test script (script {$this start_anim}))
         )
         (backlight {object ''})
         (backlight_event none)
         (target1 {object ''})
         (base1_anim still)
         (base1_amplitude 1)
         (base1_speed 1)
         (base1_phase 0)
         (add1_anim still)
         (add1_amplitude 1)
         (add1_speed 1)
         (add1_phase 0)
         (target2 {object ''})
         (base2_anim still)
         (base2_amplitude 1)
         (base2_speed 1)
         (base2_phase 0)
         (add2_anim still)
         (add2_amplitude 1)
         (add2_speed 1)
         (add2_phase 0)
         (target3 {object ''})
         (base3_anim still)
         (base3_amplitude 1)
         (base3_speed 1)
         (base3_phase 0)
         (add3_anim still)
         (add3_amplitude 1)
         (add3_speed 1)
         (add3_phase 0)
         (target4 {object ''})
         (base4_anim still)
         (base4_amplitude 1)
         (base4_speed 1)
         (base4_phase 0)
         (add4_anim still)
         (add4_amplitude 1)
         (add4_speed 1)
         (add4_phase 0)
         (target5 {object ''})
         (base5_anim still)
         (base5_amplitude 1)
         (base5_speed 1)
         (base5_phase 0)
         (add5_anim still)
         (add5_amplitude 1)
         (add5_speed 1)
         (add5_phase 0)
         (target6 {object ''})
         (base6_anim still)
         (base6_amplitude 1)
         (base6_speed 1)
         (base6_phase 0)
         (add6_anim still)
         (add6_amplitude 1)
         (add6_speed 1)
         (add6_phase 0)
         (get_clip_names
            {if_else [target1]
               {[target1] get_clip_names}
               (still)
            }
         )
         (enter
            {if [backlight]
               {if {!= [backlight_event] none}
                  {unless {[backlight] exists [backlight_event]}
                     {set [backlight_event] none}
                     {notify "invalid backlight event on " {$this name} ", clearing!"}
                  }
               }
            }
         )
         (start_anim
            {if {&& [backlight] {!= [backlight_event] none}}
               {[backlight] trigger [backlight_event]}
            }
            {if [target1]
               {[target1] play_anim
                  [base1_anim]
                  [base1_amplitude]
                  [base1_speed]
                  [base1_phase]
                  [add1_anim]
                  [add1_amplitude]
                  [add1_speed]
                  [add1_phase]
               }
            }
            {if [target2]
               {[target2] play_anim
                  [base2_anim]
                  [base2_amplitude]
                  [base2_speed]
                  [base2_phase]
                  [add2_anim]
                  [add2_amplitude]
                  [add2_speed]
                  [add2_phase]
               }
            }
            {if [target3]
               {[target3] play_anim
                  [base3_anim]
                  [base3_amplitude]
                  [base3_speed]
                  [base3_phase]
                  [add3_anim]
                  [add3_amplitude]
                  [add3_speed]
                  [add3_phase]
               }
            }
            {if [target4]
               {[target4] play_anim
                  [base4_anim]
                  [base4_amplitude]
                  [base4_speed]
                  [base4_phase]
                  [add4_anim]
                  [add4_amplitude]
                  [add4_speed]
                  [add4_phase]
               }
            }
            {if [target5]
               {[target5] play_anim
                  [base5_anim]
                  [base5_amplitude]
                  [base5_speed]
                  [base5_phase]
                  [add5_anim]
                  [add5_amplitude]
                  [add5_speed]
                  [add5_phase]
               }
            }
            {if [target6]
               {[target6] play_anim
                  [base6_anim]
                  [base6_amplitude]
                  [base6_speed]
                  [base6_phase]
                  [add6_anim]
                  [add6_amplitude]
                  [add6_speed]
                  [add6_phase]
               }
            }
         )
         (on_set_frame
            {if [backlight]
               {if {exists backlight_color1.env}
                  {[backlight] set color1 {backlight_color1.env get ambient_color}}
               }
               {if {exists backlight_color2.env}
                  {[backlight] set color2 {backlight_color2.env get ambient_color}}
               }
               {if {exists backlight_color3.env}
                  {[backlight] set color3 {backlight_color3.env get ambient_color}}
               }
               {[backlight] update}
            }
         )
      )
   )
)
(Sfx
   (types
      (midi_sample
         (editor
            (note
               string
               (list MIDI_NOTE_LIST)
               (post_sync {$this generate_index})
               (help
                  "Midi note which will trigger this sample from the midi player MidiParser"
               )
            )
         )
         (note "")
         (index -1)
         (generate_index
            {do
               ($index -1)
               {if {!= [note] ""}
                  {find_elem MIDI_NOTE_LIST [note] $index}
               }
               {set [index] $index}
            }
         )
         (init_type
            {do
               ($dir {$this dir})
               ($global_fader {$dir find midi_global_level.fade FALSE})
               ($cross_fader {$dir find midi_music_cross_fade.fade FALSE})
               ($song_fader {$dir find midi_song_level.fade FALSE})
               {if {&& $global_fader {! {find_elem {$this get_array faders} $global_fader}}}
                  {$this insert (faders {$this size (faders)}) $global_fader}
               }
               {if {&& $cross_fader {! {find_elem {$this get_array faders} $cross_fader}}}
                  {$this insert (faders {$this size (faders)}) $cross_fader}
               }
               {if {&& $song_fader {! {find_elem {$this get_array faders} $song_fader}}}
                  {$this insert (faders {$this size (faders)}) $song_fader}
               }
            }
         )
      )
   )
)
(ObjectDir
   (types
      (song
         #ifndef HX_PC
         (change_subdir
            ($file)
            {if_else {&& {exists game_panel} {has_substr $file ":"}}
               {cond
                  ({has_substr
                        $file
                        "/world/shared/director.milo"}
                     "world/shared/director.milo"
                  )
                  ({has_substr $file "/sfx/audio_mixer.milo"} "sfx/audio_mixer.milo")
                  "stream_cache"
               }
               kDataUnhandled
            }
         )
         #endif
      )
      (character_vo
         (editor
            (character
               symbol
               (list
                  {do
                     ($array {array 0})
                     {push_back $array ''}
                     {insert_elems $array 1 (CHARACTERS)}
                     $array
                  }
               )
            )
            (collect_lipsyncs script (script {$this collect_lipsyncs FALSE}))
         )
         (lipsync "")
         (character '')
         (play_win
            ($num_stars)
            {$this play_synchronized_audio
               {elem
                  (win_terrible win_poor win_poor win_good win_good win_great win_great)
                  $num_stars
               }
            }
         )
         (play_intro {$this play_synchronized_audio intro})
         (play_synchronized_audio
            ($seq_name)
            {do
               ($seq {find_obj $this {sprint $seq_name ".cue"}})
               ($is_mogg FALSE)
               {$this clear_lipsync}
               {if $seq
                  {do
                     ($lipsync_seq {$this find_lipsync_sequence $seq})
                     ($mogg_clip)
                     {if $lipsync_seq
                        {set [lipsync]
                           {find_obj $this {sprint {file_get_base {$lipsync_seq name}} ".lipsync"}}
                        }
                        {set $is_mogg {> {$lipsync_seq size (moggclip_maps)} 0}}
                        {if $is_mogg
                           {set $mogg_clip {$lipsync_seq get (moggclip_maps 0 moggclip)}}
                           {if $mogg_clip
                              {$mogg_clip add_sink $this}
                           }
                        }
                     }
                  }
                  {script_task kTaskSeconds
                     (delay 0)
                     (script
                        {$seq play}
                        {if {&& {exists synth} {exists game_panel} {game_panel paused}}
                           {synth pause_all_sfx TRUE}
                        }
                     )
                  }
                  {if {! $is_mogg}
                     {$this play_lipsync}
                  }
               }
            }
         )
         (mogg_ready
            {$this play_lipsync}
            {$this clear_mogg_sinks}
         )
         (play_lipsync
            {do
               ($lip_driver {find_obj {$hamwardrobe get_character} face.lipdrv})
               {cond
                  ({! $lip_driver}
                     {print "No Lip Driver\n"}
                  )
                  ({!
                        [lipsync]}
                     {print "No Lip Sync found\n"}
                  )
                  (TRUE
                     {if $hamdirector
                        {$hamdirector enable_facial_animation}
                        {$hamdirector blend_face_overrides_out 0}
                     }
                     {$lip_driver set lipsync [lipsync]}
                     {if $hamdirector
                        {$hamdirector set_lipsync_offsets {- {taskmgr seconds}}}
                     }
                  )
               }
            }
         )
         (find_lipsync_sequence
            ($seq)
            {cond
               ({== $seq ""} "")
               ({$seq is_a RandomGroupSeq}
                  {if_else {$seq size (children)}
                     {$this find_lipsync_sequence
                        {$seq get (children {$seq get_next_play_index})}
                     }
                     ""
                  }
               )
               ({$seq is_a ParallelGroupSeq}
                  {do
                     ($lipsync "")
                     ($index 0)
                     {while {&& {== $lipsync ""} {< $index {$seq size (children)}}}
                        {set $lipsync {$this find_lipsync_sequence {$seq get (children $index)}}}
                        {'++' $index}
                     }
                     $lipsync
                  }
               )
               (TRUE
                  {if_else {find_obj $this {sprint {file_get_base {$seq name}} ".lipsync"}}
                     $seq
                     ""
                  }
               )
            }
         )
         (clear_lipsync
            {do
               ($lip_driver {find_obj {$hamwardrobe get_character} face.lipdrv})
               {if $lip_driver
                  {$lip_driver set lipsync ""}
                  {if $hamdirector
                     {$hamdirector set_lipsync_offsets 0}
                  }
               }
            }
            {$this clear_mogg_sinks}
         )
         (clear_mogg_sinks
            {$this iterate MoggClip $mogg_clip {$mogg_clip remove_sink $this}}
         )
         (collect_lipsyncs
            ($save)
            {do
               ($lipsync_list {array 0})
               ($changed FALSE)
               ($path
                  {file_get_path {file_relative_path {file_root} {$this get_path_name}}}
               )
               ($pattern {sprint $path "/" [character] "/lipsync_src/*.milo"})
               ($me $this)
               {$this iterate CharLipSync $lipsync {push_back $lipsync_list $lipsync}}
               {if {find_substr $path "/eng/"}
                  {foreach $lipsync $lipsync_list
                     {delete $lipsync}
                  }
                  {resize $lipsync_list 0}
               }
               {file_recurse_pattern
                  $filename
                  $pattern
                  {do
                     ($file {load_objects $filename})
                     {if $file
                        {$file iterate
                           CharLipSync
                           $lipsync
                           {do
                              ($base_name {file_get_base {$lipsync name}})
                              {if {find_obj $me {sprint $base_name ".cue"}}
                                 {foreach $lipsync $lipsync_list
                                    {delete $lipsync}
                                 }
                                 {resize $lipsync_list 0}
                              }
                              {if
                                 {&&
                                    {find_obj $me {sprint $base_name ".cue"}}
                                    {! {find_obj $me {sprint $base_name ".lipsync"}}}
                                 }
                                 {$lipsync set_name {sprint $base_name ".lipsync"} $me}
                                 {set $changed TRUE}
                              }
                           }
                        }
                        {delete $file}
                     }
                  }
               }
               {if $changed
                  {if {exists milo}
                     {milo update_objects}
                  }
                  {if $save
                     {$me perforce_resave}
                  }
               }
            }
         )
      )
   )
)
(RndDir
   (types
      (chars (enter WORLD_SETUP_CHARACTERS))
      (lighting
         (editor)
         (enter WORLD_SETUP_CHARACTERS)
      )
      (clip_test
         (song '')
         (editor
            (song
               symbol
               (list
                  {if_else {exists fake_songmgr}
                     {fake_songmgr get_song_list}
                     ''
                  }
               )
               (post_sync
                  {do
                     ($path {fake_songmgr get_path [song] "clips.milo"})
                     {print "loading " $path}
                     {clips.fm select clips $path}
                     {clips.fm start_load FALSE}
                     {{main get driver} set clips clips}
                     {milo edit main Character}
                  }
               )
               (help "choose a song to preview, auto-loads when chosen")
            )
            (win_moves
               script
               (script
                  {{main get driver} set clips {main find clips}}
                  {milo edit main Character}
               )
               (help "switches character to win moves")
            )
         )
         (on_milo_loaded
            {milo edit $this "Object Type"}
            {milo edit main "HamCharacter"}
         )
      )
   )
)
(Fur
   (init
      {do
         ($ww {find_obj {$this dir} world.wind})
         {if $ww
            {set [wind] $ww}
         }
      }
   )
)
(WorldCrowd
   (init {$this set_type band})
   (types
      (band
         (enter
            {$this set_fullness 1 1}
            {handle ($hamwardrobe add_crowd $this)}
         )
      )
   )
)
(WorldDir
   (types
      (world
         (venue boardwalk)
         (song '')
         (play_mode solo)
         (character '')
         (difficulty kDifficultyEasy)
         (practice_start '')
         (practice_end '')
         (blend_debug 0)
         (no_transitions FALSE)
         (start_loop_margin 1)
         (end_loop_margin 1)
         (editor
            (load_song
               script
               (script {$this load_and_play_song})
               (help
                  "Load up the the venue(s)+scene(s)+song authoring as dictated by the currently selected milo song"
               )
            )
            WORLD_EDITOR_PLAYMODE
            (venue
               symbol
               (list
                  {file_list
                     "world/*/*.milo"
                     TRUE
                     $path
                     {do
                        ($v {file_get_base $path})
                        {has_substr
                           $path
                           {sprint $v "/" $v ".milo"}
                        }
                     }
                  }
               )
               (help "Venue to load, set before hitting load_song")
            )
            (song
               symbol
               (list
                  {if_else {exists fake_songmgr}
                     {fake_songmgr get_song_list}
                     ''
                  }
               )
               (help "choose a song to preview")
            )
            (character
               symbol
               (list ('' MILO_CHARACTERS))
               (help
                  "Which character to load, none means use song gender default Emilia01 or Mo01"
               )
            )
            (difficulty
               int
               (list DIFF_LIST)
               (post_sync
                  {milo record $hamdirector difficulty}
                  {$hamdirector set difficulty [difficulty]}
                  {$this reset_practice}
               )
            )
            (save_song
               script
               (script {$hamdirector save_song})
               (help "Save the song.anim back into its difficulty.milo file!")
            )
            (edit_song_anim
               script
               (script {$this on_edit_song_anim})
               (help "Pop open the song.anim editor")
            )
            (edit_dancer_faceanim
               script
               (script
                  {if_else {$hamdirector dancer_face_anim}
                     {do
                        {{$hamdirector dancer_face_anim} setup}
                        {$hamdirector resync_face_drivers}
                        {milo edit {$hamdirector dancer_face_anim} "PropAnim Keys"}
                     }
                     {notify "Could not edit dancer_face.anim, no song loaded"}
                  }
               )
               (help "Pop open the dancer_face.anim editor")
            )
            (edit_backup_faceanim
               script
               (script
                  {if_else {$hamdirector backup_face_anim}
                     {do
                        {{$hamdirector backup_face_anim} setup}
                        {$hamdirector resync_face_drivers}
                        {milo edit {$hamdirector backup_face_anim} "PropAnim Keys"}
                     }
                     {notify "Could not edit backup_face.anim, no song loaded"}
                  }
               )
               (help "Pop open the dancer_face.anim editor")
            )
            (save_faceanims
               script
               (script {$hamdirector save_face_anims})
               (help "Saves face animation and allows previewing")
            )
            (toggle_driver
               script
               (script
                  {if $hamdirector
                     {$hamdirector toggle_driver}
                  }
               )
               (help
                  "Toggles clip blending, character (c)enter, clip (o)rigin, and (w)aypoint debugging."
               )
            )
            (edit_player0
               script
               (script
                  {if_else $hamwardrobe
                     {milo edit {$hamwardrobe get_character} HamCharacter}
                     {notify "Could not edit character 0, not loaded"}
                  }
               )
               (help "edit player0")
            )
            (refresh_face_animation
               script
               (script
                  {if $hamdirector
                     {$hamdirector enable_facial_animation}
                  }
               )
               (help "Re-hookup facial animation after changing character.")
            )
            (highlight_player0
               script
               (script
                  {if_else $hamwardrobe
                     {milo set_highlights ({$hamwardrobe get_character})}
                     {notify "Could not highlight character 0, not loaded"}
                  }
               )
               (help "highlight player0")
            )
            (practice_start
               symbol
               (list
                  {if_else $hamdirector
                     {$hamdirector practice_list}
                     ('')
                  }
               )
               (post_sync
                  {if {&& {milo cur_dir} $hamdirector}
                     {do
                        ($moves {{milo cur_dir} find moves FALSE})
                        {if $moves
                           {$moves iterate
                              PracticeSection
                              $sect
                              {if {== {$sect get difficulty} [difficulty]}
                                 {foreach_int $i 0 {$sect size (steps)}
                                    {if
                                       {&&
                                          {== learn {$sect get (steps $i type)}}
                                          {== [practice_start] {$sect get (steps $i start)}}
                                       }
                                       {$hamdirector set practice_end {$sect get (steps $i end)}}
                                       {set [practice_end] {$hamdirector get practice_end}}
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               )
               (refresh practice_end)
               (help "practice mode start frame")
            )
            (practice_end
               symbol
               (list
                  {if_else $hamdirector
                     {$hamdirector practice_list}
                     ('')
                  }
               )
               (help "practice mode end frame")
            )
            (start_loop_margin
               int
               (range 1 100)
               (help "number of measures of rest before the practice start")
            )
            (end_loop_margin
               int
               (range 1 100)
               (help "number of measures of rest after the practice end")
            )
            (start_practice
               script
               (script
                  {do
                     {$this on_set_practice}
                     {$this on_edit_song_anim}
                  }
               )
               (help "Sets the practice frames, starting practice mode")
            )
            (reset_practice
               script
               (script {$this reset_practice})
               (help "Clear out the practice frames, stopping practice mode")
               (refresh practice_start practice_end)
            )
            (blend_debug
               int
               (help
                  "If > 0, is which clip to show by itself rather than doing full blending"
               )
               (post_sync
                  {milo record $hamdirector blend_debug}
                  {$hamdirector set blend_debug [blend_debug]}
               )
            )
            (no_transitions
               bool
               (help "If true, pretends there are no transition clips")
               (post_sync
                  {milo record $hamdirector no_transitions}
                  {$hamdirector set no_transitions [no_transitions]}
               )
            )
         )
         (on_edit_song_anim
            {if $hamdirector
               {if_else {$hamdirector song_anim}
                  {milo edit {$hamdirector song_anim} "PropAnim Keys"}
                  {notify "Could not edit song.anim, no song loaded"}
               }
            }
         )
         (load_and_play_song
            {if {&& [song] $hamdirector}
               {$hamdirector set venue [venue]}
               {$hamdirector load_song
                  {fake_songmgr get_path [song] ".milo"}
                  {if_else [character]
                     [character]
                     {symbol
                        {sprint
                           {fake_songmgr get_data [song] character}
                           "01"
                        }
                     }
                  }
                  {fake_songmgr get_data [song] bpm}
                  TRUE
                  FALSE
               }
               {do
                  ($song_obj {milo song_object})
                  {if $song_obj
                     {$song_obj set song [song]}
                  }
               }
               {milo set anim {milo song_object}}
               {{{$hamdirector get merger} dir} enter}
               {if_else {== {$hamdirector get loaded_new_song} TRUE}
                  {$this reset_practice}
                  {do
                     {$this on_set_practice}
                     {$this on_edit_song_anim}
                  }
               }
               {$hamdirector enable_facial_animation}
            }
         )
         (reset_practice
            {set [practice_start] ''}
            {set [practice_end] ''}
            {$this on_set_practice}
            {if $hamdirector
               {if $hud_panel
                  {$hud_panel reset}
               }
               {handle ({$hamdirector get_world} performance_mode)}
               {handle ({$hamdirector get_world} intro_start)}
               {handle ({$hamdirector get_world} intro_end)}
            }
         )
         (on_set_practice
            {if $hamdirector
               {$hamdirector set practice_start [practice_start]}
               {$hamdirector set practice_end [practice_end]}
               {$hamdirector set start_loop_margin [start_loop_margin]}
               {$hamdirector set end_loop_margin [end_loop_margin]}
               {$hamdirector pick_new_shot}
               {if $tool_song
                  {if_else {'||' {== [practice_start] ''} {== [practice_end] ''}}
                     {do
                        {$tool_song set_loop_start 0}
                        {$tool_song set_loop_end {$tool_song get song_end_frame}}
                        {if {exists audio}
                           {audio clear_loop}
                        }
                     }
                     {do
                        ($start_beat)
                        ($end_beat)
                        {$hamdirector practice_beats $start_beat $end_beat}
                        {set $start_beat {round {- $start_beat {'*' 4 [start_loop_margin]}}}}
                        {set $end_beat {round {'+' $end_beat {'*' 4 [end_loop_margin]}}}}
                        {if {exists audio}
                           {audio set_loop $start_beat $end_beat}
                        }
                        {$tool_song set_loop_start {beat_to_seconds $start_beat}}
                        {$tool_song set_loop_end {beat_to_seconds $end_beat}}
                        {if $hamdirector
                           {if $hud_panel
                              {$hud_panel reset}
                           }
                           {handle ({$hamdirector get_world} skills_mode)}
                           {handle ({$hamdirector get_world} intro_start)}
                           {handle ({$hamdirector get_world} intro_end)}
                        }
                        {do
                           ($fade_out_anim
                              {find_obj $hud_panel sound_bank skills_music_fade_out.anim}
                           )
                           {if $fade_out_anim
                              {$fade_out_anim animate (range 0 0)}
                           }
                        }
                        {$tool_song jump_to {'*' $start_beat 480}}
                     }
                  }
               }
            }
         )
         (on_milo_loaded
            {set [song] ''}
            {milo edit $this "Object Type"}
         )
         WORLD_OBJECT_BASE
         (autosave FALSE)
         (select_camera
            {if $hamdirector
               {handle ($hamdirector select_camera)}
            }
         )
         (post_tool_sync {$this enter})
      )
      (venue
         (lookat_cameras 1)
         (editor
            (lookat_cameras
               bool
               (help
                  "Do the guys look at the cameras in this venue?  if false, they can still be forced to look at the camera through song anim keyframes or shot-specific lookats"
               )
            )
            WORLD_OBJECT_EDITOR_COMMON
         )
         (enter
            WORLD_SETUP_CHARACTERS
            {if {exists game_panel}
               {game_panel add_sink $world () kSinkModeExportType}
            }
            {if {exists master}
               {master add_sink
                  $this
                  (downbeat beat halfbeat quarterbeat first_beat beat_2 beat_3 beat_4)
               }
            }
            {if {exists active_events_parser}
               {active_events_parser add_sink $this (music_start music_end)}
            }
         )
         WORLD_OBJECT_VALIDATE
      )
      (shell
         (editor
            (postprocess
               object
               (class PostProc)
               (help "Post process object to use when this panel is on screen")
               (post_sync {$this update_postproc})
            )
            (refresh_postproc
               script
               (script {$this update_postproc})
               (help "Refresh postprocessor selection on the tool")
            )
         )
         (postprocess '')
         (enter {$this update_postproc})
         (update_postproc
            {if_else [postprocess]
               {[postprocess] select}
               {rnd reset_postproc}
            }
         )
      )
      (facetest
         (enter
            {$this set_outfits}
            {do
               ($song
                  {if_else $tool_song
                     {$tool_song song_name}
                     ""
                  }
               )
               {if_else $song
                  {foreach $name (george john paul ringo)
                     {do
                        ($lip {$this find {sprint $name "_lip"}})
                        ($lipsync "")
                        {$lip set
                           proxy_file
                           {sprint "songs/" $song "/" $name ".milo"}
                        }
                        {set $lipsync {$lip find {sprint $name ".lipsync"}}}
                        {{{object $name} find song.lipdrv} set lipsync $lipsync}
                     }
                  }
                  {notify "To preview lipsync: pick a song to preview in the Anim bar"}
               }
            }
         )
      )
   )
)
(HamCamShot
   (init
      {$this set_type ham}
      {set [category] TEST_CAM}
   )
   (types
      (ham
         (editor
            (postprocess
               object
               (class PostProc)
               (help "Post process object to use for this shot")
            )
            (crowd_density
               float
               (range 0 1)
               (help "density of crowd")
            )
            (crowd_lod
               int
               (range 0 2)
               (help "LOD of crowd texture (0 =  256x512) (1 = 128x256) (2 = 64x128)")
            )
            (crowd_face_camera bool (help "Whether the crowd should face the camera"))
            (lighting_preset
               object
               (class LightPreset)
               (help
                  "light preset to fire for this camera only, only use in special cases, lighting override must be on, goes back to normal lighting when the shot is done!"
               )
            )
            (worst
               bool
               (help "When using -worst_only with venuetest, only looks at these shots")
            )
         )
         (postprocess {object ""})
         (crowd_density 1)
         (crowd_lod 0)
         (crowd_face_camera FALSE)
         (lighting_preset '')
         (worst FALSE)
         (shot_over
            {if {&& $hamdirector {exists game_panel}}
               {switch [category]
                  (
                     (WIN_CAM_CATS)
                     {handle (game_panel game_outro)}
                  )
                  (
                     (INTRO_CAM_CATS)
                     {$hamdirector pick_new_shot}
                  )
               }
            }
         )
         (update_overlay
            #ifndef _SHIP
            {rnd reflect
               camera
               {print "HamCamShot:" {$this name} " category:" [category] "\n"}
            }
            #endif
         )
         (play_group
            ($char $grp $fwd $units $event)
            {do
               ($drv {$char find main.drv})
               {if_else $grp
                  {do
                     {$drv play_group $grp {'|' kPlayNoBlend kPlayNodeLoop}}
                     {$drv set_first_beat_offset $fwd $units $event}
                  }
                  {$drv clear}
               }
            }
         )
         (teleport_char
            ($char $ret)
            {$char cam_teleport $ret}
            {if {&& $hamdirector {$hamdirector get_venue_world}}
               {do
                  ($tc {{$hamdirector get_venue_world} find TransConstraint.tc})
                  {if {&& $tc {== {$tc get parent} $char}}
                     {$tc snap_to_parent}
                  }
               }
            }
         )
         (start_shot
            {if $hamdirector
               {$hamdirector set cam_postproc [postprocess]}
               {if
                  {&&
                     {$hamdirector get cam_switch_freestyle}
                     {== [category] DC_PLAYER_FREESTYLE}
                  }
                  {$hamdirector set player_freestyle TRUE}
               }
            }
            #ifndef _SHIP
            {$this update_overlay}
            #endif
            {if {&& $hamdirector {! {$hamdirector get disable_picking}}}
               {if [lighting_preset]
                  {$hamdirector force_preset [lighting_preset]}
               }
               {if {find_elem (LOSE WIN) [category]}
                  {handle ($world playing_final_cam)}
               }
            }
            {if $hamwardrobe
               {do
                  ($main_character {$hamwardrobe get_character})
                  ($isMain {== {$main_character get_type} main})
                  {if {&& $isMain {!= [category] NEXT_SHOT}}
                     {$main_character set enable_auto_blinks TRUE}
                  }
                  {if {&& {find_elem (BEGIN_END_CAM_CATS) [category]} $isMain}
                     {$main_character set enable_auto_blinks FALSE}
                     {set $vo_bank {$main_character get vo_bank}}
                     {if $vo_bank
                        {cond
                           ({startswith [category] WIN_BOOMBOX} FALSE)
                           ({startswith
                                 [category]
                                 WIN}
                              {$vo_bank play_win
                                 {if_else {exists game_panel}
                                    {int {game_panel get num_stars}}
                                    {cond
                                       ({startswith [category] WIN_LOW} 2)
                                       ({startswith [category] WIN_MEDIUM} 3)
                                       ({startswith [category] WIN_HIGH} 5)
                                    }
                                 }
                              }
                           )
                           ({'||'
                                 {startswith
                                    [category]
                                    INTRO_QUICK}
                                 {startswith
                                    [category]
                                    INTRO_SKILLS}}
                              {$vo_bank clear_lipsync}
                           )
                           ({startswith
                                 [category]
                                 INTRO}
                              {$vo_bank play_intro}
                           )
                        }
                     }
                  }
               }
            }
            {foreach_int $idx 0 {size [crowds]}
               {do
                  ($crowd [crowds $idx crowd])
                  {if $crowd
                     {$crowd set rotate [crowd_face_camera]}
                     {$crowd set_fullness [crowd_density] [crowd_density]}
                     {$crowd set lod [crowd_lod]}
                  }
               }
            }
         )
         (stop_shot
            {if $hamdirector
               {$hamdirector set cam_postproc {object ""}}
               {if
                  {&&
                     {$hamdirector get cam_switch_freestyle}
                     {== [category] DC_PLAYER_FREESTYLE}
                  }
                  {$hamdirector set player_freestyle FALSE}
               }
            }
         )
         (validate
            {if {&& {find_elem (LOSE WIN) [category]} [postprocess]}
               {notify {path_name $this} "must specify no postprocess to show"}
            }
            {if {== [category] PRACTICE_LOOP}
               {foreach_int $i {- {$this size (targets)} 1} -1
                  {notify_and_fix FALSE
                     {$this remove (targets $i)}
                     $this
                     "PRACTICE_LOOP cameras may not have targets, they will pop"
                  }
               }
            }
            {if {== [category] PRACTICE}
               {foreach_int $i 0 {$this size (targets)}
                  {notify_and_fix
                     {! [targets $i return]}
                     {set [targets $i return] FALSE}
                     $this
                     "PRACTICE cameras should not return teleported targets, they will pop when looping into the PRACTICE_LOOP camera"
                  }
               }
            }
         )
         (shot_ok ($prev_shot) TRUE)
      )
   )
)
(HamDirector
   (test_singleton)
   (init {$this set_type ham})
   (types
      (ham
         (enter
            {if {$this get_world}
               {{$this get_world} add_sink $this (PERFORMANCE_EVENTS) kSinkModeType}
               {{$this get_world} add_sink
                  $this
                  (skills_mode
                     performance_mode
                     multiplayer_mode
                     game_won
                     skills_learn
                     skills_review
                     skills_freestyle_enter
                     skills_freestyle_exit
                     intro_end
                     beat_animation_start
                  )
                  kSinkModeType
               }
            }
         )
         (exit
            {if {$this get_world}
               {{$this get_world} remove_sink $this}
            }
         )
         (intro_end {$this enable_facial_animation})
         (pick_intro_shot
            {do
               ($cat {$this get_intro_category})
               {$this set_dircut $cat}
            }
         )
         (set_intro_shot
            ($shot)
            {if {exists game}
               {game set_intro_real_time
                  {if_else $shot
                     {- {$shot duration_seconds}}
                     0
                  }
               }
            }
         )
         (beat_animation_start
            {if $hamwardrobe
               {$hamwardrobe crowd_end_override}
            }
         )
         (load_game_song
            ($load)
            {do
               ($song {meta_performer song})
               ($data {song_mgr get_meta_data $song})
               {$this load_song
                  {sprint
                     {song_mgr song_file_path $song ".milo"}
                  }
                  {meta_performer get_character}
                  {$data bpm}
                  $load
                  TRUE
               }
            }
         )
         (get_char_name
            {do
               ($char_name {$this get_character_name})
               ($len {strlen $char_name})
               {if_else {> $len 2}
                  {set $char_name
                     {substr $char_name 0 {- $len 2}}
                  }
                  ""
               }
            }
         )
         (get_intro_category
            {cond
               ({!= $cheat.intro 0} $cheat.intro)
               ({&& {exists gamemode} {gamemode in_mode practice}} INTRO_SKILLS)
               ({&&
                     {exists game_panel}
                     {game_panel get replay}
                     {! $cheat.force_long_intro_cam}}
                  {symbol {toupper {sprint INTRO_QUICK_ {$this get_char_name}}}}
               )
               {symbol {toupper {sprint INTRO_ {$this get_char_name}}}}
            }
         )
         (pick_venue
            {if_else {exists meta_performer}
               {meta_performer get_venue}
               [venue]
            }
         )
         (set_force_postproc
            ($postproc $rate)
            {set $postproc
               {sprint {$hamdirector get venue} "_" $postproc ".pp"}
            }
            {set [force_postproc] {find_obj {$this dir} $postproc}}
            {set [force_postproc_blend] 0}
            {set [force_postproc_blend_rate] $rate}
         )
         (reset_low_performance
            {if [force_postproc]
               {set [force_postproc_blend_rate] -1}
            }
         )
         (performance_low
            {$this set_force_postproc performance_low 1}
            {handle ($hamwardrobe crowd bad)}
         )
         (performance_high
            {$this set_force_postproc performance_high 1}
            {handle ($hamwardrobe crowd ok)}
         )
         (performance_awesome
            {$this set_force_postproc performance_awesome 1}
            {handle ($hamwardrobe crowd great)}
         )
         (skills_learn_low
            {$this set_force_postproc skills_learn_low 1}
            {handle ($hamwardrobe crowd skills_bad)}
         )
         (skills_learn_high
            {$this set_force_postproc skills_learn_high 1}
            {handle ($hamwardrobe crowd skills_ok)}
         )
         (skills_learn_awesome
            {$this set_force_postproc skills_learn_awesome 1}
            {handle ($hamwardrobe crowd skills_great)}
         )
         (game_won
            {if {&& $hamwardrobe {exists gamemode}}
               {do
                  ($stars {game_panel get num_stars})
                  {$hamwardrobe crowd
                     {if_else {gamemode in_mode practice}
                        {cond
                           ({>= $stars 5} skills_realtime_great)
                           ({>= $stars 3} skills_realtime_ok)
                           skills_realtime_bad
                        }
                        {cond
                           ({>= $stars 5} realtime_great)
                           ({>= $stars 3} realtime_ok)
                           realtime_bad
                        }
                     }
                  }
               }
            }
         )
         (skills_mode {$this set recap FALSE} kDataUnhandled)
         (performance_mode kDataUnhandled)
         (multiplayer_mode kDataUnhandled)
         (skills_learn {$this set recap FALSE} kDataUnhandled)
         (skills_review
            {$this set recap TRUE}
            {$this set disable_picking FALSE}
            kDataUnhandled
         )
         (skills_freestyle_enter {$this set recap TRUE} kDataUnhandled)
         (skills_freestyle_exit kDataUnhandled)
         (move_interp
            ($a $b $r)
            {if $hud_panel
               {$hud_panel move_interp $a $b $r}
               {do
                  ($move {$hud_panel get_move {$hud_panel get move}})
                  {if $move
                     {$move set_frame {'*' $r {$move end_frame}}}
                  }
               }
            }
         )
         (update_move_keys
            ($safe)
            {do
               ($song_anim {$this song_anim})
               ($frame_measure 0)
               {if {&& $safe $song_anim {$this get_world}}
                  {$song_anim foreach_keyframe $this
                     (move)
                     $frame
                     $value
                     {set $frame_measure {/ {seconds_to_beat {/ $frame 30}} 4}}
                     {$song_anim replace_frame
                        {'*' 30 {beat_to_seconds {'*' 4 {int {'+' $frame_measure 0.5}}}}}
                     }
                  }
               }
            }
         )
         (toggle_driver
            {if_else $hamwardrobe
               {do
                  ($char {$hamwardrobe get_character})
                  ($drv {find_obj $char song.hdrv})
                  {char_debug
                     $drv
                     {find_obj $char song.hreg}
                     {find_obj $char left.ikfoot}
                     {find_obj $char right.ikfoot}
                  }
               }
               {notify "No song loaded yet, can't toggle driver"}
            }
         )
      )
   )
)
(HamWardrobe
   (description
      "Manager class that clothes characters and loads animations under different conditions"
   )
   (test_singleton)
   (editor)
   (types (ham))
)