{new WeightInputPanel
   weight_input_panel
   (file "weight_input.milo")
   (focus song_button_01.sbt)
   (show_back_button TRUE)
   (tertiary_token weightinput_toggle)
   (weight 0)
   (units pounds)
   (enter
      {right_hand.hbs set_provider weight_input_provider}
      {set [weight] 0}
      {$this update_weight}
   )
   (exit {shell_input set_back_label help_back})
   (SELECT_MSG
      {switch $component
         (song_button_01.sbt {$this select_digit $component})
         (song_button_02.sbt {$this select_digit $component})
         (song_button_03.sbt {$this select_digit $component})
         (song_button_04.sbt {$this select_digit $component})
         (tertiary.btn
            {switch [units]
               (pounds {set [units] kilograms})
               (kilograms {set [units] pounds})
            }
            {$this set_preferred_units [units]}
            {$this update_weight}
         )
         (back.btn
            {do
               ($screen {handle_ret ($this back_button)})
               {if {!= $screen kDataUnhandled}
                  {ui go_back_screen $screen}
               }
            }
         )
      }
   )
   (highlight_changed)
   (select_digit
      ($button)
      {do
         ($digit {right_hand.hbs list_index_for_button $button})
         {if_else {== $digit 0}
            {do
               {if {>= [weight] 10}
                  {switch [units]
                     (pounds {meta_performer set_fitness_pounds [weight]})
                     (kilograms {meta_performer set_fitness_kg [weight]})
                  }
                  {meta_performer set_fitness_mode TRUE}
                  {ui goto_screen startgame_screen}
               }
            }
            {do
               {set [weight] {'+' {mod {'*' [weight] 10} 1000} {- $digit 1}}}
               {$this update_weight}
            }
         }
      }
   )
   (back_button
      {if_else {== [weight] 0}
         startgame_screen
         {do
            {set [weight] {int {/ [weight] 10}}}
            {$this update_weight}
            {play_sfx left_low_select.cue}
            kDataUnhandled
         }
      }
   )
   (update_weight
      {weight_display.lbl set_int [weight]}
      {units.lbl set text_token [units]}
      {if_else {== [weight] 0}
         {shell_input set_back_label help_back}
         {shell_input set_back_label weight_delete}
      }
   )
   (BUTTON_DOWN_MSG
      {if
         {&&
            {== {{$this loaded_dir} get focus_component} song_button_01.sbt}
            {== $action kAction_Up}
         }
         {right_hand.hbs scroll_up}
      }
      {if
         {&&
            {== {{$this loaded_dir} get focus_component} song_button_04.sbt}
            {== $action kAction_Down}
         }
         {right_hand.hbs scroll_down}
      }
      kDataUnhandled
   )
}
{new HamScreen
   weight_input_screen
   (panels meta background_panel weight_input_panel)
   (focus weight_input_panel)
   (back {handle_ret (weight_input_panel back_button)})
}