#define PAUSE_PANEL_HANDLERS (
   (pause
      {game_panel set_paused TRUE}
      {game_screen set_showing FALSE}
      {if {&& $hamdirector {$hamdirector get player_freestyle}}
         {$hamdirector set hide_player_freestyle TRUE}
      }
   )
   (resume
      {if {&& $hamdirector {$hamdirector get player_freestyle}}
         {$hamdirector set hide_player_freestyle FALSE}
      }
      {set $game_unpause_on_enter TRUE}
      {ui pop_screen}
   )
)
{new Object
   pausecommand_resume
   (should_display TRUE)
   (enabled TRUE)
   (on_selected {pause_panel resume})
}
{new Object
   pausecommand_restart
   (should_display TRUE)
   (enabled TRUE)
   (on_selected
      {pause_panel set exit_destination exit_restart}
      {ui goto_screen confirm_quit_screen}
   )
}
{new Object
   pausecommand_practice
   (should_display
      {if_else {! {gamemode in_mode practice}}
         TRUE
         FALSE
      }
   )
   (enabled
      {if_else {acc_mgr is_unlockable_asset {meta_performer song}}
         FALSE
         TRUE
      }
   )
   (on_selected
      {gamemode set_mode practice}
      {{gamemode get ingame_seldiff_screen} set back_screen pause_screen}
      {ui goto_screen {gamemode get ingame_seldiff_screen}}
   )
}
{new Object
   pausecommand_change_difficulty
   (should_display TRUE)
   (enabled TRUE)
   (on_selected
      {{gamemode get ingame_seldiff_screen} set back_screen pause_screen}
      {ui goto_screen {gamemode get ingame_seldiff_screen}}
   )
}
{new Object
   pausecommand_perform
   (should_display
      {if_else {! {gamemode in_mode perform}}
         TRUE
         FALSE
      }
   )
   (enabled TRUE)
   (on_selected
      {gamemode set_mode perform}
      {{gamemode get ingame_seldiff_screen} set back_screen pause_screen}
      {ui goto_screen {gamemode get ingame_seldiff_screen}}
   )
}
{new Object
   pausecommand_multiplayer
   (should_display
      {if_else {! {gamemode in_mode multiplayer}}
         TRUE
         FALSE
      }
   )
   (enabled TRUE)
   (on_selected
      {gamemode set_mode multiplayer}
      {{gamemode get ingame_seldiff_screen} set back_screen pause_screen}
      {ui goto_screen {gamemode get ingame_seldiff_screen}}
   )
}
{new Object
   pausecommand_quit
   (should_display TRUE)
   (enabled TRUE)
   (on_selected
      {pause_panel set exit_destination exit_quit}
      {ui goto_screen confirm_quit_screen}
   )
}
{new HamPanel
   pause_panel
   (file pause.milo)
   (focus 1.btn)
   (button_count 0)
   (original_flip FALSE)
   (show_back_button TRUE)
   (show_back_controller_icon FALSE)
   (tertiary_token natal_troubleshooter)
   (exit_destination exit_quit)
   (pause_buttons (1.btn 2.btn 3.btn 4.btn 5.btn 6.btn))
   (pause_commands
      (pausecommand_resume
         pausecommand_practice
         pausecommand_perform
         pausecommand_multiplayer
         pausecommand_change_difficulty
         pausecommand_restart
         pausecommand_quit
      )
   )
   (active_commands ())
   (chose_quit FALSE)
   PAUSE_PANEL_HANDLERS
   (enter
      {set [chose_quit] FALSE}
      {set [save_selected_index] FALSE}
      {$this pause}
      {unless {ui went_back}
         {script_task kTaskUISeconds (delay 2.0e-2) (script {play_sfx pause.cue})}
      }
      {gamemode set_mode {meta_performer last_played_mode}}
      {$this set_up_buttons}
      {$this update_skeleton_status}
      {shell_input add_sink $this (update_skeleton_status)}
      {shell_input set_back_label
         {if_else {shell_input in_controller_mode}
            {symbol ""}
            natal_guide
         }
      }
      {right_hand.hbs restart_swipe_loop}
      {{helpbar find left_hand.hbs} restart_swipe_loop}
      kDataUnhandled
   )
   (controller_mode_entered {shell_input set_back_label {symbol ""}})
   (controller_mode_exited {shell_input set_back_label natal_guide})
   (end_game
      ($result)
      {unless [chose_quit]
         {ui pop_screen}
      }
   )
   (exit
      {if {exists game}
         {game never_allow_input FALSE}
      }
      {shell_input remove_sink $this}
      {shell_input set_back_label {symbol ""}}
   )
   (update_skeleton_status
      {if_else {'||' {shell_input has_skeleton} {! {gesture_mgr pause_on_skeleton_loss}}}
         {do
            {$this enable 1.btn}
            {hide_lost_skel.trig trigger}
            {shell_input update_button_zones}
         }
         {do
            {$this disable 1.btn}
            {show_lost_skel.trig trigger}
            {shell_input update_button_zones}
         }
      }
   )
   (SCROLL_MSG {$this on_slider_change $component})
   (SELECT_MSG
      {switch $component
         (back.btn {gesture_mgr show_gesture_guide})
         (tertiary.btn {gesture_mgr show_gesture_troubleshooter})
         {find_elem [pause_buttons] $component $ix_button}
         {{elem [active_commands] $ix_button} on_selected}
      }
   )
   (SPEECH_RECO_MSG
      {if {&& {== $token resume} {>= $confidence 0.8}}
         {$this resume}
      }
   )
   (set_up_buttons
      {set [button_count] 0}
      {resize [active_commands] 0}
      {foreach $button [pause_buttons]
         {$this disable $button}
      }
      {foreach $command [pause_commands]
         {if {$command should_display}
            {if {$command enabled}
               {$this enable {elem [pause_buttons] [button_count]}}
            }
            {{elem [pause_buttons] [button_count]} set text_token $command}
            {push_back [active_commands] $command}
            {'++' [button_count]}
         }
      }
      {right_hand.hbs set max_display_buttons [button_count]}
      {shell_input update_button_zones}
   )
   (on_restart {game_panel end_game kRestart})
   (on_quit
      {set [chose_quit] TRUE}
      {switch [exit_destination]
         (exit_quit
            {game_panel end_game kQuit}
            {ui pop_screen meta_loading_pause_new_song_screen}
         )
         (exit_restart {$this on_restart})
      }
   )
}
{new HamScreen
   pause_screen
   (panels background_panel pause_panel)
   (focus pause_panel)
   (scroll_sfx FALSE)
}
#define CONFIRM_QUIT_HANDLERS (
   (panels background_panel dialog_panel)
   (focus dialog_panel)
   (helpbar ((confirm helpbar_confirm)))
   (is_restart {== {pause_panel get exit_destination} exit_restart})
)
{new HamScreen
   confirm_quit_screen
   CONFIRM_QUIT_HANDLERS
   (enter
      {if_else {$this is_restart}
         {dialog_panel set_yesno confirm_restart}
         {dialog_panel set_yesno confirm_quit}
      }
   )
   (handle_select_msg
      ($component)
      {switch $component
         (opt1.btn {pause_panel on_quit})
         (opt2.btn
            {set $suppress_back_sound TRUE}
            {ui go_back_screen pause_screen}
            {set $suppress_back_sound FALSE}
         )
      }
   )
   (SELECT_MSG
      {if {'||' {== $component opt2.btn} {! {$this is_restart}}}
         {$this handle_select_msg $component}
      }
   )
   (SELECT_DONE_MSG
      {if {&& {== $component opt1.btn} {$this is_restart}}
         {$this handle_select_msg $component}
      }
   )
}