#define PAUSE_SCREEN_HANDLERS (
   (pause_if_local
      {{$this find pause_title.lbl} set_showing FALSE}
      {if {== {session mode} kNetLocal}
         {game set_paused TRUE}
         {{$this find pause_title.lbl} set_showing TRUE}
      }
   )
   (resume
      {if {== {session mode} kNetLocal}
         {set $game_unpause_on_enter TRUE}
      }
      {ui pop_screen}
   )
   (hide
      {set $game_pause_on_enter TRUE}
      {ui pop_screen}
   )
)
{new UIPanel pause_bg_panel (file "pause_bg.milo")}
{new UIPanel
   pause_panel
   #ifdef HX_XBOX
   (file pause.milo)
   #else
   (file pause_og.milo)
   #endif
   (drum_pad_swapped TRUE)
   (button_count 0)
   (original_flip FALSE)
   (original_hud kVocalStyleScrolling)
   (resync_on_exit TRUE)
   (exit_destination exit_quit)
   (pause_buttons (0.btn 1.btn 2.btn 3.btn 4.btn 5.btn 6.btn))
   (check_icons
      (check00.mesh
         check01.mesh
         check02.mesh
         check03.mesh
         check04.mesh
         check05.mesh
         check06.mesh
      )
   )
   (check_boxes
      (check_bg.mesh
         check_bg01.mesh
         check_bg02.mesh
         check_bg03.mesh
         check_bg04.mesh
         check_bg05.mesh
         check_bg06.mesh
      )
   )
   (flip_check_index 0)
   (metronome_check_index 0)
   (hud_check_index 0)
   (pause_commands
      (pause_resume
         pause_restart
         lefty_flip
         vocal_hud
         vocal_options
         practice_new_section
         #ifdef HX_EE
         practice_change_speed
         #endif
         new_song
         return_world_map
         choose_new_challenge
         band_members
         forfeit
         metronome
         pause_quit
      )
   )
   (active_commands ())
   (cancel_pause FALSE)
   (leaving_pause FALSE)
   PAUSE_SCREEN_HANDLERS
   (enter
      {set [leaving_pause] FALSE}
      {set [exit_destination] exit_new_song}
      {set [resync_on_exit] TRUE}
      {if {! {game is_game_over}}
         {$this pause_if_local}
      }
      {{game get_player [player_number]} enable_swings FALSE}
      {beatmatch never_allow_input TRUE}
      {do
         ($player {beatmatch player [player_number]})
         {gamertag.lbl set_localized {get_player_name $player}}
         {instrument.lbl set_localized {get_player_icon $player}}
      }
      {helpbar set limit_to_player_num [player_number]}
      {$this set_up_buttons}
      {session add_sink $this remote_player_left_msg}
      {stagekit_pause TRUE}
      {set [drum_pad_swapped] {game get_drumpad_is_dpad}}
      {game set_drumpad_is_dpad TRUE}
      kDataUnhandled
   )
   (TRANSITION_COMPLETE_MSG
      {session add_sink $this end_game_msg}
      {if [cancel_pause]
         {$this hide}
      }
      {if {!= {session state} kNetInGame}
         {ui pop_screen}
      }
   )
   (END_GAME_MSG {ui pop_screen})
   (exit
      {set [cancel_pause] FALSE}
      {game set_drumpad_is_dpad [drum_pad_swapped]}
      {session remove_sink $this remote_player_left_msg}
      {{game get_player [player_number]} enable_swings TRUE}
      {beatmatch never_allow_input FALSE}
      {if
         {&&
            {!= [player_number] -1}
            {!=
               [original_flip]
               {{profile_mgr get_char_options_from_player [player_number]} get_lefty}
            }
         }
         {{game get_player [player_number]} update_lefty_flip}
      }
      {if
         {&&
            {!= [player_number] -1}
            {!=
               [original_hud]
               {{profile_mgr
                     get_char_options_from_player
                     [player_number]} get_vocal_style

               }
            }
         }
         {{game get_player [player_number]} update_vocal_style}
      }
      {session remove_sink $this end_game_msg}
      {if [resync_on_exit]
         {band_ui_sink set_net_sync TRUE}
      }
      #ifdef HX_WII
      {beatmatch wait_for_alt_disc_read}
      #endif
      {stagekit_pause FALSE}
   )
   (BUTTON_DOWN_MSG
      {if_else {== [player_number] $player_num}
         {do
            {if {'||' {== $button kPad_Start} {== $button kPad_Tri}}
               {set [exit_destination] exit_new_song}
               {$this resume}
            }
            kDataUnhandled
         }
         TRUE
      }
   )
   (BUTTON_UP_MSG
      {if_else {== [player_number] $player_num}
         kDataUnhandled
         TRUE
      }
   )
   (REMOTE_PLAYER_LEFT_MSG {$this set_up_buttons})
   (FOCUS_MSG {$this update_pause_helpbar {$new_focus name}})
   (update_pause_helpbar
      ($button)
      {find_elem [pause_buttons] $button $ix_button}
      {switch {elem [active_commands] $ix_button}
         (lefty_flip)
         (vocal_hud)
         {helpbar set_config
            (
               (cancel helpbar_back)
               (confirm helpbar_select)
            )
         }
      }
   )
   (SELECT_MSG
      {set [exit_destination] exit_new_song}
      {find_elem [pause_buttons] $component $ix_button}
      {switch {elem [active_commands] $ix_button}
         (pause_resume {$this resume})
         (pause_restart
            {set [exit_destination] exit_restart}
            {if_else {== {gamemode get confirm_restart_screen} ''}
               {$this on_restart}
               {ui goto_screen {gamemode get confirm_restart_screen}}
            }
         )
         (lefty_flip
            {if_else {!= vocals {{game get_player_config [player_number]} get_track_sym}}
               {do
                  ($options {profile_mgr get_char_options_from_player [player_number]})
                  ($lefty_flipped {$options get_lefty})
                  {$options set_lefty {! $lefty_flipped}}
                  {$this update_lefty_check}
               }
               kDataUnhandled
            }
         )
         (vocal_hud
            {if_else {== vocals {{game get_player_config [player_number]} get_track_sym}}
               {do
                  ($options {profile_mgr get_char_options_from_player [player_number]})
                  ($hud_style {$options get_vocal_style})
                  {$options set_vocal_style {! $hud_style}}
                  {$this update_vocal_style}
               }
               kDataUnhandled
            }
         )
         (vocal_options
            {if_else {== vocals {{game get_player_config [player_number]} get_track_sym}}
               {do
                  {set [resync_on_exit] FALSE}
                  {pause_vocal_options_panel set player_num [player_number]}
                  {ui goto_screen pause_vocal_options_screen}
               }
               kDataUnhandled
            }
         )
         (practice_new_section
            {set [exit_destination] exit_new_section}
            {$this on_quit}
         )
         (
            (new_song return_world_map choose_new_challenge choose_new_battle)
            {set [exit_destination] exit_new_song}
            {if_else {'||' {gamemode get is_practice} {gamemode get is_jukebox}}
               {$this on_quit}
               {ui goto_screen {gamemode get confirm_quit_screen}}
            }
         )
         #ifdef HX_EE
         (practice_change_speed
            {set [exit_destination] exit_change_speed}
            {$this on_quit}
         )
         #endif
         (
            (new_song gig_guide)
            {set [exit_destination] exit_new_song}
            {if_else {gamemode get is_practice}
               {$this on_quit}
               {ui goto_screen {gamemode get confirm_quit_screen}}
            }
         )
         (band_members
            {set [exit_destination] exit_change_band}
            {ui goto_screen {gamemode get confirm_quit_screen}}
         )
         (forfeit
            {set [exit_destination] exit_forfeit}
            {set [resync_on_exit] FALSE}
            {ui goto_screen {gamemode get confirm_quit_screen}}
         )
         (metronome
            {set $met {! {{gamemode get game_panel} get_metronome}}}
            {{gamemode get game_panel} script_set_metronome $met}
            {$this update_metronome_check}
         )
         (pause_quit
            {set [exit_destination] exit_quit}
            {set [resync_on_exit] FALSE}
            {if_else {'||' {gamemode get is_drum_trainer} {gamemode get is_practice}}
               {$this on_quit}
               {ui goto_screen {gamemode get confirm_quit_screen}}
            }
         )
         kDataUnhandled
      }
   )
   (set_up_buttons
      {set [button_count] 0}
      {resize [active_commands] 0}
      {do
         ($previous "")
         {foreach $button [pause_buttons]
            {$button set_showing FALSE}
            {if {!= $previous ""}
               {$previous set nav_down $button}
            }
            {set $previous $button}
         }
      }
      {foreach $check [check_icons]
         {$check set_showing FALSE}
      }
      {foreach $check [check_boxes]
         {$check set_showing FALSE}
      }
      {do
         ($added)
         {foreach $command [pause_commands]
            {set $added FALSE}
            {switch $command
               (pause_resume {set $added TRUE})
               (pause_restart
                  {if {! {gamemode get is_drum_trainer}}
                     {if
                        {'||'
                           {gamemode get local_network}
                           {&& {is_leader_local} {== {gamemode get player_arrangement} kArrangeBand}}
                        }
                        {set $added TRUE}
                        {if {< {session num_players} {gamemode get min_players}}
                           {$this disable {elem [pause_buttons] [button_count]}}
                        }
                     }
                  }
               )
               (lefty_flip
                  {if {!= vocals {{game get_player_config [player_number]} get_track_sym}}
                     {set $added TRUE}
                     {set [flip_check_index] [button_count]}
                     {set [original_flip]
                        {{profile_mgr get_char_options_from_player [player_number]} get_lefty}
                     }
                     {$this update_lefty_check}
                     {helpbar set_config
                        (
                           (cancel helpbar_back)
                           (confirm helpbar_select)
                        )
                     }
                  }
               )
               (vocal_hud
                  {if {== vocals {{game get_player_config [player_number]} get_track_sym}}
                     {set $added TRUE}
                     {set [hud_check_index] [button_count]}
                     {set [original_hud]
                        {{profile_mgr
                              get_char_options_from_player
                              [player_number]} get_vocal_style

                        }
                     }
                     {$this update_vocal_style}
                  }
               )
               (vocal_options
                  {if {== vocals {{game get_player_config [player_number]} get_track_sym}}
                     {set $added TRUE}
                  }
               )
               (practice_new_section
                  {if
                     {&&
                        {gamemode get is_practice}
                        {!= vocals {{game get_player_config [player_number]} get_track_sym}}
                        #ifdef HX_EE
                        {!= {gamecfg get practice_speed} 0}
                        #endif
                     }
                     {set $added TRUE}
                  }
               )
               #ifdef HX_EE
               (practice_change_speed
                  {if
                     {&&
                        {gamemode get is_practice}
                        {!= {game get_instrument_from_controller {game get leader_num}} vocals}
                     }
                     {set $added TRUE}
                  }
               )
               #endif
               (new_song
                  {if
                     {&&
                        {!= {gamemode get pause_new_song_screen} ''}
                        {! {gamemode is_bwt}}
                        {! {gamemode is_tour_challenge}}
                        {! {gamemode is_solo_tour}}
                        {'||' {gamemode get local_network} {is_leader_local}}
                     }
                     {set $added TRUE}
                     {if {< {session num_players} {gamemode get min_players}}
                        {$this disable {elem [pause_buttons] [button_count]}}
                     }
                  }
               )
               (gig_guide
                  {if
                     {&&
                        {'||' {gamemode get local_network} {is_leader_local}}
                        {'||' {gamemode is_bwt} {gamemode is_solo_tour}}
                     }
                     {set $added TRUE}
                     {if {< {session num_players} {gamemode get min_players}}
                        {$this disable {elem [pause_buttons] [button_count]}}
                     }
                  }
               )
               (return_world_map
                  {if
                     {&&
                        {'||' {gamemode get local_network} {is_leader_local}}
                        {gamemode is_tour}
                        {do
                           ($event_type {{tour performer} get_event_type})
                           {if_else {== $command return_world_map}
                              {== $event_type kTourEventWorld}
                              {== $event_type kTourEventChallenge}
                           }
                        }
                     }
                     {set $added TRUE}
                     {if {< {session num_players} {gamemode get min_players}}
                        {$this disable {elem [pause_buttons] [button_count]}}
                     }
                  }
               )
               (choose_new_challenge
                  {if
                     {&&
                        {'||' {gamemode get local_network} {is_leader_local}}
                        {gamemode is_tour_challenge}
                     }
                     {set $added TRUE}
                     {if {< {session num_players} {gamemode get min_players}}
                        {$this disable {elem [pause_buttons] [button_count]}}
                     }
                  }
               )
               (band_members
                  {if
                     {&&
                        {! {gamemode is_solo}}
                        {== {gamemode get player_arrangement} kArrangeBand}
                        {'||' {gamemode get local_network} {is_leader_local}}
                     }
                     {set $added TRUE}
                  }
               )
               (forfeit
                  {if
                     {&&
                        {gamemode get ranked}
                        {== {gamemode get player_arrangement} kArrangeHth}
                        {! {gamemode get local_network}}
                     }
                     {set $added TRUE}
                  }
               )
               (metronome
                  {if {gamemode get is_drum_trainer}
                     {set $added TRUE}
                     {set [metronome_check_index] [button_count]}
                     {set [original_metronome] {{gamemode get game_panel} get metronome}}
                     {$this update_metronome_check}
                  }
               )
               (pause_quit
                  {if {gamemode get show_pause_quit}
                     {set $added TRUE}
                  }
               )
            }
            {if $added
               {{elem [pause_buttons] [button_count]} set_showing TRUE}
               {{elem [pause_buttons] [button_count]} set text_token $command}
               {push_back [active_commands] $command}
               {'++' [button_count]}
            }
         }
      }
      {{elem [pause_buttons] {- [button_count] 1}} set nav_down ''}
      {$this set_focus 0.btn}
   )
   (update_lefty_check
      {{elem
            [check_icons]
            [flip_check_index]} set_showing
         {{profile_mgr get_char_options_from_player [player_number]} get_lefty}
      }
      {{elem [check_boxes] [flip_check_index]} set_showing TRUE}
   )
   (update_metronome_check
      {do
         {{elem
               [check_icons]
               [metronome_check_index]} set_showing
            {{gamemode get game_panel} get_metronome}
         }
         {{elem [check_boxes] [metronome_check_index]} set_showing TRUE}
      }
   )
   (update_vocal_style
      {{elem
            [check_icons]
            [hud_check_index]} set_showing
         {!
            {{profile_mgr
                  get_char_options_from_player
                  [player_number]} get_vocal_style

            }
         }
      }
      {{elem [check_boxes] [hud_check_index]} set_showing TRUE}
   )
   (on_restart
      {set [leaving_pause] TRUE}
      {synth stop_all_sfx}
      {do
         ($feedback {{game get_player [player_number]} player_feedback})
         {if $feedback
            {$feedback reset}
         }
      }
      {gamemode on_pause_restart}
   )
   (on_quit
      {set [leaving_pause] TRUE}
      {switch [exit_destination]
         (exit_change_band
            {if {! {is_leader_local}}
               {notify "WARNING: change band triggered by non-leader"}
            }
            {session end_game kQuit}
            {band_ui_sink sync_screen meta_loading_changemembers_screen 1}
         )
         (exit_forfeit {ui goto_screen meta_loading_matchmaking_forfeit_screen})
         #ifndef HX_XBOX
         (exit_change_speed
            {session end_game kQuit}
            {band_ui_sink sync_screen meta_loading_pause_change_speed_screen 1}
         )
         #endif
         (exit_new_section
            {session end_game kQuit}
            {band_ui_sink sync_screen meta_loading_pause_new_section_screen 1}
         )
         (exit_new_song
            {session end_game kQuit}
            {band_ui_sink sync_screen meta_loading_pause_new_song_screen 1}
         )
         (exit_quit
            {if_else {gamemode get is_drum_trainer}
               {ui goto_screen meta_loading_trainer_quit}
               {ui goto_screen meta_loading_quit_early_screen}
            }
         )
         (exit_restart {$this on_restart})
      }
   )
   (JOYPAD_CONNECT_MSG
      {if {&& {! $connected} {== $player_num [player_number]} {! [leaving_pause]}}
         {$this hide}
      }
   )
}
{new BandScreen
   restart_loading_screen
   (panels meta_loading)
   (restart_song
      {synth stop_all_sfx}
      {gamemode on_pause_restart}
   )
   (TRANSITION_COMPLETE_MSG
      {script_task kTaskUISeconds (delay 2) (script {$this restart_song})}
   )
}
{new BandScreen
   pause_screen
   (panels pause_bg_panel pause_panel)
   (focus pause_panel)
   (helpbar
      (
         (cancel helpbar_back)
         (confirm helpbar_select)
      )
   )
}
#define CONFIRM_QUIT_HANDLERS (
   (panels pause_bg_panel pause_panel dialog_panel)
   (focus dialog_panel)
   (helpbar ((confirm helpbar_select)))
)
#define QUIT_DIALOG_SET_UP_BUTTONS (
   (set_up_buttons
      {if {< {session num_players} {gamemode get min_players}}
         {{dialog_panel find no.btn} set_state kDisabled}
         {dialog_panel set_focus {dialog_panel find yes.btn}}
      }
   )
)
{new BandScreen
   confirm_quit_screen
   CONFIRM_QUIT_HANDLERS
   (is_finished FALSE)
   (enter
      {set [is_finished] FALSE}
      {dialog_panel set_yesno
         {localize
            {cond
               ({gamemode is_tour_challenge} confirm_quit_tour_challenge)
               (TRUE confirm_quit)
            }
         }
         no.btn
      }
      {$this set_up_buttons}
      {session add_sink $this remote_player_left_msg}
   )
   (exit {session remove_sink $this remote_player_left_msg})
   (REMOTE_PLAYER_LEFT_MSG {$this set_up_buttons})
   QUIT_DIALOG_SET_UP_BUTTONS
   (SELECT_MSG
      {if {== $player_num {pause_panel get player_number}}
         {set [is_finished] TRUE}
         {switch $component
            (yes.btn
               {if {exists crowd_audio}
                  {crowd_audio turn_off}
               }
               {if {&& {gamemode is_tour_challenge} {profile_mgr get_autosave_enabled}}
                  {profile_mgr set_dirty TRUE}
                  {meta_loading_pause_new_song_screen set autosave TRUE}
               }
               {pause_panel on_quit}
            )
            (no.btn {ui goto_screen pause_screen})
         }
      }
   )
   (JOYPAD_CONNECT_MSG
      {if {&& {! [is_finished]} {== $player_num {pause_panel get player_number}}}
         {pause_panel set cancel_pause TRUE}
         {ui goto_screen pause_screen}
      }
   )
   (BUTTON_DOWN_MSG
      {if_else {== $player_num {pause_panel get player_number}}
         {do
            {set [is_finished] TRUE}
            kDataUnhandled
         }
         TRUE
      }
   )
   (BUTTON_UP_MSG
      {if_else {== $player_num {pause_panel get player_number}}
         {do
            {set [is_finished] FALSE}
            kDataUnhandled
         }
         TRUE
      }
   )
}
#define TOUR_BAND_CONFIRM_DIALOG (
   {dialog_panel set_yesno
      {if_else {{tour performer} fans_lost_on_fail}
         {sprintf
            {localize tour_band_lose_fans_warning}
            {localize_separated_int {{tour performer} fans_lost_on_fail}}
         }
         {localize_token confirm_quit}
      }
      no.btn
   }
)
{new BandScreen
   tour_band_quit_screen
   CONFIRM_QUIT_HANDLERS
   (enter
      TOUR_BAND_CONFIRM_DIALOG
      {dialog_panel set_title {localize_token tour_abandon_gig}}
      {$this set_up_buttons}
      {session add_sink $this remote_player_left_msg}
   )
   (exit {session remove_sink $this remote_player_left_msg})
   (REMOTE_PLAYER_LEFT_MSG {$this set_up_buttons})
   QUIT_DIALOG_SET_UP_BUTTONS
   (SELECT_MSG
      {if {== $player_num {pause_panel get player_number}}
         {switch $component
            (yes.btn
               {{tour performer} lose_song}
               {pause_panel on_quit}
            )
            (no.btn {ui goto_screen pause_screen})
         }
      }
   )
}
{new BandScreen
   tour_band_restart_screen
   (panels pause_panel dialog_panel)
   (focus dialog_panel)
   (helpbar ((confirm helpbar_select)))
   (enter
      TOUR_BAND_CONFIRM_DIALOG
      {dialog_panel set_title {localize_token tour_restart_song}}
      {$this set_up_buttons}
      {session add_sink $this remote_player_left_msg}
   )
   (exit {session remove_sink $this remote_player_left_msg})
   (REMOTE_PLAYER_LEFT_MSG {$this set_up_buttons})
   QUIT_DIALOG_SET_UP_BUTTONS
   (SELECT_MSG
      {if {== $player_num {pause_panel get player_number}}
         {switch $component
            (yes.btn
               {{tour performer} lose_song}
               {pause_panel on_restart}
            )
            (no.btn {ui goto_screen pause_screen})
         }
      }
   )
}
{new BandScreen
   solo_tour_restart_screen
   (panels pause_bg_panel pause_panel dialog_panel)
   (focus dialog_panel)
   (helpbar ((confirm helpbar_select)))
   (enter
      {dialog_panel set_yesno {localize confirm_quit} no.btn}
      {$this set_up_buttons}
      {session add_sink $this remote_player_left_msg}
   )
   (exit {session remove_sink $this remote_player_left_msg})
   (REMOTE_PLAYER_LEFT_MSG {$this set_up_buttons})
   QUIT_DIALOG_SET_UP_BUTTONS
   (SELECT_MSG
      {if {== $player_num {pause_panel get player_number}}
         {switch $component
            (yes.btn {pause_panel on_restart})
            (no.btn {ui goto_screen pause_screen})
         }
      }
   )
}
{new UIPanel
   pause_controller_background_panel
   (file pause_discon_background_og.milo)
}
{new UIPanel
   pause_controller_panel
   #ifdef HX_XBOX
   (file pause_controller.milo)
   #else
   (file pause_discon_og.milo)
   #endif
   PAUSE_SCREEN_HANDLERS
   (focus pause_quit.btn)
   (enter
      {platform_mgr set_notify_ui_location kOSNotifyBottomCenter}
      {$this pause_if_local}
      {do
         {$this update_labels}
         {$this disable {$this find pause_resume.btn}}
      }
      {stagekit_pause TRUE}
   )
   (exit
      {platform_mgr set_notify_ui_location kOSNotifyTopRight}
      {band_ui_sink set_net_sync TRUE}
      {stagekit_pause FALSE}
      #ifdef HX_WII
      {beatmatch wait_for_alt_disc_read}
      #endif
   )
   QUIT_DIALOG_SET_UP_BUTTONS
   (BUTTON_DOWN_MSG
      {do
         {if {&& {! {game missing_controllers}} {== $button kPad_Start}}
            {$this resume}
         }
         kDataUnhandled
      }
   )
   (SELECT_MSG
      {switch $component
         (pause_resume.btn
            {if {game is_player_participating $player_num}
               {$this resume}
            }
         )
         (pause_quit.btn
            {if_else {gamemode get is_practice}
               {$this on_quit}
               {ui goto_screen confirm_quit_controllers_screen}
            }
         )
      }
   )
   (JOYPAD_CONNECT_MSG {$this on_joypad_change})
   (on_joypad_change
      {if_else {game missing_controllers}
         {do
            {$this update_labels}
            {$this disable {$this find pause_resume.btn}}
         }
         {do
            {$this set_focus {$this find pause_resume.btn}}
         }
      }
   )
   #ifdef HX_WII
   (poll
      {if {! {game missing_controllers}}
         {$this enable {$this find pause_resume.btn}}
      }
   )
   #endif
   (update_labels
      {do
         ($missing_controllers {game missing_controllers})
         ($who "")
         ($i 0)
         ($total 0)
         ($vocals FALSE)
         {foreach $j (1 2 4 8 16 32 64 128)
            {if {& $j $missing_controllers}
               {set $who
                  {if_else {== "" $who}
                     {set $who {{game get_player_config $i} get player_name}}
                     {sprintf
                        {localize controller_who}
                        $who
                        {{game get_player_config $i} get player_name}
                     }
                  }
               }
               {if {== {{game get_player_config $i} get_controller_type} kControllerVocals}
                  {set $vocals TRUE}
               }
               {'++' $total}
            }
            {'++' $i}
         }
         {if {== $total 1}
            {set $who {sprintf {localize controller_possessive} $who}}
         }
         {{$this find pause_controller_title.lbl} set text_token no_controller}
         #ifdef HX_WII
         {{$this find pause_controller_msg.lbl} set_localized
            {if_else $vocals
               {localize controller_loss_vocals_msg}
               {sprintf {localize controller_loss_msg} $who}
            }
         }
         #else
         {{$this find pause_controller_msg.lbl} set_localized
            {sprintf {localize controller_loss_msg} $who}
         }
         #endif
      }
   )
   (on_quit {ui goto_screen meta_loading_quit_early_screen})
}
{new BandScreen
   pause_controller_screen
   (panels pause_controller_background_panel pause_controller_panel)
   (focus pause_controller_panel)
   (helpbar ((confirm helpbar_continue)))
   (enter)
   (exit)
}
{new UIPanel
   pause_mics_panel
   #ifdef HX_XBOX
   (file pause_mics.milo)
   #else
   (file pause_discon_og.milo)
   #endif
   (resync_on_exit TRUE)
   PAUSE_SCREEN_HANDLERS
   (enter
      {set [resync_on_exit] TRUE}
      {$this pause_if_local}
      {$this set_focus {$this find pause_quit.btn}}
      {{$this find pause_controller_title.lbl} set text_token mics_changed_test}
      {{$this find pause_controller_msg.lbl} set text_token mics_changed_desc}
      {$this check_mics}
      {stagekit_pause TRUE}
   )
   (TRANSITION_COMPLETE_MSG
      {session add_sink $this end_game_msg}
      {if {!= {session state} kNetInGame}
         {ui pop_screen}
      }
      {$this check_mics}
   )
   (END_GAME_MSG {ui pop_screen})
   (exit
      {session remove_sink $this end_game_msg}
      {synth reset_mics_changed}
      {if [resync_on_exit]
         {band_ui_sink set_net_sync TRUE}
      }
      {stagekit_pause FALSE}
      #ifdef HX_WII
      {beatmatch wait_for_alt_disc_read}
      #endif
   )
   (allow_player
      ($player_num)
      {game is_player_participating $player_num}
   )
   (JOYPAD_CONNECT_MSG)
   (check_mics
      {do
         ($enable_resume TRUE)
         ($who "")
         {game foreach_local_player $p
            {do
               ($player_num {$p player_num})
               {if
                  {&&
                     {!= $player_num -1}
                     {game is_player_participating $player_num}
                     {== {{gamecfg get_player_config $player_num} get_track_sym} vocals}
                  }
                  {do
                     ($mic_num {joypad_get_players_padnum $player_num})
                     {if {&& {!= $mic_num -1} {! {synth is_mic_connected $mic_num}}}
                        {set $enable_resume FALSE}
                     }
                  }
               }
            }
         }
         #ifdef HX_WII
         {if_else {! {platform_mgr guide_showing}}
            {do
               {$this disable {$this find pause_resume.btn}}
               {$this disable {$this find pause_quit.btn}}
            }
            {$this set_focus {$this find pause_quit.btn}}
         }
         #else
         {$this disable {$this find pause_resume.btn}}
         {$this disable {$this find pause_quit.btn}}
         #endif
         {if_else $enable_resume
            {do
               {$this enable {$this find pause_resume.btn}}
               #ifdef HX_WII
               {if {! {platform_mgr guide_showing}}
                  {$this disable {$this find pause_quit.btn}}
                  {$this set_focus {$this find pause_resume.btn}}
               }
               #else
               {$this disable {$this find pause_quit.btn}}
               {$this set_focus {$this find pause_resume.btn}}
               #endif
            }
            {do
               {$this disable {$this find pause_resume.btn}}
               #ifdef HX_WII
               {if {! {platform_mgr guide_showing}}
                  {$this set_focus {$this find pause_quit.btn}}
               }
               #else
               {$this set_focus {$this find pause_quit.btn}}
               #endif
            }
         }
         {$this enable {$this find pause_quit.btn}}
      }
   )
   (microphones_changed
      ($vocalists_mic_changed)
      {$this check_mics}
   )
   #ifdef HX_XBOX
   (poll
      {foreach_int $i 0 4
         {if {game is_player_participating $i}
            {{sprintf
                  "talk%02d.mnm"
                  $i} set_frame
               {if_else {synth is_mic_user_talking $i}
                  1
                  0
               }
            }
         }
      }
   )
   #endif
   (SELECT_MSG
      {if {game is_player_participating $player_num}
         {switch $component
            (pause_resume.btn {$this resume})
            (pause_quit.btn
               {set [resync_on_exit] FALSE}
               {ui goto_screen confirm_quit_mics_screen}
            )
            kDataUnhandled
         }
      }
   )
   (on_quit {ui goto_screen meta_loading_quit_early_screen})
}
{new BandScreen
   pause_mics_screen
   (panels pause_controller_background_panel pause_mics_panel)
   (focus pause_mics_panel)
   (helpbar ((confirm helpbar_select)))
   (enter)
}
{new BandScreen
   confirm_quit_mics_screen
   (panels pause_controller_background_panel pause_mics_panel dialog_panel)
   (focus dialog_panel)
   (enter
      {dialog_panel set_yesno {localize confirm_quit} no.btn}
      {$this set_up_buttons}
      {session add_sink $this remote_player_left_msg}
   )
   (exit {session remove_sink $this remote_player_left_msg})
   (microphones_changed
      ($vocalists_mic_changed)
      {pause_mics_panel microphones_changed $vocalists_mic_changed}
   )
   (REMOTE_PLAYER_LEFT_MSG {$this set_up_buttons})
   QUIT_DIALOG_SET_UP_BUTTONS
   (SELECT_MSG
      {switch $component
         (yes.btn {pause_mics_panel on_quit})
         (no.btn {ui goto_screen pause_mics_screen})
      }
   )
}
{new BandScreen
   confirm_quit_controllers_screen
   (panels
      pause_controller_background_panel
      pause_controller_panel
      dialog_panel
   )
   (focus dialog_panel)
   (helpbar ((confirm helpbar_select)))
   (enter
      {dialog_panel set_yesno {localize confirm_quit} no.btn}
      {$this set_up_buttons}
      {session add_sink $this remote_player_left_msg}
   )
   (exit {session remove_sink $this remote_player_left_msg})
   (REMOTE_PLAYER_LEFT_MSG {$this set_up_buttons})
   QUIT_DIALOG_SET_UP_BUTTONS
   (SELECT_MSG
      {switch $component
         (yes.btn {pause_controller_panel on_quit})
         (no.btn {ui goto_screen pause_controller_screen})
      }
   )
   (JOYPAD_CONNECT_MSG {pause_controller_panel on_joypad_change})
}