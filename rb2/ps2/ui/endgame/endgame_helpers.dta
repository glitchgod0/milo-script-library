#define AWARDS_ARRAY_1 (())
#define AWARDS_ARRAY_2 (())
{func choose_award
   ($player $selected_awards)
   {set $available_awards AWARDS_ARRAY_1}
   {resize $available_awards 0}
   {set $temp_awards AWARDS_ARRAY_2}
   {resize $temp_awards 0}
   {do
      ($my_player {beatmatch player $player})
      ($track {$my_player instrument})
      {foreach $descriptor (#include performance_awards.dta)
         {if {eval {elem $descriptor 0}}
            {push_back $available_awards {elem $descriptor 1}}
         }
      }
      {if_else {== {size $available_awards} 0}
         {push_back $available_awards award_boring}
         {do
            {if {> {size $available_awards} 1}
               {do
                  {resize $temp_awards 0}
                  {foreach $available $available_awards
                     {if {! {find_elem $selected_awards $available}}
                        {push_back $temp_awards $available}
                     }
                  }
                  {if {> {size $temp_awards} 0}
                     {set $swapper $available_awards}
                     {set $available_awards $temp_awards}
                     {set $temp_awards $swapper}
                  }
               }
               {do
                  {resize $temp_awards 0}
                  {foreach $available $available_awards
                     {if {!= {{$my_player config} get previous_award} $available}
                        {push_back $temp_awards $available}
                     }
                  }
                  {if {> {size $temp_awards} 0}
                     {set $swapper $available_awards}
                     {set $available_awards $temp_awards}
                     {set $temp_awards $swapper}
                  }
               }
            }
         }
      }
      {if {<= {size $available_awards} 0}
         {notify "WARNING: no performance award available!"}
      }
      {elem $available_awards {mod {$my_player score} {size $available_awards}}}
   }
}
#define SELECTED_AWARDS (())
#define ENDGAME_PANEL_HANDLERS (
   LIMIT_TO_SESSION
   (BUTTON_DOWN_MSG
      {switch $button
         (kPad_X
            {synth play button_select}
            {if_else {tour performer}
               {if_else {gamemode is_tour_challenge}
                  {if_else {> {{tour performer} num_new_challenge_unlocks} 0}
                     {ui sync_screen tour_challenge_complete_screen 1}
                     {do
                        {{tour performer} complete_event}
                        {ui sync_screen meta_loading_continue_screen 1}
                     }
                  }
                  {ui sync_screen endgame_autosave_start_screen 1}
               }
               {do
                  {if_else
                     {&&
                        {! {gamemode get is_hth_arrangement}}
                        {modifier_mgr is_feature_enabled modifier_saving_feature}
                     }
                     {if_else {== {meta_performer num_songs} 1}
                        {do
                           {set $pcfg {game get_player_config {game get leader_num}}}
                           {if_else
                              {==
                                 {highscores is_high_score
                                    {meta_performer completed_song}
                                    {$pcfg get_track_sym}
                                    {{beatmatch main_performer} score}
                                 }
                                 0
                              }
                              {set $dest_screen complete_screen}
                              {set $dest_screen highscores_screen}
                           }
                        }
                        {do
                           {if_else {meta_performer has_high_score}
                              {set $dest_screen highscores_screen}
                              {set $dest_screen complete_screen}
                           }
                        }
                     }
                     {set $dest_screen complete_screen}
                  }
                  {ui sync_screen $dest_screen 1}
               }
            }
         )
         kDataUnhandled
      }
   )
   (set_results
      {heading.lbl set_localized
         {song_mgr song_name {meta_performer completed_song}}
      }
      {if {! {gamemode is_hth_arrangement}}
         {score.lbl set_showing TRUE}
         {stars.lbl set_showing TRUE}
         {score.lbl set_localized {fmt_score {{beatmatch main_performer} score}}}
         {stars.lbl set_localized {{beatmatch main_performer} star_rating}}
      }
      {if {gamemode is_hth_arrangement}
         {rank0_text.lbl set_showing FALSE}
         {rank1_text.lbl set_showing FALSE}
         {rank0.lbl set_localized ""}
         {rank1.lbl set_localized ""}
         {do
            ($slot0 {hth_track_panel band_to_slot 0})
            ($slot1 {hth_track_panel band_to_slot 1})
            ($lbl0 {sprintf "win%d.lbl" $slot0})
            ($lbl1 {sprintf "win%d.lbl" $slot1})
            ($trg0 {sprintf "player%d.trg" $slot0})
            ($trg1 {sprintf "player%d.trg" $slot1})
            ($win_token endgame_winner)
            {if {gamemode get separate_parts}
               {do
                  ($max_delta_points {beatmatch max_delta_points})
                  ($score0
                     {{gamecfg get_player {gamecfg get_player_num_from_slot_num $slot0}} score}
                  )
                  ($score1
                     {{gamecfg get_player {gamecfg get_player_num_from_slot_num $slot1}} score}
                  )
                  ($score_diff
                     {if_else {< $score0 $score1}
                        {- $score1 $score0}
                        {- $score0 $score1}
                     }
                  )
                  {set $win_token
                     {cond
                        ({< $score_diff {/ $max_delta_points 4}} hth_narrow_win)
                        ({< $score_diff {/ $max_delta_points 2}} hth_win)
                        ({< $score_diff $max_delta_points} hth_big_win)
                        (TRUE hth_huge_win)
                     }
                  }
               }
            }
            {switch {beatmatch get_result TRUE}
               (kWonTie
                  {$lbl0 set text_token {localize endgame_tie}}
                  {$lbl1 set text_token {localize endgame_tie}}
                  {$lbl0 set_showing TRUE}
                  {$lbl1 set_showing TRUE}
                  {$trg0 trigger}
                  {$trg1 trigger}
               )
               (kWonBand0
                  {$lbl0 set text_token $win_token}
                  {$lbl0 set_showing TRUE}
                  {$lbl1 set_showing FALSE}
                  {$trg0 trigger}
               )
               (kWonBand1
                  {$lbl1 set text_token $win_token}
                  {$lbl1 set_showing TRUE}
                  {$lbl0 set_showing FALSE}
                  {$trg1 trigger}
               )
            }
         }
      }
      {do
         {resize SELECTED_AWARDS 0}
         {foreach_int $slot 0 {players.set size (objects)}
            {do
               ($pxy {players.set get (objects $slot)})
               ($player {gamecfg get_player_num_from_slot_num $slot})
               {$pxy set_showing TRUE}
               {if_else {! {beatmatch is_active_player $player}}
                  {if_else {'||' {gamemode is_hth_arrangement} {gamemode is_solo}}
                     {$pxy set_showing FALSE}
                     {do
                        {{$pxy find player.grp} set_showing FALSE}
                        {if {$pxy exists no_player.grp}
                           {{$pxy find no_player.grp} set_showing TRUE}
                        }
                        {if {$pxy exists no_instrument.lbl}
                           {{$pxy find no_instrument.lbl} set_localized
                              {missing_slot_to_track_icon $slot}
                           }
                        }
                     }
                  }
                  {do
                     ($pcfg {game get_player_config $player})
                     {if {$pxy exists no_player.grp}
                        {{$pxy find no_player.grp} set_showing FALSE}
                     }
                     {{$pxy find player.grp} set_showing TRUE}
                     {if {$pxy exists player.lbl}
                        {{$pxy find player.lbl} set_localized {$pcfg intro_name}}
                     }
                     {{$pxy find instrument.lbl} set_localized
                        {{$pcfg get_char} track_icon {$pcfg get_track_sym}}
                     }
                     {if
                        {&&
                           {'||' {gamemode is_hth_arrangement} {gamemode is_solo}}
                           {gamemode is_hth_arrangement}
                        }
                        {{sprintf
                              "score%i.lbl"
                              $slot} set_localized
                           {if_else {gamemode separate_parts}
                              ""
                              {fmt_score {{$pcfg player} score}}
                           }
                        }
                     }
                     {if {$pxy exists noteshit.lbl}
                        {{$pxy find noteshit.lbl} set_localized
                           {sprintf
                              {localize endgame_player_noteshit_fmt}
                              {int {'*' 100 {{$pcfg player} notes_hit_fraction}}}
                           }
                        }
                     }
                     {if {$pxy exists streak.lbl}
                        {{$pxy find streak.lbl} set_localized
                           {if_else {== {{$pcfg player} instrument} vocals}
                              {sprintf {localize endgame_phrase_streak} {{$pcfg player} longest_streak}}
                              {sprintf {localize endgame_note_streak} {{$pcfg player} longest_streak}}
                           }
                        }
                     }
                     {if {$pxy exists difficulty.lbl}
                        {{$pxy find difficulty.lbl} set text_token {$pcfg get_difficulty_sym}}
                     }
                     {if {$pxy exists award.lbl}
                        {if_else {'||' {gamemode is_hth_arrangement} {gamemode is_solo}}
                           {{$pxy find award.lbl} set_showing FALSE}
                           {do
                              ($some_award {choose_award $player SELECTED_AWARDS})
                              {push_back SELECTED_AWARDS $some_award}
                              {$pcfg set previous_award $some_award}
                              {{$pxy find award.lbl} set_localized {localize $some_award}}
                              {{$pxy find award.lbl} set_showing TRUE}
                           }
                        }
                     }
                  }
               }
            }
         }
      }
   )
)
{new BandScreen
   endgame_waiting_complete_screen
   (helpbar ((min_height 0)))
   (enter
      {beatmatch foreach_active_player $p
         {$p finalize_stats}
      }
      {tour set win_sequence {meta_performer is_winning}}
      {meta_performer complete_song
         {{beatmatch main_performer} num_stars}
         {{beatmatch main_performer} score}
         {{beatmatch main_performer} accumulated_score}
         {{{beatmatch main_performer} band} longest_streak}
         {{beatmatch main_performer} total_stars}
      }
      {if {meta_performer is_last_song}
         {helpbar set_limit_to_player_num {game get leader_num}}
      }
      {ui goto_screen endgame_advance_screen}
   )
}
{new BandScreen
   endgame_advance_screen
   (helpbar ((min_height 0)))
   (enter
      {do
         ($screen {gamemode get endgame_screen})
         {meta_performer advance_song
            {{beatmatch main_performer} num_stars}
            {{beatmatch main_performer} score}
         }
         #ifndef _SHIP
         {if $cheat.win_event
            {while {! {meta_performer is_last_song}}
               {meta_performer complete_song
                  {{beatmatch main_performer} num_stars}
                  {{beatmatch main_performer} score}
                  {{beatmatch main_performer} accumulated_score}
                  {{{beatmatch main_performer} band} longest_streak}
                  {{beatmatch main_performer} total_stars}
               }
               {meta_performer advance_song
                  {{beatmatch main_performer} num_stars}
                  {{beatmatch main_performer} score}
               }
            }
            {set $cheat.win_event FALSE}
         }
         #endif
         {ui goto_screen $screen}
      }
   )
}
{new UIPanel
   endgame_background_panel
   (file "endgame_background.milo")
   (hide_overlay {overlay_hide.trg trigger})
   (show_overlay {overlay_show.trg trigger})
}
#include complete.dta
#define ENDGAME_SCREEN_HANDLERS (
   (helpbar
      {if_else {tour performer}
         {if_else
            {&&
               {gamemode is_tour_challenge}
               {== {{tour performer} num_new_challenge_unlocks} 0}
            }
            ((confirm tour_hb_challenge_return))
            ((confirm tour_hb_finishgig))
         }
         ((confirm endgame_hb_finishsong))
      }
   )
)