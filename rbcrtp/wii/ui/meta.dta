#define connected_controller_types (())
#define kHelpbarMaxButtons (4)
#define HELPBAR_HANDLERS (
   #ifdef HX_XBOX
   (file helpbar.milo)
   #else
   (file helpbar_og.milo)
   #endif
   (icons
      (
         (red1.lbl green1.lbl yellow1.lbl blue1.lbl)
         (red2.lbl green2.lbl yellow2.lbl blue2.lbl)
         (red3.lbl green3.lbl yellow3.lbl blue3.lbl)
      )
   )
   (actions
      (red_action.lbl green_action.lbl yellow_action.lbl blue_action.lbl)
   )
   (config ())
   (old_config ())
   (null_config ())
   (previous ())
   (buttons (Y A R S))
   (frets (r g y S))
   (pads (2 1 F S))
   (limit_to_player_num -1)
   (enter {$this set_mode_left})
   (hidden FALSE)
   (hide_helpbar
      {if (== [hidden] TRUE)
         {$this unhide_helpbar}
      }
      {set [old_config] [config]}
      {set [config] [null_config]}
      {$this refresh_display}
      {$this reset_icons}
      {set [hidden] TRUE}
   )
   (unhide_helpbar
      {if {&& {== [hidden] TRUE} {!= {size [old_config]} 0}}
         {set [config] [old_config]}
         {set [old_config] ()}
      }
      {set [old_config] ()}
      {set [hidden] FALSE}
      {$this reset_icons}
      {$this refresh_display}
   )
   (is_hidden [hidden])
   (reset_icons
      {foreach_int $i 0 {size [actions]}
         {{elem [actions] $i} set text_token ''}
         {{elem [actions] $i} set showing FALSE}
         {foreach $icon_array [icons]
            {{elem $icon_array $i} set showing FALSE}
         }
      }
   )
   (poll
      {all.grp set showing {! {ui in_transition}}}
      {if {&& {!= $this helpbar_dialog} {exists helpbar_dialog}}
         {helpbar_dialog poll}
      }
   )
   (set_mode_right
      {red_action.lbl set alignment kMiddleRight}
      {if_else {== {rnd aspect} kWidescreenAspect}
         {$this set_frame 3}
         {$this set_frame 2}
      }
   )
   (set_mode_left
      {red_action.lbl set alignment kMiddleLeft}
      {if_else {== {rnd aspect} kWidescreenAspect}
         {$this set_frame 1}
         {$this set_frame 0}
      }
   )
   (JOYPAD_CONNECT_MSG
      {$this reset_icons}
      {$this refresh_display}
      {if {&& {!= $this helpbar_dialog} {exists helpbar_dialog}}
         {helpbar_dialog reset_icons}
         {helpbar_dialog refresh_display}
      }
   )
   (use_all_connected FALSE)
   (set_use_all_controllers
      ($set)
      {set [use_all_connected] $set}
      {$this reset_icons}
      {$this refresh_display}
   )
   (update_controllers {$this JOYPAD_CONNECT_MSG 0})
   (update
      ($new_screen)
      {if $new_screen
         {if {== [hidden] TRUE}
            {$this unhide_helpbar}
         }
         {set [hidden] FALSE}
         {set [old_config] ()}
         {$this reset_icons}
         {if {$new_screen has (helpbar)}
            {$this reset_icons}
            {set [previous] [config]}
            {set [config] {$new_screen get helpbar}}
            {$this refresh_display}
         }
         {$this set_waiting
            {if_else {$new_screen has (helpbar_waiting)}
               {$new_screen get helpbar_waiting}
               FALSE
            }
         }
      }
   )
   (array_compare
      ($array1 $array2)
      {do
         ($equal {== {size $array1} {size $array2}})
         {if $equal
            {foreach_int $i 0 {size $array1}
               {if $equal
                  {set $equal {== {elem $array1 $i} {elem $array2 $i}}}
               }
            }
         }
         $equal
      }
   )
   (set_config
      ($new_config)
      {if
         {!
            {$this array_compare [config] $new_config}
         }
         {$this reset_icons}
      }
      {set [previous] [config]}
      {set [config] $new_config}
      {$this refresh_display}
   )
   (get_config [config])
   (get_previous [previous])
   (set_limit_to_player_num
      ($num)
      {$this reset_icons}
      {set [limit_to_player_num] $num}
      {$this refresh_display}
   )
   #ifdef HX_XBOX
   (refresh_display
      {foreach_int $i 0 {size [actions]}
         {{elem [actions] $i} set text_token ''}
         {{elem [actions] $i} set showing FALSE}
         {foreach $icon_array [icons]
            {{elem $icon_array $i} set showing FALSE}
         }
      }
      {resize connected_controller_types 0}
      {if_else {== [limit_to_player_num] -1}
         {do
            ($state
               {if_else {session num_players}
                  kGameControllerParticipating
                  kGameControllerAll
               }
            )
            {if {gamecfg is_instrument_connected guitar $state}
               {push_back connected_controller_types [frets]}
            }
            {if {gamecfg is_instrument_connected vocals $state}
               {push_back connected_controller_types [buttons]}
            }
            {if {gamecfg is_instrument_connected drum $state}
               {push_back connected_controller_types [pads]}
            }
            #ifndef HX_XBOX
            {if
               {&&
                  {== {size connected_controller_types} 0}
                  {!= {gamecfg get leader_num} -1}
               }
               {switch {gamecfg get_instrument_from_controller {gamecfg get leader_num}}
                  (guitar {push_back connected_controller_types [frets]})
                  (vocals {push_back connected_controller_types [buttons]})
                  (drum {push_back connected_controller_types [pads]})
               }
            }
            #endif
         }
         {switch {gamecfg get_instrument_from_controller [limit_to_player_num]}
            (guitar {push_back connected_controller_types [frets]})
            (vocals {push_back connected_controller_types [buttons]})
            (drum {push_back connected_controller_types [pads]})
         }
      }
      {if [config]
         {foreach_int $i 0 {size [config]}
            {if_else {&& {< $i 2} {platform_mgr is_enter_cancel_swapped}}
               {set $x {- 1 $i}}
               {set $x $i}
            }
            {if {&& {!= '' {elem [config] $i}} {!= 0 {size connected_controller_types}}}
               {{elem [actions] $i} set text_token {elem [config] $i}}
               {{elem [actions] $i} set showing TRUE}
               {foreach_int $j 0 {size connected_controller_types}
                  {{elem
                        {elem
                           [icons]
                           $j}
                        $i} set
                     text_token
                     {elem {elem connected_controller_types $j} $x}
                  }
                  {{elem {elem [icons] $j} $i} set showing TRUE}
               }
            }
         }
      }
   )
   #else
   (refresh_display
      {if {== [hidden] FALSE}
         {if_else {== {rnd aspect} kWidescreenAspect}
            {do
               {widescreen_left.tnm set_frame 1}
               {widescreen_right.tnm set_frame 1}
            }
            {do
               {widescreen_left.tnm set_frame 0}
               {widescreen_right.tnm set_frame 0}
            }
         }
         {set $frets_used FALSE}
         {set $buttons_used FALSE}
         {set $pads_used FALSE}
         {resize connected_controller_types 0}
         {if_else {== [limit_to_player_num] -1}
            {do
               ($state
                  {if_else {&& {session num_players} {== [use_all_connected] FALSE}}
                     kGameControllerParticipating
                     kGameControllerAll
                  }
               )
               {foreach_int $player 0 8
                  {if
                     {&&
                        {!= {game get_player_config $player} NULL}
                        {'||' {&& $state {gamecfg is_player_participating $player}} {== $state 0}}
                     }
                     {do
                        {switch {gamecfg get_instrument_from_controller $player}
                           (guitar
                              {if {! $frets_used}
                                 {do
                                    {push_back connected_controller_types [frets]}
                                    {set $frets_used TRUE}
                                 }
                              }
                           )
                           (vocals
                              {if {! $buttons_used}
                                 {do
                                    {push_back connected_controller_types [buttons]}
                                    {set $buttons_used TRUE}
                                 }
                              }
                           )
                           (drum
                              {if {! $pads_used}
                                 {do
                                    {push_back connected_controller_types [pads]}
                                    {set $pads_used TRUE}
                                 }
                              }
                           )
                        }
                     }
                  }
               }
            }
            {do
               {switch {gamecfg get_instrument_from_controller [limit_to_player_num]}
                  (guitar {push_back connected_controller_types [frets]})
                  (vocals {push_back connected_controller_types [buttons]})
                  (drum {push_back connected_controller_types [pads]})
               }
            }
         }
         {if
            {&&
               {== {size connected_controller_types} 0}
               {!= {gamecfg get leader_num} -1}
            }
            {switch {gamecfg get_instrument_from_controller {gamecfg get leader_num}}
               (guitar {push_back connected_controller_types [frets]})
               (vocals {push_back connected_controller_types [buttons]})
               (drum {push_back connected_controller_types [pads]})
            }
         }
         {if [config]
            {foreach_int $i 0 {size [config]}
               {if_else {&& {< $i 2} {platform_mgr is_enter_cancel_swapped}}
                  {set $x {- 1 $i}}
                  {set $x $i}
               }
               {if_else {== '' {elem [config] $i}}
                  {$this clear_action $i}
                  {if {!= 0 {size connected_controller_types}}
                     {{elem [actions] $i} set text_token {elem [config] $i}}
                     {{elem [actions] $i} set showing TRUE}
                     {foreach_int $j 0 {size connected_controller_types}
                        {{elem
                              {elem
                                 [icons]
                                 $j}
                              $i} set
                           text_token
                           {elem {elem connected_controller_types $j} $x}
                        }
                        {{elem {elem [icons] $j} $i} set showing TRUE}
                     }
                  }
               }
            }
            {foreach_int $i {size [config]} kHelpbarMaxButtons
               {$this clear_action $i}
            }
         }
      }
   )
   (clear_action
      ($index)
      {{elem [actions] $index} set text_token ''}
      {{elem [actions] $index} set showing FALSE}
      {foreach_int $j 0 {size connected_controller_types}
         {{elem {elem [icons] $j} $index} set text_token ''}
         {{elem {elem [icons] $j} $index} set showing FALSE}
      }
   )
   #endif
   (set_waiting
      ($waiting)
      {ornate_leader.tnm animate
         (range
            {ornate_leader.tnm frame}
            {if_else $waiting
               {ornate_leader.tnm end_frame}
               0
            }
         )
         (period 0.25)
      }
      {if $waiting
         {waiting.lbl set text_token $waiting}
      }
   )
)
{new UIPanel helpbar HELPBAR_HANDLERS}
{new UIPanel
   helpbar_dialog
   HELPBAR_HANDLERS
   (refresh_dialog_helpbar {$this refresh_display})
}
{new MetaPanel
   meta
   (file meta_panel.milo)
   (playing_post_set FALSE)
   (music_play FALSE)
   (load)
   (unload)
   (enter
      {$this music_start}
      {set [playing_post_set] FALSE}
   )
   (music_start
      {if
         {&&
            {$this is_up}
            {! {postsong_sfx_panel get active}}
            #ifdef HX_EE
            {! [music_play]}
            #endif
         }
         {set [music_play] TRUE}
         {{$this meta_music} start}
         {synth play shell_crowd.cue}
         {platform_mgr enable_xmp}
      }
   )
   (music_stop
      {set [music_play] FALSE}
      {{$this meta_music} stop}
      {synth stop shell_crowd.cue}
      {platform_mgr disable_xmp}
   )
   (music_start_stream
      ($stream_file_name)
      {{$this meta_music} start_stream $stream_file_name}
   )
   (music_stop_stream {{$this meta_music} stop_stream})
   (play_postset_loop
      ($play)
      {if_else $play
         {unless [playing_post_set]
            {synth play shell_crowd_muffled.cue}
         }
         {synth stop shell_crowd_muffled.cue}
      }
      {set [playing_post_set] $play}
   )
}
{new UIPanel
   postsong_sfx_panel
   (active FALSE)
   (load
      {set [active] TRUE}
      {meta music_stop}
      {platform_mgr disable_xmp}
      {synth play shell_crowd_muffled.cue}
   )
   (exit
      {set [active] FALSE}
      {synth stop shell_crowd_muffled.cue}
   )
}
#define DIALOG_PANEL_HANDLERS (
   (file "dialog_og.milo")
   (limit none)
   (helpbar ())
   (allow_player
      ($player_num)
      {switch [limit]
         (none TRUE)
         (session
            {'||'
               {== {game get leader_num} -1}
               {game is_player_participating $player_num}
            }
         )
         (leader_session
            {'||'
               {&& {is_leader_local} {game is_player_participating $player_num}}
               {gamemode get always_allow_player}
            }
         )
      }
   )
   (set_custom
      ($msg $opt1 $opt2 $focus)
      {dialog_title.lbl set_showing FALSE}
      {msg.lbl set_localized $msg}
      {opt1.btn set_localized $opt1}
      {opt2.btn set_localized $opt2}
      {opt1.btn set_showing TRUE}
      {opt2.btn set_showing TRUE}
      {yes.btn set_showing FALSE}
      {no.btn set_showing FALSE}
      {ok.btn set_showing FALSE}
      {set [helpbar] ('' helpbar_select)}
      {$this set_helpbar}
      {$this set_focus $focus}
   )
   (set_yesno
      ($msg $focus)
      {dialog_title.lbl set_showing FALSE}
      {msg.lbl set_localized $msg}
      {opt1.btn set_showing FALSE}
      {opt2.btn set_showing FALSE}
      {yes.btn set_showing TRUE}
      {no.btn set_showing TRUE}
      {ok.btn set_showing FALSE}
      {set [helpbar] ('' helpbar_select)}
      {$this set_helpbar}
      {$this set_focus $focus}
   )
   (set_ok
      ($msg)
      {dialog_title.lbl set_showing FALSE}
      {msg.lbl set_localized $msg}
      {opt1.btn set_showing FALSE}
      {opt2.btn set_showing FALSE}
      {yes.btn set_showing FALSE}
      {no.btn set_showing FALSE}
      {ok.btn set_showing TRUE}
      {set [helpbar] ('' helpbar_continue)}
      {$this set_helpbar}
      {$this set_focus ok.btn}
   )
   (set_msg
      ($msg)
      {$this set_focus msg.lbl}
      {dialog_title.lbl set_showing FALSE}
      {msg.lbl set_localized $msg}
      {msg.lbl set_showing TRUE}
      {opt1.btn set_showing FALSE}
      {opt2.btn set_showing FALSE}
      {yes.btn set_showing FALSE}
      {no.btn set_showing FALSE}
      {ok.btn set_showing FALSE}
      {set [helpbar] ('' helpbar_continue)}
      {$this set_helpbar}
   )
   (set_title
      ($msg)
      {dialog_title.lbl set_showing TRUE}
      {dialog_title.lbl set_localized $msg}
   )
   (set_helpbar {helpbar_dialog set_config [helpbar]})
   (set_custom_helpbar
      ($cnfg)
      {helpbar_dialog set_config $cnfg}
   )
)
{new DialogPanel
   dialog_panel
   DIALOG_PANEL_HANDLERS
   (enter
      {set [limit] none}
      {$this set_player_num -1}
      {helpbar hide_helpbar}
      {helpbar_dialog set_limit_to_player_num -1}
   )
   (exit {helpbar unhide_helpbar})
}
{new DialogPanel
   leader_dialog_panel
   DIALOG_PANEL_HANDLERS
   (enter
      {set [limit] leader_session}
      {helpbar hide_helpbar}
      {helpbar_dialog set_limit_to_player_num {game get leader_num}}
   )
   (exit {helpbar unhide_helpbar})
}
{new DialogPanel
   error_dialog_panel
   DIALOG_PANEL_HANDLERS
   (old_config ())
   (helpbar_hidden FALSE)
   (mode default)
   (blank_help TRUE)
   (enter
      {set [old_config] {helpbar_dialog get_previous}}
      {if_else {== {helpbar is_hidden} FALSE}
         {helpbar hide_helpbar}
         {set [helpbar_hidden] TRUE}
      }
      {helpbar_dialog set_limit_to_player_num -1}
      {helpbar_dialog reset_icons}
      {helpbar_dialog set_config ('' helpbar_select)}
      {helpbar_dialog set_use_all_controllers TRUE}
      {if_else {yes.btn showing}
         {$this set_focus yes.btn}
         {if_else {opt1.btn showing}
            {$this set_focus opt1.btn}
            {if_else {no.btn showing}
               {$this set_focus no.btn}
               {if_else {ok.btn showing}
                  {$this set_focus ok.btn}
                  {$this set_focus opt2.btn}
               }
            }
         }
      }
   )
   (exit
      {if {== [helpbar_hidden] FALSE}
         {helpbar unhide_helpbar}
      }
      {helpbar_dialog set_use_all_controllers FALSE}
      {helpbar_dialog set_config [old_config]}
      {set [helpbar_hidden] FALSE}
      {if [blank_help]
         {set [blank_help] FALSE}
         {helpbar_dialog set_config ('')}
      }
   )
   (FOCUS_MSG
      {unless {ui in_transition}
         {synth play button_toggle}
      }
      kDataUnhandled
   )
   (SELECT_MSG
      {switch [mode]
         (pad_lost
            {band_ui_sink hide_error_dialog}
            {switch $component
               (opt1.btn {band_ui_sink check_controllers})
               (opt2.btn {band_ui_sink trigger_quit_early_transition})
            }
         )
         (remote_exit
            {band_ui_sink hide_error_dialog}
            {switch $component
               (yes.btn {band_ui_sink trigger_quit_early_transition})
            }
         )
         (swap
            {ui hide_error_dialog}
            {set [blank_help] TRUE}
            {band_ui_sink trigger_quit_early_transition}
         )
         (default {ui hide_error_dialog})
      }
   )
   (SELECT_START_MSG {synth play button_select} kDataUnhandled)
   (set_error_msg
      ($error_reason)
      {if_else {== $error_reason kControllerSwap}
         {set [mode] swap}
         {set [mode] default}
      }
      {$this set_ok
         {localize_token
            {switch $error_reason
               (kLostConnection error_lost_connection)
               (kLoneHeadToHead error_lone_hth)
               (kLoneBandCoop error_lone_band_coop)
               (kNoLeader error_no_leader)
               (kKicked error_kicked)
               (kLostServer error_lost_server)
               (kControllerSwap error_controller_swap)
               (kEthernetUnplugged error_ethernet_unplugged)
               (kLostSongData error_lost_song_data)
               (kLocalUserSignedOut error_local_user_signed_out)
               (kBandOwnerSignedOut error_band_owner_signed_out)
               (kProfileOwnerSignedOut error_profile_owner_signed_out)
            }
         }
      }
   )
   (set_error_token
      ($token)
      {set [mode] default}
      {$this set_ok {localize_token $token}}
   )
   (JOYPAD_CONNECT_MSG
      {if {== [mode] pad_lost}
         {$this set_focus opt1.btn}
      }
      {helpbar_dialog refresh_display}
   )
   (TRANSITION_COMPLETE_MSG
      {if {== [mode] pad_lost}
         {$this set_focus opt1.btn}
      }
   )
   (pad_lost
      ($port $controller_sym)
      {band_ui_sink hide_error_dialog}
      {set [mode] pad_lost}
      {if_else {== $port -1}
         {do
            {ui hide_error_dialog}
            {band_ui_sink trigger_quit_early_transition}
         }
         {do
            {$this set_custom
               #ifdef HX_WII
               {if_else
                  {==
                     {{game
                           get_player_config
                           {joypad_get_player_from_padnum $port}} get_controller_type

                     }
                     kControllerVocals
                  }
                  {localize error_pad_lost_vocals}
                  {do
                     {sprintf
                        {localize error_pad_lost}
                        {{game
                              get_player_config
                              {joypad_get_player_from_padnum $port}} get
                           player_name
                        }
                        {localize_token $controller_sym}
                     }
                  }
               }
               #else
               {sprintf
                  {localize error_pad_lost}
                  {{game
                        get_player_config
                        {joypad_get_player_from_padnum $port}} get
                     player_name
                  }
                  {localize_token $controller_sym}
               }
               #endif
               {localize_token continue}
               {localize_token error_return_to_main}
               opt2.btn
            }
            {helpbar_dialog reset_icons}
         }
      }
   )
   (remote_exit
      {set [mode] remote_exit}
      {$this set_yesno {localize_token error_confirm_remote_exit} no.btn}
   )
}
{new DialogPanel
   overflow_dialog_panel
   DIALOG_PANEL_HANDLERS
   (old_helpbar ())
   (setup_overflow
      {$this set_msg {localize controller_overflow}}
      {set [helpbar] ()}
      {set [old_helpbar] {helpbar_dialog get config}}
      {$this set_helpbar}
   )
   (enter
      {helpbar reset_icons}
      {helpbar_dialog reset_icons}
      {if {&& {== {session mode} kNetLocal} {exists beatmatch}}
         {game set_paused TRUE}
         {if
            {&&
               {! {ui in_transition}}
               {!= pause_screen {ui current_screen}}
               {!= pause_vocal_options_screen {ui current_screen}}
               {!= restart_loading_screen {ui current_screen}}
               {!= {gamemode get pause_screen} ''}
            }
            {pause_panel set player_number {game get leader_num}}
            {band_ui_sink set_net_sync FALSE}
            {ui push_screen {gamemode get pause_screen}}
         }
      }
   )
   (exit
      {set [helpbar] [old_helpbar]}
      {$this set_helpbar}
   )
}
{new UIPanel network_busy_icon_panel (file network_busy_icon.milo)}
{new UIPanel
   remote_member_available_panel
   (file remote_member_available.milo)
}