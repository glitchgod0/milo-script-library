{new UIPanel mixer_panel (file "mixer_parent.milo")}
{new UIPanel
   options_audio_panel
   #ifdef HX_PS3
   (file "options_audio_ps3.milo")
   #else
      #ifdef HX_XBOX
      (file "options_audio.milo")
      #else
      (file "options_audio_og.milo")
      #endif
   #endif
   (focus vocal_options.btn)
   (options_audio_dirty FALSE)
   (slider_change "")
   (set_fg_instr
      {song_preview_fg_instr guitar}
      {do
         ($pad {profile_mgr get_global_options_pad})
         ($controller_type {gamecfg get_controller_type_from_pad $pad})
         {print "pad " $pad " controller_type " $controller_type}
         {song_preview_fg_instr
            {switch $controller_type
               (kControllerDrum drum)
               ((kControllerGuitar kControllerVocals kControllerNone) guitar)
            }
         }
      }
   )
   (enter
      {meta music_stop}
      {song_preview audio_sliders}
      {$this set_fg_instr}
      {$this update_all_from_profile}
      {song_preview_fg {profile_mgr get_foreground_volume_db}}
      {song_preview_bg {profile_mgr get_background_volume_db}}
      {song_preview_crowd {profile_mgr get_crowd_volume_db}}
      {session add_sink $this signin_changed}
      {memcardmgr add_sink $this save_load_all_complete_msg}
      {set_up_instrument_and_gamertag {options_audio_screen get player_num}}
      {helpbar set_limit_to_player_num {options_audio_screen get player_num}}
   )
   (set_helpbar
      {if_else {!= kFocused {vocal_options.btn get_state}}
         {helpbar set_config (helpbar_back helpbar_changesetting)}
         {helpbar set_config (helpbar_back helpbar_select)}
      }
   )
   (exit
      {song_preview ''}
      {meta music_start}
      {session remove_sink $this signin_changed}
      {memcardmgr remove_sink $this save_load_all_complete_msg}
      {helpbar set_limit_to_player_num -1}
      {meta music_start}
   )
   (signin_changed {autoload})
   (save_load_all_complete_msg {$this update_all_from_profile})
   (FOCUS_MSG
      {switch $new_focus
         (vocal_options.btn {helpbar set_config (helpbar_back helpbar_select)})
         (
            (background_music.btn crowd.btn instruments.btn sfx.btn)
            {helpbar set_config (helpbar_back helpbar_changesetting)}
         )
         (
            (background.sld crowd.sld instruments.sld sfx.sld)
            {helpbar set_config (helpbar_cancel helpbar_confirmsetting)}
         )
         (
            (background.sld crowd.sld instruments.sld sfx.sld)
            {helpbar set_config (helpbar_cancel helpbar_confirmsetting)}
         )
         #ifdef HX_XBOX
         (
            (bass_boost.btn doubly.btn)
            {$this update_check_help $new_focus}
         )
         #endif
      }
   )
   (SCROLL_SELECT_MSG)
   (SCROLL_MSG
      {set [slider_change] $component}
      {set [prev_time] {taskmgr ui_seconds}}
   )
   (SELECT_MSG
      {switch $component
         #ifdef HX_XBOX
         (bass_boost.btn
            {do
               ($new_state {! {profile_mgr get_bass_boost}})
               {profile_mgr set_bass_boost $new_state}
               {$this update_from_profile {$this find bass_check.mesh}}
               {$this update_check_help $component}
            }
         )
         (doubly.btn
            {do
               ($new_state {! {profile_mgr get_dolby}})
               {profile_mgr set_dolby $new_state}
               {$this update_from_profile {$this find doubly_check.mesh}}
               {$this update_check_help $component}
            }
         )
         #endif
         (vocal_options.btn
            {vocal_options_panel set player_num {options_audio_screen get player_num}}
            {ui goto_screen vocal_options_screen}
         )
         (instruments.btn
            {instruments.sld store}
            {if_else {profile_mgr is_dirty}
               {set [options_audio_dirty] TRUE}
               {set [options_audio_dirty] FALSE}
            }
            {$this set_focus instruments.sld}
         )
         (background_music.btn
            {background.sld store}
            {if_else {profile_mgr is_dirty}
               {set [options_audio_dirty] TRUE}
               {set [options_audio_dirty] FALSE}
            }
            {$this set_focus background.sld}
         )
         (crowd.btn
            {crowd.sld store}
            {if_else {profile_mgr is_dirty}
               {set [options_audio_dirty] TRUE}
               {set [options_audio_dirty] FALSE}
            }
            {$this set_focus crowd.sld}
         )
         (sfx.btn
            {sfx.sld store}
            {if_else {profile_mgr is_dirty}
               {set [options_audio_dirty] TRUE}
               {set [options_audio_dirty] FALSE}
            }
            {$this set_focus sfx.sld}
         )
         #ifdef HX_PS3
         (mono.btn
            {do
               ($new_state {! {profile_mgr get_mono}})
               {profile_mgr set_mono $new_state}
               {$this update_from_profile {$this find mono_check.mesh}}
               {$this update_check_help $component}
            }
         )
         #endif
      }
   )
   (BUTTON_DOWN_MSG
      {switch {$this focus_name}
         (instruments.sld
            {switch $button
               (kPad_X
                  {instruments.sld confirm}
                  {$this set_focus instruments.btn}
               )
               (kPad_Tri
                  {instruments.sld undo $player_num}
                  {profile_mgr set_foreground_volume {instruments.sld current}}
                  {if {! [options_audio_dirty]}
                     {profile_mgr set_dirty FALSE}
                  }
                  {$this set_focus instruments.btn}
               )
               kDataUnhandled
            }
         )
         (background.sld
            {switch $button
               (kPad_X
                  {background.sld confirm}
                  {$this set_focus background_music.btn}
               )
               (kPad_Tri
                  {background.sld undo $player_num}
                  {profile_mgr set_background_volume {background.sld current}}
                  {if {! [options_audio_dirty]}
                     {profile_mgr set_dirty FALSE}
                  }
                  {$this set_focus background_music.btn}
               )
               kDataUnhandled
            }
         )
         (crowd.sld
            {switch $button
               (kPad_X
                  {crowd.sld confirm}
                  {$this set_focus crowd.btn}
               )
               (kPad_Tri
                  {crowd.sld undo $player_num}
                  {profile_mgr set_crowd_volume {crowd.sld current}}
                  {if {! [options_audio_dirty]}
                     {profile_mgr set_dirty FALSE}
                  }
                  {$this set_focus crowd.btn}
               )
               kDataUnhandled
            }
         )
         (sfx.sld
            {switch $button
               (kPad_X
                  {sfx.sld confirm}
                  {$this set_focus sfx.btn}
               )
               (kPad_Tri
                  {sfx.sld undo $player_num}
                  {profile_mgr set_fx_volume {sfx.sld current}}
                  {if {! [options_audio_dirty]}
                     {profile_mgr set_dirty FALSE}
                  }
                  {$this set_focus sfx.btn}
               )
               kDataUnhandled
            }
         )
         kDataUnhandled
      }
   )
   (poll
      {if {!= [slider_change] ""}
         {if {> {- {taskmgr ui_seconds} [prev_time]} 0.5}
            {$this on_slider_change [slider_change]}
            {set [slider_change] ""}
         }
      }
   )
   (on_slider_change
      ($component)
      {switch $component
         (instruments.sld
            {profile_mgr set_foreground_volume {$component current}}
            {song_preview_fg {profile_mgr get_foreground_volume_db}}
         )
         (background.sld
            {profile_mgr set_background_volume {$component current}}
            {song_preview_bg {profile_mgr get_background_volume_db}}
         )
         (crowd.sld
            {profile_mgr set_crowd_volume {$component current}}
            {song_preview_crowd {profile_mgr get_crowd_volume_db}}
         )
         (sfx.sld
            {profile_mgr set_fx_volume {$component current}}
            {play_game_seq slider_sfx.cue}
         )
      }
   )
   (update_all_from_profile
      {$this iterate
         UISlider
         $s
         {$s set_num_steps 12}
         {$this update_from_profile $s}
      }
      #ifdef HX_XBOX
      {$this update_from_profile {$this find bass_check.mesh}}
      {$this update_from_profile {$this find doubly_check.mesh}}
      #endif
      #ifdef HX_PS3
      {$this update_from_profile {$this find mono_check.mesh}}
      #endif
   )
   (update_from_profile
      ($component)
      {switch $component
         (instruments.sld
            {$component set_current {profile_mgr get_foreground_volume}}
         )
         (background.sld
            {$component set_current {profile_mgr get_background_volume}}
         )
         (crowd.sld {$component set_current {profile_mgr get_crowd_volume}})
         (sfx.sld {$component set_current {profile_mgr get_fx_volume}})
         #ifdef HX_XBOX
         (bass_check.mesh
            {{$this find bass_check.mesh} set_showing {profile_mgr get_bass_boost}}
         )
         (doubly_check.mesh
            {{$this find doubly_check.mesh} set_showing {profile_mgr get_dolby}}
         )
         #endif
         #ifdef HX_PS3
         (mono_check.mesh
            {{$this find mono_check.mesh} set_showing {profile_mgr get_mono}}
         )
         #endif
      }
   )
   (update_check_help
      ($component)
      {switch $component
         #ifdef HX_XBOX
         (bass_boost.btn {helpbar set_config (helpbar_back helpbar_select)})
         (doubly.btn {helpbar set_config (helpbar_back helpbar_select)})
         #endif
         #ifdef HX_PS3
         (mono.btn {helpbar set_config (helpbar_back helpbar_toggleoption)})
         #endif
      }
   )
   (JOYPAD_CONNECT_MSG
      {if {&& $connected {== $player_num {options_audio_screen get player_num}}}
         {set_up_instrument_and_gamertag {options_audio_screen get player_num}}
      }
   )
}
{new UIScreen
   options_audio_screen
   (panels
      meta
      main_lower3rd_panel
      movie_panel
      options_audio_panel
      options_lower3rd_panel
      helpbar
   )
   (focus options_audio_panel)
   (back options_screen)
   (helpbar ())
   (player_num -1)
   (BUTTON_DOWN_MSG
      {if_else {!= [player_num] $player_num}
         TRUE
         kDataUnhandled
      }
   )
   (TRANSITION_COMPLETE_MSG {options_audio_panel set_helpbar})
}
{new UIPanel
   vocal_options_panel
   #ifdef HX_XBOX
   (file "options_vocal.milo")
   #else
   (file "options_vocal_og.milo")
   #endif
   (focus mic_gain.sld)
   (player_num -1)
   (enter
      #ifdef HX_WII
      {disc_error_check TRUE}
      #endif
      {$this update_all_from_profile}
      {session add_sink $this signin_changed}
      {memcardmgr add_sink $this save_load_all_complete_msg}
      {set_up_instrument_and_gamertag [player_num]}
      {helpbar set_limit_to_player_num [player_num]}
   )
   (exit
      {session remove_sink $this signin_changed}
      {memcardmgr remove_sink $this save_load_all_complete_msg}
      {helpbar set_limit_to_player_num -1}
      #ifdef HX_WII
      {disc_error_check FALSE}
      #endif
   )
   (signin_changed {autoload})
   (save_load_all_complete_msg {$this update_all_from_profile})
   (BUTTON_DOWN_MSG
      {if_else {!= [player_num] $player_num}
         TRUE
         kDataUnhandled
      }
   )
   (FOCUS_MSG
      {switch $new_focus
         (
            (mic_gain vocal_level vocal_track)
            {helpbar set_config (helpbar_back helpbar_changesetting)}
         )
      }
   )
   (SCROLL_SELECT_MSG
      {if_else $selected
         {helpbar set_config (helpbar_cancel helpbar_confirmsetting)}
         {do
            {helpbar set_config (helpbar_back helpbar_changesetting)}
            {$this on_slider_change $component}
         }
      }
   )
   (SCROLL_MSG {$this on_slider_change $component})
   (on_slider_change
      ($component)
      {switch $component
         (mic_gain.sld
            {profile_mgr set_dirty TRUE}
            {{profile_mgr
                  get_char_options_from_player
                  [player_num]} set_mic_gain
               {$component current}
            }
            {profile_mgr update_mic_gain [player_num]}
         )
         (vocal_level.sld
            {profile_mgr set_dirty TRUE}
            {{profile_mgr
                  get_char_options_from_player
                  [player_num]} set_vocal_volume
               {$component current}
            }
            {profile_mgr update_vocal_volume [player_num]}
         )
         (vocal_track.sld
            {profile_mgr set_dirty TRUE}
            {profile_mgr set_vocal_cue_volume {$component current}}
         )
      }
   )
   (update_all_from_profile
      {$this iterate
         UISlider
         $s
         {$s set_num_steps 12}
         {$this update_from_profile $s}
      }
   )
   (update_from_profile
      ($component)
      {switch $component
         (mic_gain.sld
            {$component set_current
               {{profile_mgr get_char_options_from_player [player_num]} get_mic_gain}
            }
         )
         (vocal_level.sld
            {$component set_current
               {{profile_mgr get_char_options_from_player [player_num]} get_vocal_volume}
            }
         )
         (vocal_track.sld
            {$component set_current {profile_mgr get_vocal_cue_volume}}
         )
      }
   )
   (JOYPAD_CONNECT_MSG
      {if {&& $connected {== $player_num [player_num]}}
         {set_up_instrument_and_gamertag [player_num]}
      }
      kDataUnhandled
   )
}
{new UIScreen
   vocal_options_screen
   (panels meta movie_panel vocal_options_panel helpbar)
   (focus vocal_options_panel)
   (back options_audio_screen)
   (helpbar (helpbar_back helpbar_changesetting))
}
{new UIScreen
   pause_vocal_options_screen
   #ifdef HX_XBOX
   (panels vocal_options_panel helpbar)
   #else
   (panels vocal_options_panel helpbar)
   #endif
   (focus vocal_options_panel)
   (back pause_screen)
   (helpbar (helpbar_back helpbar_changesetting))
   (JOYPAD_CONNECT_MSG
      {if {&& {! $connected} {== $player_num {vocal_options_panel get player_num}}}
         {pause_panel set cancel_pause TRUE}
         {ui goto_screen pause_screen}
      }
   )
}