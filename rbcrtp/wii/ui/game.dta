#include track_panel.dta
#include mtv_overlay.dta
#define LOSE_MUSIC_SLOW_SEC (2)
{new GamePanel
   game
   (file "")
   (reset {events_parser add_sink $this})
   (coda
      {if_else {&& {game want_coda} {game is_playing}}
         {do
            {beatmatch foreach_active_player $p
               {handle ($p enter_coda)}
            }
            kDataUnhandled
         }
         0
      }
   )
   (pick_intro
      {{gamemode get game_screen} check_session_state}
      #ifdef HX_XBOX
      {if_else {&& [intro_shot] {! $skip_intro}}
         {do
            {beatmatch set_intro_real_time {- {[intro_shot] duration_seconds}}}
            {handle ($this intro_start)}
         }
         {handle ($this intro_skip)}
      }
      #else
      {if_else {! $skip_intro}
         {do
            {beatmatch set_intro_real_time 0}
            {handle ($this intro_start)}
         }
         {handle ($this intro_skip)}
      }
      #endif
   )
   (intro_start
      {script_task kTaskSeconds
         (delay {- 0 {taskmgr seconds}})
         (script {handle ($this on_extend)})
      }
      {script_task kTaskBeats
         (delay {- {taskmgr beat}})
         (script {handle ($this intro_end)})
      }
      {$this start_game}
      kDataUnhandled
   )
   (intro_skip {$this start_game} kDataUnhandled)
   (music_start {ui music_start} kDataUnhandled)
   (beat
      {if $debug.beep
         {synth play click}
      }
      kDataUnhandled
   )
   (excitement
      ($ex)
      {if {gamemode get crowd_reacts}
         {do
            ($levels
               (excitement_boot
                  excitement_bad
                  excitement_okay
                  excitement_great
                  excitement_peak
               )
            )
            {if {< $ex kNumExcitements}
               {handle ($this {elem $levels $ex})}
            }
         }
      }
      kDataUnhandled
   )
   (game_over
      {beatmatch foreach_active_player $p
         {$p on_game_over}
      }
      kDataUnhandled
   )
   (game_won_common
      {beatmatch set_realtime TRUE}
      #ifndef HX_WII
      {beatmatch set_paused TRUE}
      #endif
      {{get_track_panel} toggle_track_fade}
      {synth play track_end.cue}
   )
   (game_won {$this game_won_common} kDataUnhandled)
   (game_won_band0 {$this game_won_common} kDataUnhandled)
   (game_won_band1 {$this game_won_common} kDataUnhandled)
   (game_won_tie {$this game_won_common} kDataUnhandled)
   (game_lost
      {beatmatch set_realtime TRUE}
      {script_task kTaskBeats
         (delay LOSE_MUSIC_SLOW_SEC)
         (script
            {do
               {beatmatch set_paused TRUE}
            }
         )
      }
      kDataUnhandled
   )
   (game_outro
      {synth stop_all_sfx}
      #ifdef HX_WII
      {beatmatch set_in_game FALSE}
      #endif
      {band_ui_sink sync_screen
         {gamemode get
            {if_else {$this lost}
               lose_screen
               win_screen
            }
         }
         1
      }
      kDataUnhandled
   )
   (on_pause
      ($player_num)
      {do
         {if
            {&&
               {! {ui in_transition}}
               {!= pause_screen {ui current_screen}}
               {!= pause_vocal_options_screen {ui current_screen}}
               {!= restart_loading_screen {ui current_screen}}
               {gamecfg is_player_participating $player_num}
               {! {game is_game_over}}
               {== {session state} kNetInGame}
               {beatmatch player $player_num}
               {{beatmatch player $player_num} can_pause}
               {!= {gamemode get pause_screen} ''}
            }
            {pause_panel set player_number $player_num}
            {band_ui_sink set_net_sync FALSE}
            {ui push_screen {gamemode get pause_screen}}
         }
      }
   )
   (game_player_failed
      ($player)
      {world_failsave_panel show_failure $player}
   )
   (game_player_saved
      ($player)
      {world_failsave_panel show_savior $player}
   )
}
{new UIPanel
   world_failsave_panel
   (file world/eng/failsave.milo)
   (show_failure
      ($player)
      {if {exists player_failed_image.mat}
         {set $pcfg {game get_player_config $player}}
         {switch {$pcfg get_track_sym}
            (guitar {player_failed_image.mat set diffuse_tex player_failed_guitar.tex})
            (bass {player_failed_image.mat set diffuse_tex player_failed_bass.tex})
            (drum {player_failed_image.mat set diffuse_tex player_failed_drums.tex})
            (vocals {player_failed_image.mat set diffuse_tex player_failed_vocals.tex})
         }
         {player_failed.trg trigger}
      }
   )
   (show_savior
      ($player)
      {if {exists player_failed_image.mat}
         {set $pcfg {game get_player_config $player}}
         {switch {$pcfg get_track_sym}
            (guitar {player_saved_image.mat set diffuse_tex player_saved_guitar.tex})
            (bass {player_saved_image.mat set diffuse_tex player_saved_bass.tex})
            (drum {player_saved_image.mat set diffuse_tex player_saved_drums.tex})
            (vocals {player_saved_image.mat set diffuse_tex player_saved_vocals.tex})
         }
         {player_saved.trg trigger}
      }
   )
}
{new UIPanel
   world_panel
   #ifdef HX_EE
   (file world/video_world.milo)
   (enter
      {game add_sink $this}
      {film_grain.filt animate (delay -5) (loop 0 101)}
      {video_overlay.mnm set_frame 0}
      {video_fadein.mnm set_frame 0}
      {script_task kTaskUISeconds
         (delay 0.1)
         (script
            {video.mat set diffuse_tex video_texture.tex}
            {video_fadein.mnm animate}
         )
      }
   )
   #endif
   #ifdef HX_WII
   (file world/video_world.milo)
   (enter
      {game add_sink $this}
      {film_grain.filt animate (delay -5) (loop 0 101)}
      {set $moviefinished FALSE}
      {set $gamefinished FALSE}
      {video_overlay.mnm set_frame 0}
      {video_fadein.mnm set_frame 0}
      {script_task kTaskUISeconds
         (delay 0.1)
         (script
            {video.mat set diffuse_tex video_texture.tex}
            {video_fadein.mnm animate}
         )
      }
      {video_file.mov set
         movie_file
         {sprintf "%s.bik" {song_mgr song_video {game get_song}}}
      }
      {video_file.mov restart_movie}
   )
   #endif
   #ifdef HX_PC
   (file world/static_world.milo)
   (enter {game add_sink $this})
   #endif
   #ifdef HX_WII
   (poll
      {if {&& {! $moviefinished} {video_file.mov is_movie_done}}
         {do
            {if $gamefinished
               {do
                  {set $moviefinished TRUE}
                  {film_grain.filt animate (loop 0 0)}
                  {handle (game game_outro)}
               }
            }
         }
      }
   )
   #endif
   (cycle_film_grain
      {if {exists film_grain.filt}
         {if_else {== {film_grain.mesh get showing} TRUE}
            {do
               {film_grain.mesh set_showing FALSE}
               {notify "No Film Grain"}
            }
            {do
               {film_grain.mesh set_showing TRUE}
               {notify "Film Grain"}
            }
         }
      }
   )
   (exit
      {game remove_sink $this}
      #ifndef HX_PC
      {video.mat set diffuse_tex video_overlay_texture.tex}
      #endif
   )
   (load {game load_crowd_audio})
   (game_lost
      #ifdef HX_XBOX
      {game game_outro}
      #else
      {synth stop_all_sfx}
      {film_grain.filt animate (loop 0 0)}
      {beatmatch foreach_active_player $p
         {synth play {sprintf "%s_died.cue" {$p instrument}}}
      }
      {script_task kTaskSeconds
         (delay 2)
         (script
            {do
               {video_overlay.mnm animate}
               {script_task kTaskSeconds
                  (delay 2)
                  (script
                     {do
                        {game set_paused TRUE}
                        {script_task kTaskSeconds
                           (delay 5)
                           (script {video_overlay.mnm set_frame 0})
                        }
                        {handle (game game_outro)}
                     }
                  )
               }
            }
         )
      }
      #endif
      kDataUnhandled
   )
   (finish_load
      {if {exists crowd_audio}
         {crowd_audio post_load}
      }
   )
   (game_won
      #ifdef HX_XBOX
      {game game_outro}
      #endif
      #ifdef HX_PC
      {game game_outro}
      #endif
      #ifdef HX_EE
      {handle (game game_outro)}
      #endif
      #ifdef HX_WII
      {video_file.mov animate}
      {video_file.mov set_movie_song_over}
      {set $gamefinished TRUE}
      #endif
      kDataUnhandled
   )
   (game_won_band0
      #ifdef HX_XBOX
      {game game_outro}
      #endif
      #ifdef HX_PC
      {game game_outro}
      #endif
      #ifdef HX_EE
      {handle (game game_outro)}
      #endif
      #ifdef HX_WII
      {video_file.mov animate}
      {video_file.mov set_movie_song_over}
      {set $gamefinished TRUE}
      #endif
      kDataUnhandled
   )
   (game_won_band1
      #ifdef HX_XBOX
      {game game_outro}
      #endif
      #ifdef HX_PC
      {game game_outro}
      #endif
      #ifdef HX_EE
      {handle (game game_outro)}
      #endif
      #ifdef HX_WII
      {video_file.mov animate}
      {video_file.mov set_movie_song_over}
      {set $gamefinished TRUE}
      #endif
      kDataUnhandled
   )
   (game_won_tie
      #ifdef HX_XBOX
      {game game_outro}
      #endif
      #ifdef HX_PC
      {game game_outro}
      #endif
      #ifdef HX_EE
      {handle (game game_outro)}
      #endif
      #ifdef HX_WII
      {video_file.mov animate}
      {video_file.mov set_movie_song_over}
      {set $gamefinished TRUE}
      #endif
      kDataUnhandled
   )
   (unload
      #ifdef HX_XBOX
      {rnd suspend}
      #endif
      {game unload_crowd_audio}
   )
}
#define GAME_SCREEN_HANDLERS (
   (disable_screen_saver TRUE)
   (delayed_mic_check FALSE)
   (JOYPAD_CONNECT_MSG {$this check_lost_controller})
   (check_lost_controller
      {if_else
         {&&
            {! {ui in_transition}}
            {! {game is_game_over}}
            {ui current_screen}
            {!= {ui current_screen} pause_screen}
            {!= {ui current_screen} {gamemode get confirm_quit_screen}}
            {!= {ui current_screen} {gamemode get confirm_restart_screen}}
            {game missing_controllers}
            {== {session state} kNetInGame}
         }
         {do
            {band_ui_sink set_net_sync FALSE}
            {ui push_screen pause_controller_screen}
            TRUE
         }
         FALSE
      }
   )
   (microphones_changed
      ($vocalists_mic_changed)
      {if $vocalists_mic_changed
         {if {$this player_missing_mic}
            {$this pause_for_mic_check}
         }
      }
   )
   (pause_for_mic_check
      {if
         {&&
            {! {ui in_transition}}
            {! {game is_game_over}}
            {!= {ui current_screen} pause_screen}
            {!= {ui current_screen} pause_controller_screen}
         }
         {band_ui_sink set_net_sync FALSE}
         {ui push_screen pause_mics_screen}
      }
   )
   (enter
      {band_ui_sink hide_error_dialog}
      {set $game_pause_on_enter FALSE}
      {set [delayed_mic_check] FALSE}
      {rnd set_in_game TRUE}
      {session add_sink $this start_game_msg}
      {session add_sink $this start_loading_msg}
      {platform_mgr add_sink $this ui_changed}
      {if {== {gamecfg get practice_mode} TRUE}
         {set [Intransition] FALSE}
      }
      {if $multi_event
         {coop_track_panel set_paused FALSE}
         {coop_track_panel reload}
         {$world enter}
         {set $multi_event FALSE}
      }
      {game foreach_local_player_config $pcfg
         {do
            ($player_num {$pcfg get player_num})
            ($theplayer {game get_player $player_num})
            {if {== {$theplayer instrument} vocals}
               {profile_mgr update_vocal_volume $player_num}
               {profile_mgr update_mic_gain $player_num}
            }
         }
      }
      {handle ($this my_enter)}
   )
   (exit
      {rnd set_in_game FALSE}
      {session remove_sink $this start_game_msg}
      {session remove_sink $this start_loading_msg}
      {platform_mgr remove_sink $this ui_changed}
   )
   (UI_CHANGED_MSG {$this on_guide_change FALSE})
   (player_missing_mic
      {do
         ($ret FALSE)
         {game foreach_local_player $p
            {do
               ($player_num {$p player_num})
               {if
                  {&&
                     {!= $player_num -1}
                     {game is_player_participating $player_num}
                     {== {{gamecfg get_player_config $player_num} get_track_sym} vocals}
                  }
                  {do
                     ($mic_num {joypad_get_players_padnum $player_num})
                     {if {&& {!= $mic_num -1} {! {synth is_mic_connected $mic_num}}}
                        {set $ret TRUE}
                     }
                  }
               }
            }
         }
         $ret
      }
   )
   (TRANSITION_COMPLETE_MSG
      {if {! {$this check_lost_controller}}
         {unless $fake_controllers
            {if_else {$this player_missing_mic}
               {$this pause_for_mic_check}
               {$this transition_checks}
            }
         }
      }
   )
   (transition_checks
      {if_else $game_pause_on_enter
         {do
            {set $game_pause_on_enter FALSE}
            {band_ui_sink set_net_sync FALSE}
            {ui push_screen pause_screen}
         }
         {if $game_unpause_on_enter
            {game set_paused FALSE}
            {set $game_unpause_on_enter FALSE}
         }
      }
      #ifdef HX_WII
      {if {platform_mgr guide_showing}
         {$this on_guide_change TRUE}
      }
      {hmb_allow FALSE}
      {script_task kTaskUISeconds (delay 1) (script {hmb_allow TRUE})}
      #endif
   )
   (check_session_state
      {switch {session state}
         (kNetInLobby
            {game set_paused TRUE}
            {session set_all_local_ready_status TRUE}
         )
         (kNetLoading
            {game set_paused TRUE}
            {session done_loading}
         )
         (kNetInGame {game set_paused FALSE})
      }
   )
   (start_game_msg
      {game set_paused FALSE}
      {if {! {$this check_lost_controller}}
         {unless $fake_controllers
            {if {$this player_missing_mic}
               {$this pause_for_mic_check}
            }
         }
      }
   )
   (start_loading_msg {session done_loading})
   (on_guide_change
      ($force)
      {if {'||' {== $force TRUE} {! {beatmatch get_paused}}}
         {do
            ($player {hmb_playernum})
            {if {!= $player -1}
               {if {! {&& {beatmatch player $player} {{beatmatch player $player} can_pause}}}
                  {set $player -1}
               }
            }
            {if {== $player -1}
               {foreach_int $i 0 4
                  {if
                     {&&
                        {== $player -1}
                        {beatmatch player $i}
                        {{beatmatch player $i} can_pause}
                     }
                     {set $player $i}
                  }
               }
            }
            {if {!= $player -1}
               {if_else {== $force TRUE}
                  {do
                     {pause_panel set player_number $player}
                     {ui push_screen pause_screen}
                  }
                  {game on_pause $player}
               }
               {game fake_start_press $player}
            }
         }
      }
      {band_ui_sink check_controllers}
   )
)
{new UIScreen
   game_screen
   (panels game world_panel world_failsave_panel coop_track_panel mtv_overlay)
   GAME_SCREEN_HANDLERS
}
{new UIScreen
   hth_game_screen
   (panels game world_panel hth_track_panel mtv_overlay)
   GAME_SCREEN_HANDLERS
}
{new UIScreen
   vocal_test_screen
   (panels)
   (enter
      {content_mgr start_refresh}
      {set [waiting] TRUE}
   )
   (poll
      {if {&& [waiting] {content_mgr refresh_done}}
         {set [waiting] FALSE}
         {ui goto_screen vocal_test_game_screen}
      }
   )
   (waiting TRUE)
}
{new UIScreen
   vocal_test_game_screen
   (panels game coop_track_panel mtv_overlay)
   GAME_SCREEN_HANDLERS
}
{func set_weights_song
   ($sym)
   {if_else {has_substr $sym "_short"}
      {do
         ($song)
         {print $sym}
         {search_replace $sym "_short" "" $song}
         {set $song {symbol $song}}
         {set $force_song_block song_vocals}
         {game set_song $song}
      }
      {do
         {set $force_song_block song}
         {game set_song $sym}
      }
   }
}
{new UIScreen
   gen_weights_start_screen
   (panels)
   (enter
      {content_mgr start_refresh}
      {set [waiting] TRUE}
   )
   (poll
      {if {&& [waiting] {content_mgr refresh_done}}
         {set [waiting] FALSE}
         {set $gen_weights_idx 0}
         {set_weights_song {elem (GEN_WEIGHTS_SONGS) $gen_weights_idx}}
         {print
            "GENERATING WEIGHTS FOR "
            {elem (GEN_WEIGHTS_SONGS) $gen_weights_idx}
            "\n"
         }
         {ui goto_screen gen_weights_game_screen}
      }
   )
   (waiting TRUE)
}
{new UIScreen
   gen_weights_advance_screen
   (panels coop_track_panel mtv_overlay)
   (enter
      {coop_track_panel exit}
      {coop_track_panel set_paused TRUE}
      {set_weights_song {elem (GEN_WEIGHTS_SONGS) $gen_weights_idx}}
      {print
         "GENERATING WEIGHTS FOR "
         {elem (GEN_WEIGHTS_SONGS) $gen_weights_idx}
         "\n"
      }
      {ui goto_screen gen_weights_game_screen}
   )
}
{new UIScreen
   gen_weights_game_screen
   (panels game coop_track_panel mtv_overlay)
   GAME_SCREEN_HANDLERS
   (gen_weights_done
      {'++' $gen_weights_idx}
      {if_else {== $gen_weights_idx {size (GEN_WEIGHTS_SONGS)}}
         {ui goto_screen gen_weights_done_screen}
         {ui goto_screen gen_weights_advance_screen}
      }
   )
}
{new UIScreen
   gen_weights_done_screen
   (panels)
   (enter
      {print "\n\nWEIGHTS GENERATION DONE!\n"}
      {exit}
   )
}
{new UIScreen
   gen_panfiles_start_screen
   (panels)
   (enter
      {content_mgr start_refresh}
      {set [waiting] TRUE}
   )
   (poll
      {if {&& [waiting] {content_mgr refresh_done}}
         {set [waiting] FALSE}
         {set $gen_panfiles_idx 0}
         {game set_song {elem (GEN_PANFILE_SONGS) $gen_panfiles_idx}}
         {print "GENERATING PAN FILE FOR " {game get_song} "\n"}
         {ui goto_screen gen_panfiles_game_screen}
      }
   )
   (waiting TRUE)
}
{new UIScreen
   gen_panfiles_advance_screen
   (panels coop_track_panel mtv_overlay)
   (enter
      {coop_track_panel exit}
      {coop_track_panel set_paused TRUE}
      {game set_song {elem (GEN_PANFILE_SONGS) $gen_panfiles_idx}}
      {print "GENERATING PAN FILE FOR " {game get_song} "\n"}
      {ui goto_screen gen_panfiles_game_screen}
   )
}
{new UIScreen
   gen_panfiles_game_screen
   (panels game coop_track_panel mtv_overlay)
   GAME_SCREEN_HANDLERS
   (gen_panfiles_done
      {'++' $gen_panfiles_idx}
      {if_else {== $gen_panfiles_idx {size (GEN_PANFILE_SONGS)}}
         {ui goto_screen gen_panfiles_done_screen}
         {ui goto_screen gen_panfiles_advance_screen}
      }
   )
}
{new UIScreen
   gen_panfiles_done_screen
   (panels)
   (enter
      {print "\n\nPAN FILES GENERATION DONE!\n"}
      {exit}
   )
}