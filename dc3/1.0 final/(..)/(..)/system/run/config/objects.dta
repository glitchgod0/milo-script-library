#define MSG_SINKS (
   (struct
      (sinks
         (array
            (struct
               (obj
                  object
                  (class Object)
                  (help "Object to sink to")
               )
               (mode
                  int
                  (help "the mode")
                  (list (SINK_MODES))
               )
            )
         )
         (help "Global sinks, all messages sent to these guys")
         (read_only TRUE)
         (no_test)
      )
      (event_sinks
         (array
            (struct
               (event symbol (help "the event to send down"))
               (sinks
                  (array
                     (struct
                        (obj
                           object
                           (class Object)
                           (help "Object to sink to")
                        )
                        (mode
                           int
                           (help "the mode")
                           (list (SINK_MODES))
                        )
                        (handler symbol (help "Name of the handler to use"))
                     )
                  )
                  (help "the objects, with modes and handlers to send this event to")
               )
            )
            (header
               {do
                  ($arr {array $milo_prop_path})
                  {push_back $arr event}
                  {$this get $arr}
               }
            )
         )
         (help "Event specific sinks, each particular event is sent to these guys")
         (read_only TRUE)
         (no_test)
      )
   )
)
(Object
   (description
      "The Object class is the root of the class hierarchy. Every\n        class has Object as a superclass."
   )
   (editor
      (name
         string
         (help "name of the object")
         (no_test)
      )
      (type
         symbol
         (help "script type of the object")
         (list {$this get_types_list})
         (no_test)
      )
      (note
         string
         (help
            "Just a note describing the object, stripped out of shipping assets, so don't make code rely on this"
         )
      )
      (refs
         (array object (class Object))
         (alias "Used by:")
         (help "ref owners")
         (read_only TRUE)
      )
      (source_file
         file
         (help "the file this object originally came from")
         (read_only TRUE)
      )
      (sinks
         MSG_SINKS
         (help "Sinks for messages sent to me")
         (read_only TRUE)
      )
   )
   (types
      (timeline
         (editor
            (events
               (array symbol (list {{$this dir} supported_events}))
               (post_sync {$this restart})
               (refresh current)
            )
            (current symbol (read_only TRUE))
            (fire
               script
               (script {$this fire})
               (refresh current)
            )
            (skip
               script
               (script {$this skip})
               (refresh current)
            )
            (reset
               script
               (script {$this reset})
               (refresh current)
            )
         )
         (current
            {if_else {size [events]}
               {elem [events] [current_index]}
               ''
            }
         )
         (current_index 0)
         (events ())
         (fire
            {handle
               ({$this dir}
                  {elem [events] [current_index]}
               )
            }
            {$this skip}
         )
         (skip
            {'++' [current_index]}
            {if {>= [current_index] {size [events]}}
               {set [current_index] 0}
            }
         )
         (reset {set [current_index] 0})
      )
      (eye_dart_ruleset
         (editor
            (min_radius
               float
               (help "Dart locations will be at least this distance from target")
               (range 0.0 1000.0)
            )
            (max_radius
               float
               (help "Dart locations will be at most this distance from target")
               (range 0.0 1000.0)
            )
            (min_darts_per_sequence
               int
               (help
                  "Each sequence of darts will have at least this many locations before returning to target"
               )
               (range 0 50)
            )
            (max_darts_per_sequence
               int
               (help
                  "Each sequence of darts will have at most this many locations before returning to target"
               )
               (range 0 50)
            )
            (min_time_between_darts
               float
               (help
                  "In seconds, the minimum time between each dart in a sequence.  should be very small"
               )
               (range 0 2.0)
            )
            (max_time_between_darts
               float
               (help
                  "In seconds, the maximum time between each dart in a sequence.  should be very small"
               )
               (range 0 2.0)
            )
            (min_time_between_sequences
               float
               (help
                  "In seconds, the minimum time to wait to start another dart sequence after the previous one finishes"
               )
               (range 0 100.0)
            )
            (max_time_between_sequences
               float
               (help
                  "In seconds, the maximum time to wait to start another dart sequence after the previous one finishes"
               )
               (range 0 100.0)
            )
            (scale_with_distance
               bool
               (help
                  "Sets whether the dart radius scales with the distance to the character - meaning this dart sequence looks the same regardless of distance"
               )
            )
            (reference_distance
               float
               (help
                  "When scale_with_distance is true, this distance is used as a reference to scale up the radius."
               )
            )
         )
         (min_radius 0.5)
         (max_radius 3.0)
         (min_darts_per_sequence 2)
         (max_darts_per_sequence 5)
         (min_time_between_darts 0.25)
         (max_time_between_darts 0.65)
         (min_time_between_sequences 1.0)
         (max_time_between_sequences 2.0)
         (scale_with_distance 0)
         (reference_distance 70.0)
      )
   )
   (views
      ('Object View'
         (orphan
            {do
               ($orphan true)
               {$this iterate_refs $r {set $orphan false}}
               $orphan
            }
         )
         (note
            {$this note}
            {$this set_note $milo_value}
         )
      )
   )
)
(ObjectDir
   (description
      "An ObjectDir keeps track of a set of Objects.  \n      It can subdir or proxy in other ObjectDirs.  \n      To rename subdir or proxy files search for remap_objectdirs in system/run/config/objects.dta"
   )
   (types)
   (editor
      (subdirs
         (array file (ext "MILO files" milo))
         (help "Subdirectories of objects")
         (post_sync
            {handle ($this enter)}
            {milo update_objects}
         )
         (hide {$this is_proxy})
      )
      (proxy_file
         file
         (ext "Milo files" "milo")
         (hide {'||' {! {$this is_proxy}} {$this is_a Flow}})
         (post_sync {handle ($this enter)})
      )
      (inline_proxy
         int
         (hide {! {$this is_proxy}})
         (list
            (
               ("kInlineNever" "Never inline this, this is the default value")
               ("kInlineCached" "Inline it during cached saves")
               ("kInlineAlways" "Always inline it, even during non cached saves")
            )
         )
         (help
            "How is this Proxy inlined?  Note that when you change this, you must resave everything subdiring this file for it to take effect"
         )
      )
      (inline_subdir
         int
         (list
            (
               (
                  "kInlineNever"
                  "Always share this subdir, good for textures and other things you want to share"
               )
               (
                  "kInlineCached"
                  "Never share this, each dir subdiring this will get its own copy, good for layering proxy or venue files for authoring"
               )
               (
                  "kInlineAlways"
                  "Always inline it, even during non cached saves, this is only used for AO computations"
               )
               (
                  "kInlineCachedShared"
                  "Always inline it, but share it like a normal subdir if another one has been loaded"
               )
            )
         )
         (hide {$this is_proxy})
         (help
            "How is this inlined as a subdir?  Note that when you change this, you must resave everything subdiring this file for it to take effect"
         )
      )
      (path_name
         string
         (help "where this came from")
         (read_only TRUE)
      )
      (exposed_properties (indent))
      (editor_dir
         script
         (script {milo edit {$this get_editor_dir}})
         (help "Opens up property editor for the EditorDir")
      )
   )
   (anim_props
      (event
         object
         (class EventTrigger)
         (dir $this)
      )
   )
)
(MidiParser
   (description
      "Parses midi files into messages to send to other objects or itself"
   )
   (init)
   (types)
)
#include rnd_objects.dta
#include flow.dta
#include synth_objects.dta
#include edit_objects.dta
#include ../char/char_objects.dta
#include ../ui/ui_objects.dta
#include ../track/track_objects.dta
#include ../world/world_objects.dta
#ifdef INIT_HAM
#include ../ham/ham_objects.dta
#endif
#ifdef INIT_MILO
#include milo_objects.dta
#endif