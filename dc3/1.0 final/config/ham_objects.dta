(MoveDir (failclips "songs/_failclips/failclips.milo"))
(MoveGraph)
(SuperEasyRemixer
   (types
      (easeup_remixer
         (dynamic_difficulty_state_chart
            (
               (b_perm beginner 0 0 0 0)
               (e_perm easy 0 0 0 0)
               (m_perm medium 0 0 0 0)
               (x_perm expert 0 0 0 0)
               (e_0 easy 0 0 0 1)
               (e_1 easy -1 -1 0 1)
               (e_2 easy -2 -1 1 2)
               (e_3 easy -2 -1 1 2)
               (e_4 easy -2 -1 1 2)
               (e_5 easy -2 -1 1 2)
               (e_6 easy -2 -2 0 b_perm)
               (e_7 easy -2 -2 0 b_perm)
            )
         )
         (initial_dynamic_difficulty_state
            (
               (beginner b_perm)
               (easy e_0)
               (medium m_perm)
               (expert x_perm)
            )
         )
         (player_states ())
         (downgrade_measures ())
         (downgrade_movenames ())
         (post_init)
         (start_reset
            {resize [player_states] {gamedata max_players}}
            {resize [downgrade_measures] {gamedata max_players}}
            {resize [downgrade_movenames] {gamedata max_players}}
            {foreach_int $p 0 {gamedata max_players}
               {set_elem [player_states] $p {$this get_initial_state_name $p}}
               {set_elem [downgrade_measures] $p 0}
               {set_elem [downgrade_movenames] $p ""}
            }
            {rnd overlay_print supereasy "\nSUPEREASY_OVERLAY..."}
            {$this reset}
         )
         (post_reset)
         (deinit {rnd show_overlay supereasy FALSE})
         (update_supereasy_overlay
            {rnd show_overlay supereasy $supereasy_overlay_enabled}
            {rnd overlay_print supereasy "\nSUPEREASY_OVERLAY "}
            {if {$this super_easy_data_error}
               {rnd overlay_print supereasy "<DATA ERROR> "}
            }
            {foreach_int $i 0 {gamedata max_players}
               {do
                  ($p {- {gamedata max_players} {'+' $i 1}})
                  {rnd overlay_print supereasy "P" {'+' $p 1} ": "}
                  {if_else {gamedata getp $p playing}
                     {do
                        ($desired {$this desired_difficulty $p})
                        ($current {$this desired_difficulty $p})
                        {rnd overlay_print supereasy {difficulty_to_sym $current} " "}
                        {if {!= $desired $current}
                           {rnd overlay_print supereasy "(wants " {difficulty_to_sym $desired} ") "}
                        }
                        {rnd overlay_print supereasy {elem [player_states] $p} " "}
                     }
                     {rnd overlay_print supereasy "<not playing> "}
                  }
               }
            }
         )
         (update_player_performance
            ($player $rating $movename)
            {if {hamprovider get dynamic_difficulty_enabled}
               {do
                  ($cur_difficulty {$this desired_difficulty $player})
                  ($cur_state_name {elem [player_states] $player})
                  ($dst_state_name
                     {$this get_destination_state_name $cur_state_name $rating}
                  )
                  ($dst_difficulty {$this get_state_difficulty $dst_state_name})
                  {set_elem [player_states] $player $dst_state_name}
                  {if {!= $cur_difficulty $dst_difficulty}
                     {print
                        "dynamic_difficulty - DIFFICULTY CHANGE - player:"
                        $player
                        " "
                        {difficulty_to_sym $cur_difficulty}
                        "->"
                        {difficulty_to_sym $dst_difficulty}
                        "\n"
                     }
                     {$this set_desired_difficulty $player $dst_difficulty}
                     {if {== $dst_difficulty kDifficultyBeginner}
                        {set_elem [downgrade_measures] $player {beat_to_measure {taskmgr beat}}}
                        {set_elem [downgrade_movenames] $player $movename}
                     }
                  }
                  {if
                     {==
                        {beat_to_measure {taskmgr beat}}
                        {{$hud_panel get moves_dir} get_finishing_move_measure}
                     }
                     {$this log_downgrade $player}
                  }
               }
            }
            {$this update_supereasy_overlay}
         )
         (orig_difficulty
            ($player)
            {gamedata getp $player difficulty}
         )
         (log_downgrade
            ($player)
            {$this send_downgrade_datapoint
               {gamedata get song}
               {'+' $player 1}
               {gamemode get_mode}
               {if_else {hamprovider get song_shortening_enabled}
                  1
                  0
               }
               {if_else {$hamdirector get freestyle_enabled}
                  1
                  0
               }
               {elem [downgrade_measures] $player}
               {elem [downgrade_movenames] $player}
            }
         )
         (get_initial_state_name
            ($player)
            {do
               ($difficulty {$this orig_difficulty $p})
               ($difficulty_sym {difficulty_to_sym $difficulty})
               ($initial_state_entry
                  {find [initial_dynamic_difficulty_state] $difficulty_sym}
               )
               {elem $initial_state_entry 1}
            }
         )
         (get_state_entry
            ($state_name)
            {do
               ($entry {find_exists [dynamic_difficulty_state_chart] $state_name})
               {if_else {!= $entry kDataUnhandled}
                  $entry
                  {do
                     {notify "dynamic_difficulty_state - STATE NOT FOUND - '" $state_name "'"}
                     {elem [dynamic_difficulty_state_chart] 0}
                  }
               }
            }
         )
         (get_state_difficulty
            ($state_name)
            {sym_to_difficulty {elem {$this get_state_entry $state_name} 1}}
         )
         (get_destination_state_name
            ($cur_state_name $rating)
            {do
               ($cur_state_idx -1)
               ($cur_state '')
               ($dst_state_name $cur_state_name)
               {foreach_int $i 0 {size [dynamic_difficulty_state_chart]}
                  {do
                     ($state_i {elem [dynamic_difficulty_state_chart] $i})
                     {if {== {elem $state_i 0} $cur_state_name}
                        {set $cur_state_idx $i}
                        {set $cur_state $state_i}
                     }
                  }
               }
               {if_else $cur_state
                  {do
                     ($rating_indices
                        (
                           (move_perfect 2)
                           (move_awesome 3)
                           (move_ok 4)
                           (move_bad 5)
                        )
                     )
                     ($rating_idx {elem {find $rating_indices $rating} 1})
                     ($dst_label {elem $cur_state $rating_idx})
                     {switch {type $dst_label}
                        (kDataSymbol
                           {if_else
                              {!=
                                 {find_exists [dynamic_difficulty_state_chart] $dst_label}
                                 kDataUnhandled
                              }
                              {set $dst_state_name $dst_label}
                              {notify
                                 "dynamic_difficulty_state - DESTINATION STATE NOT FOUND - '"
                                 $dst_label
                                 "'"
                              }
                           }
                        )
                        (kDataInt
                           {do
                              ($dst_state_idx {'+' $cur_state_idx $dst_label})
                              {if_else
                                 {&&
                                    {>= $dst_state_idx 0}
                                    {< $dst_state_idx {size [dynamic_difficulty_state_chart]}}
                                 }
                                 {set $dst_state_name
                                    {elem {elem [dynamic_difficulty_state_chart] $dst_state_idx} 0}
                                 }
                                 {notify
                                    "dynamic_difficulty_state - DESTINATION OFFSET INVALID - state:"
                                    $cur_state_name
                                    " offset:"
                                    $dst_label
                                 }
                              }
                           }
                        )
                        {notify
                           "dynamic_difficulty_state - INVALID DESTINATION - state:"
                           $cur_state_name
                           " rating:"
                           $rating
                           " destination:"
                           $dst_label
                        }
                     }
                  }
                  {notify
                     "dynamic_difficulty_state - STATE NOT FOUND - '"
                     $cur_state_name
                     "'"
                  }
               }
               $dst_state_name
            }
         )
      )
   )
)