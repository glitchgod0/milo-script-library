#ifndef DEMO
(left
   (kPad_Tri
      "Game: Cycle Free Camera / Splash: Goto Framerate Test / Framerate Test: Restart"
      (filters game)
      {cond
         ({==
               {ui current_screen}
               splash_screen}
            {ui goto_screen frame_rate_screen}
         )
         ({==
               {ui current_screen}
               frame_rate_game_screen}
            {ui push_screen meta_loading_return_to_frame_rate_screen}
         )
         (TRUE {cycle_free_camera})
      }
   )
   (kPad_R2 "HAQ display all" {haq_display_all})
)
(right
   (kPad_Square
      "Print Current Screen"
      (filters meta)
      {handle ({ui current_screen} print)}
   )
)
#endif
(keyboard
   #ifndef DEMO
      ('`' alt "Toggle fake file errors" {toggle_fake_file_errors})
      #ifdef HX_XBOX
      (KB_F2 "Fake a signout change on controller 1" {fake_signout 0})
      (KB_F3 "Fake a signout change on controller 2" {fake_signout 1})
      (KB_F4 "Fake a signout change on controller 3" {fake_signout 2})
      #endif
      (KB_F5
         alt
         "name that dance player 1 swipe-in"
         (filters game)
         {if {== name_that_dance {game_panel get type}}
            {if {game_panel get mg_panel}
               {{game_panel get mg_panel} cheat_swipe 0}
            }
            {cheat_display show "name that dance player 1 swipe in"}
         }
      )
      (KB_F6
         alt
         "name that dance player 2 swipe-in"
         (filters game)
         {if {== name_that_dance {game_panel get type}}
            {if {game_panel get mg_panel}
               {{game_panel get mg_panel} cheat_swipe 1}
            }
            {cheat_display show "name that dance player 2 swipe in"}
         }
      )
      (KB_F7
         alt
         "Save bustamove created move"
         {bam_write_created}
         {cheat_display show "Saved move"}
      )
      (KB_F8
         alt
         "Record next bustamove attempt"
         {bam_record_attempt}
         {cheat_display show "Recording next attempt"}
      )
      (KB_F2
         ctrl
         "choose routine builder move 2"
         (filters game)
         {if {== routine_builder {game_panel get type}}
            {if {game_panel get mini_game}
               {{game_panel get mini_game} choose_move_cheat 2}
            }
            {cheat_display show "choose routine builder move 2"}
         }
      )
      (KB_F3
         ctrl
         "choose routine builder move 3"
         (filters game)
         {if {== routine_builder {game_panel get type}}
            {if {game_panel get mini_game}
               {{game_panel get mini_game} choose_move_cheat 3}
            }
            {cheat_display show "choose routine builder move 3"}
         }
      )
      (KB_F4
         ctrl
         "choose routine builder move 4"
         (filters game)
         {if {== routine_builder {game_panel get type}}
            {if {game_panel get mini_game}
               {{game_panel get mini_game} choose_move_cheat 4}
            }
            {cheat_display show "choose routine builder move 4"}
         }
      )
      (1
         ctrl
         "choose routine builder accept pattern"
         (filters game)
         {if {== routine_builder {game_panel get type}}
            {game_panel cheat_choose_pattern 1}
            {cheat_display show "choose routine builder move 4"}
         }
      )
      (2
         ctrl
         "choose routine builder reject pattern"
         (filters game)
         {if {== routine_builder {game_panel get type}}
            {game_panel cheat_choose_pattern 0}
            {cheat_display show "choose routine builder move 4"}
         }
      )
      (c
         "player 1 dance random move"
         (filters game)
         {do
            ($minigame "")
            {if {== cascade {hamprovider get game_stage}}
               {if {== dance_battle {game_panel get type}}
                  {set $minigame {game_panel get mini_game}}
               }
            }
            {if {== concentration {game_panel get type}}
               {set $minigame {game_panel get mg_panel}}
            }
            {if $minigame
               {$minigame cheat_move 0}
               {cheat_display show "mini game cheat player 1 complete random move"}
            }
         }
      )
      (c
         ctrl
         "player 2 dance random move"
         (filters game)
         {do
            ($minigame "")
            {if {== cascade {hamprovider get game_stage}}
               {if {== dance_battle {game_panel get type}}
                  {set $minigame {game_panel get mini_game}}
               }
            }
            {if {== concentration {game_panel get type}}
               {set $minigame {game_panel get mg_panel}}
            }
            {if $minigame
               {$minigame cheat_move 0}
               {cheat_display show "mini game cheat player 2 complete random move"}
            }
         }
      )
      (KB_F9
         "Check if gameplay timer is running"
         {cheat_display show_bool
            "Gameplay timer running"
            {meta_performer is_gameplay_timer_running}
         }
      )
      (KB_F10
         "Add 1 minute of played time"
         {cheat_display show "Adding 1 minute to gameplay timer"}
         {meta_performer jump_gameplay_timer_forward 60}
      )
      (KB_F11
         "Add 1 hour of played time"
         {cheat_display show "Adding 1 hour to gameplay timer"}
         {meta_performer jump_gameplay_timer_forward 3600}
      )
      (KB_F12
         "Add 1 day of played time"
         {cheat_display show "Adding 1 day to gameplay timer"}
         {meta_performer jump_gameplay_timer_forward 86400}
      )
   #endif
   (0
      "Pause/unpause game"
      (filters game)
      {toggle_time_paused}
   )
   (1
      "Player 1: Toggle Auto-Play"
      (filters game)
      {cheat_display show_bool "Player 1 Autoplay" {toggle_autoplay 0}}
   )
   #ifndef DEMO
   (1
      alt
      "Player 1: Cycle Auto-Play rating levels"
      (filters game)
      {cheat_display show {sprint "Player 1 Autoplay :" {cycle_autoplay 0}}}
   )
   (1
      ctrl
      "Toggle Bust-A-Move debug display"
      (filters game)
      {set $bam_debug {! $bam_debug}}
      {cheat_display show_bool "Bust-A-Move debug" $bam_debug}
   )
   (1
      ctrl
      alt
      "Display left RhythmDetector debug graphs"
      (filters game)
      {set $left_rhythm_detector_debug {! $left_rhythm_detector_debug}}
      {cheat_display show_bool
         "Left RhythmDetector debug"
         $left_rhythm_detector_debug
      }
      {if_else $left_rhythm_detector_debug
         {{{$hud_panel find rhythm_battle} find RhythmLeft.rhg} add_debug_graphs}
         {{{$hud_panel find rhythm_battle} find RhythmLeft.rhg} remove_debug_graphs}
      }
   )
   #endif
   (2
      "Player 2: Toggle Auto-Play"
      (filters game)
      {cheat_display show_bool "Player 2 Autoplay" {toggle_autoplay 1}}
   )
   #ifndef DEMO
      (2
         alt
         "Player 2: Cycle Auto-Play rating levels"
         (filters game)
         {cheat_display show {sprint "Player 2 Autoplay :" {cycle_autoplay 1}}}
      )
      (2
         ctrl
         "Stay on Bust-A-Move play"
         (filters game)
         {set $stay_on_bam_play {! $stay_on_bam_play}}
         {cheat_display show_bool "Stay on Bust-A-Move play" $stay_on_bam_play}
      )
      (2
         ctrl
         alt
         "Display right RhythmDetector debug graphs"
         (filters game)
         {set $right_rhythm_detector_debug {! $right_rhythm_detector_debug}}
         {cheat_display show_bool
            "Right RhythmDetector debug"
            $right_rhythm_detector_debug
         }
         {if_else $right_rhythm_detector_debug
            {{{$hud_panel find rhythm_battle} find RhythmRight.rhg} add_debug_graphs}
            {{{$hud_panel find rhythm_battle}
               find
               RhythmRight.rhg} remove_debug_graphs

            }
         }
      )
      (5
         "Cycle through graphical character debugging in game"
         (filters game)
         {next_character_driver}
      )
      (6
         "get profile XP"
         {if_else {profile_mgr has_active_profile}
            {do
               ($profile {profile_mgr get_active_profile})
               ($rank {$profile get_rank})
               {cheat_display show
                  {sprint
                     {$profile get_name}
                     ": xp: "
                     {$rank get_score}
                     " rank: "
                     {$rank get_rank_number}
                  }
               }
            }
            {cheat_display show "Sign-in to a profile"}
         }
      )
      (7
         "award profile XP - small"
         {set $xp_force_award_small {! $xp_force_award_small}}
         {cheat_display show_bool
            "XP Awards - Forcing Small Task Per Song"
            $xp_force_award_small
         }
      )
      (7
         ctrl
         "award profile XP - medium"
         {set $xp_force_award_medium {! $xp_force_award_medium}}
         {cheat_display show_bool
            "XP Awards - Forcing Medium Task Per Song"
            $xp_force_award_medium
         }
      )
      (&
         ctrl
         "award profile XP - large"
         {set $xp_force_award_large {! $xp_force_award_large}}
         {cheat_display show_bool
            "XP Awards - Forcing Large Task Per Song"
            $xp_force_award_large
         }
      )
      (7
         alt
         "award profile XP - one-time"
         {set $xp_force_award_one_time {! $xp_force_award_one_time}}
         {cheat_display show_bool
            "XP Awards - Forcing One-Time Task Per Song"
            $xp_force_award_one_time
         }
      )
      (7
         ctrl
         alt
         "award profile XP - whole rank each time"
         {set $xp_force_one_rank_up {! $xp_force_one_rank_up}}
         {cheat_display show_bool
            "XP Awards - Forcing One Rank Up Per Song"
            $xp_force_one_rank_up
         }
      )
      (&
         ctrl
         alt
         "award profile XP - all"
         {set $xp_force_award_all {! $xp_force_award_all}}
         {cheat_display show_bool
            "XP Awards - Forcing All Ranks After Next Song"
            $xp_force_award_all
         }
      )
      (9
         "Record 1 photo taken"
         {if_else {profile_mgr has_active_profile}
            {do
               ($profile {profile_mgr get_active_profile})
               ($progress {$profile get_accomplishment_progress})
               {$progress set_freestyle_photo_count
                  {'+' 1 {$progress get_freestyle_photo_count}}
               }
               {cheat_display show
                  {sprint
                     {$profile get_name}
                     ": photos taken "
                     {$progress get_freestyle_photo_count}
                  }
               }
            }
            {cheat_display show
               "Sign-in to a profile and load save data to record photos"
            }
         }
      )
      (9
         ctrl
         "Record 10 photos taken"
         {if_else {profile_mgr has_active_profile}
            {do
               ($profile {profile_mgr get_active_profile})
               ($progress {$profile get_accomplishment_progress})
               {$progress set_freestyle_photo_count
                  {'+' 10 {$progress get_freestyle_photo_count}}
               }
               {cheat_display show
                  {sprint
                     {$profile get_name}
                     ": photos taken "
                     {$progress get_freestyle_photo_count}
                  }
               }
            }
            {cheat_display show
               "Sign-in to a profile and load save data to record photos"
            }
         }
      )
      (9
         alt
         ctrl
         "Record 100 photos taken"
         {if_else {profile_mgr has_active_profile}
            {do
               ($profile {profile_mgr get_active_profile})
               ($progress {$profile get_accomplishment_progress})
               {$progress set_freestyle_photo_count
                  {'+' 100 {$progress get_freestyle_photo_count}}
               }
               {cheat_display show
                  {sprint
                     {$profile get_name}
                     ": photos taken "
                     {$progress get_freestyle_photo_count}
                  }
               }
            }
            {cheat_display show
               "Sign-in to a profile and load save data to record photos"
            }
         }
      )
      (&
         "Next Loading Tip entry"
         (filters game meta)
         {cheat_next_loading_tip_entry}
      )
      ('*' "Reload Campaign Data" {reload_campaign_data})
      ('['
         "Toggle in-game timer stats"
         (filters game)
         {rnd toggle_timers_verbose}
      )
      ('[' ctrl "UI overlay" {rnd toggle_overlay ui})
      ('{' ctrl "Heap overlay" {rnd toggle_overlay heap})
      (';'
         "Cycle Loading tip mode"
         (filters game meta)
         {cheat_next_loading_tip_mode}
      )
      ('{'
         "Previous venue state"
         (filters game)
         {do
            ($list (low high awesome))
            ($index -1)
            {if {find_elem $list {hamprovider get performance} $index}
               {-- $index}
               {if {>= $index 0}
                  {handle (game_panel force_venue_state {elem $list $index})}
                  {cheat_display show {sprint "Venue State: " {elem $list $index}}}
               }
            }
         }
      )
      ('}'
         "Next venue state"
         (filters game)
         {do
            ($list (low high awesome))
            ($index -1)
            {if {find_elem $list {hamprovider get performance} $index}
               {'++' $index}
               {if {< $index {size $list}}
                  {handle (game_panel force_venue_state {elem $list $index})}
                  {cheat_display show {sprint "Venue State: " {elem $list $index}}}
               }
            }
         }
      )
      (a
         ctrl
         "Game: Load next character 0"
         (filters game)
         {if $hamwardrobe
            {{$hamwardrobe get_character 0} next_character}
         }
      )
      (A
         "Meta: unlock all"
         (filters meta)
         {if {meta is_up}
            {cheat_display show_bool "Unlock All" {toggle_unlock_all}}
         }
      )
      (A
         ctrl
         "Keep pressing the A button every 1/2 second"
         {ui set_button_spam {! {ui button_spam}}}
         {cheat_display show_bool "A button repeat " {ui button_spam}}
      )
      (a
         alt
         "Skip BiD move"
         {handle (game_panel on_skip)}
         {cheat_display show "Skip BiD move"}
      )
      (A
         alt
         "Previous BiD move"
         {handle (game_panel on_previous)}
         {cheat_display show "Previous BiD move"}
      )
      (b
         "Hide characters"
         (filters game)
         {if $hamdirector
            {do
               ($world {$hamdirector get cur_world})
               {-- $cheat.hide_char}
               {if {< $cheat.hide_char 0}
                  {set $cheat.hide_char 7}
               }
               {do
                  ($show_main_dancer {== 0 {& $cheat.hide_char 1}})
                  ($show_backup_dancers {== 0 {& $cheat.hide_char 2}})
                  ($show_crowd {== 0 {& $cheat.hide_char 4}})
                  {$world iterate
                     Character
                     $c
                     {cond
                        ({has_substr
                           {$c name}
                           "player"}
                           {$c set_showing $show_main_dancer}
                        )
                        ({has_substr
                           {$c name}
                           "backup"}
                           {$c set_showing $show_backup_dancers}
                        )
                        {$c set_showing $show_crowd}
                     }
                  }
                  {$world iterate
                     RndDir
                     $r
                     {if
                        {'||'
                           {has_substr {$r name} "move_feedback"}
                           {has_substr {$r name} "phrase_meter"}
                        }
                        {$r set_showing $show_main_dancer}
                     }
                  }
                  {cheat_display show
                     {sprintf
                        "Showing Characters - main: %s, backup: %s, crowd: %s"
                        {if_else $show_main_dancer
                           "yes"
                           "no"
                        }
                        {if_else $show_backup_dancers
                           "yes"
                           "no"
                        }
                        {if_else $show_crowd
                           "yes"
                           "no"
                        }
                     }
                  }
               }
            }
         }
      )
      (B
         "Game: Toggle Boombox"
         (filters game)
         {do
            ($boomy {find_obj {$hamdirector get cur_world} boombox.grp})
            ($score {find_obj {$hamdirector get cur_world} boombox_score.grp})
            ($visible TRUE)
            {if {&& $boomy $score}
               {set $visible {! {$boomy showing}}}
               {$boomy set_showing $visible}
               {$score set_showing $visible}
               {cheat_display show_bool "Boomy " $visible}
            }
         }
      )
      #ifdef HX_XBOX
      (b
         ctrl
         "Toggle Speech Recognition"
         (filters natural_input)
         (value_bool {speech_mgr is_recognizing})
         {speech_mgr set_recognizing {! {speech_mgr is_recognizing}}}
         {cheat_display show_bool "Speech Recognition" {speech_mgr is_recognizing}}
      )
      (b
         alt
         "Toggle Speech Recognition overlay"
         (filters natural_input)
         {cheat_display show_bool
            "Speech Recognition overlay"
            {rnd toggle_overlay speech_mgr}
         }
      )
      (B ctrl "Toggle blacklight mode" {ui toggle_letterbox})
      #endif
      (c
         "Game: Cycle CamShots of matching Band Configuration"
         (filters game)
         {cond
            ({game_panel is_up}
               {if $hamdirector
                  {$hamdirector cycle_shot}
               }
            )
         }
      )
      (c
         ctrl
         "Game: Display fitness mode (calories)"
         (filters game)
         {rnd toggle_overlay fitness}
         {rnd toggle_overlay fitness_meter}
      )
      (c
         alt
         "Isolate Main Character (there is no recovery)"
         (filters game)
         {do
            ($wrld {$hamdirector get cur_world})
            ($name "")
            {if $wrld
               {$wrld iterate
                  Draw
                  $draw
                  {set $name {$draw name}}
                  {if_else {'||' {== $name "player0.grp"} {== $name "player0"}}
                     {$draw set_showing TRUE}
                     {$draw set_showing FALSE}
                  }
               }
            }
            {cheat_display show "Isolate Character... no recovery!"}
         }
      )
      (C
         "Toggle Current CamShot Info"
         (filters game)
         {rnd toggle_overlay camera}
         {if $hamdirector
            {handle ({$hamdirector get cur_shot} update_overlay)}
         }
      )
      (C
         ctrl
         "Toggle crowd animation overlay"
         (filters game)
         {if $hamwardrobe
            {$hamwardrobe set overlay_enabled {! {$hamwardrobe get overlay_enabled}}}
         }
      )
      (d
         "Fake player 3 skeleton"
         (filters natural_input)
         {cheat_display show
            {sprintf "Fake shell skeleton 3: %i" {cycle_fake_shell_skeletons 2}}
         }
      )
      (d
         alt
         "Toggle use of procedural eye darts"
         {set $cheat.disable_eye_darts {! $cheat.disable_eye_darts}}
         {cheat_display show_bool
            "Disable character eye darts"
            $cheat.disable_eye_darts
         }
      )
      (d
         ctrl
         "Game: Toggle Song Recording Dancer"
         (filters game)
         {cheat_display show {sprintf "Dancer: %s" {cycle_test_dancer}}}
      )
      (D
         "Cycle HamBattleData"
         (filters game)
         {if {== dance_battle {game_panel get type}}
            {do
               ($moves {$hud_panel get moves_dir})
               ($battle_list {array 0})
               ($cur_name {game_panel get battle_obj_name})
               ($cur_index -1)
               ($new_name "")
               {$moves iterate
                  HamBattleData
                  $btl
                  {if {== $cur_name {$btl get name}}
                     {set $cur_index {size $battle_list}}
                  }
                  {push_back $battle_list $btl}
               }
               {if {>= $cur_index 0}
                  {'++' $cur_index}
                  {if {>= $cur_index {size $battle_list}}
                     {set $cur_index 0}
                  }
                  {set $new_name {{elem $battle_list $cur_index} get name}}
                  {game_panel set battle_obj_name $new_name}
                  {cheat_display show {sprint "Setting battle to " $new_name}}
               }
            }
         }
      )
      (D ctrl "Trigger Dirty Disc Error" {platform_mgr trigger_disk_error})
      (D
         alt
         "Toggle Development Menu"
         {ui toggle_dev_menu}
         {if {== {ui current_screen} choose_mode_screen}
            {choose_mode_screen refresh}
         }
         {if {== {ui current_screen} campaign_diffselect_screen}
            {campaign_diffselect_screen refresh}
         }
         {if_else {== {ui show_dev_menu} 0}
            {cheat_display show "Development menu DISABLED"}
            {cheat_display show "Development menu ENABLED"}
         }
      )
      (e
         "Toggle depth buffer displays"
         {do
            ($depth_left {cursor_panel find depth_buffer_left.grp})
            ($depth_right {cursor_panel find depth_buffer_right.grp})
            {$depth_left set_showing {! {$depth_right showing}}}
            {$depth_right set_showing {! {$depth_right showing}}}
            {cheat_display show_bool "Depth buffer display" {$depth_right showing}}
         }
      )
      (e
         alt
         "Toggle swipe detection debug overlay"
         (filters natural_input)
         {rnd toggle_overlay swipe_direction}
      )
      (e
         ctrl
         "Toggles on/off visual debugging of eye interest object system"
         (filters game)
         {if $hamdirector
            {$hamdirector toggle_debug_interests}
            {cheat_display show "toggle visual debugging of eye interest system"}
         }
      )
      (E
         "Enable Extra songs"
         {set $extra_songs {! $extra_songs}}
         {cheat_display show_bool
            "Including extra songs "
            $extra_songs
            "\nOnly works when toggled before proceeding past the main menu"
         }
      )
      (f
         "Fake player 2 skeleton"
         (filters natural_input)
         {cheat_display show
            {sprintf "Fake shell skeleton 2: %i" {cycle_fake_shell_skeletons 1}}
         }
      )
      (F
         ctrl
         "Cycle active fake shell skeletons"
         (filters natural_input)
         {cheat_display show
            {sprintf
               "Active fake shell skeleton %i"
               {cycle_active_fake_shell_skeleton}
            }
         }
      )
      (f
         ctrl
         "Toggle move detection overlay"
         (filters natural_input)
         {cheat_display show {sprintf "Move overlay: %s" {toggle_move_overlay}}}
      )
      (f
         alt
         "Toggle per-limb feedback"
         (filters natural_input)
         {cheat_display show_bool "Per-limb feedback" {toggle_char_feedback}}
      )
      (f
         ctrl
         alt
         "Toggle pose fatalities"
         {set $disable_fatalities {! $disable_fatalities}}
         {cheat_display show_bool "Disable pose fatalities" $disable_fatalities}
      )
      (F
         ctrl
         alt
         "Restart pose fatalities after finish"
         {set $restart_fatals {! $restart_fatals}}
         {cheat_display show_bool "Restart pose fatalities" $restart_fatals}
      )
      (F
         "Cycle Free Camera"
         (filters game)
         {cycle_free_camera}
      )
      (g
         "Fake player 1 skeleton"
         (filters natural_input)
         {cheat_display show
            {sprintf "Fake shell skeleton 1: %i" {cycle_fake_shell_skeletons 0}}
         }
      )
      (g
         ctrl
         "Cycle gameplay cams"
         (filters game)
         {if $hamdirector
            {if {! $cheat_gameplay_cams}
               {do
                  ($wrld {$hamdirector get cur_world})
                  {if $wrld
                     {set $cheat_gameplay_cams {array 0}}
                     {$wrld iterate
                        CamShot
                        $cam
                        {if {find_elem (REQUIRED_CAM_CATS) {$cam get category}}
                           {push_back $cheat_gameplay_cams $cam}
                        }
                     }
                     {sort $cheat_gameplay_cams}
                  }
               }
            }
            {if $cheat_gameplay_cams
               {do
                  ($index 0)
                  ($shot "")
                  {find_elem $cheat_gameplay_cams {$hamdirector get cur_shot} $index}
                  {if {>= $index 0}
                     {'++' $index}
                     {if {>= $index {size $cheat_gameplay_cams}}
                        {set $index 0}
                     }
                     {set $shot {elem $cheat_gameplay_cams $index}}
                     {$hamdirector force_shot {$shot name}}
                     {cheat_display show $shot}
                  }
               }
            }
         }
      )
      (g
         alt
         "Hide/show Bustamove recording ghost"
         {set $hide_bam_ghost {! $hide_bam_ghost}}
         {cheat_display show_bool "Hide BAM ghost" $hide_bam_ghost}
      )
      (G "Print faders" {audio print_faders})
      (G
         ctrl
         "Swap fake skeleton sides"
         {do
            ($swapped {! {get_fake_skeleton_sides_swapped}})
            {set_fake_skeleton_sides_swapped $swapped}
            {cheat_display show_bool "Fake skeleton's sides swapped" $swapped}
         }
      )
      (h
         "Toggle HUD"
         (filters game)
         (value_bool {&& $hud_panel {$hud_panel showing}})
         {if $hud_panel
            {$hud_panel set_showing {! {$hud_panel showing}}}
            {cheat_display show_bool "HUD" {$hud_panel showing}}
         }
      )
      (h
         alt
         "Upload fake partylists to RC for the current active profile."
         {playlist_sort_mgr fake_add_playlists_to_rc}
         {cheat_display show
            "Uploading fake partylists to RC for the current active profile."
         }
      )
   #endif
   (H "High five!" {handle (hamprovider high_five)})
   #ifndef DEMO
   (H
      ctrl
      "Reload hud/gameplay scripts and milo files"
      (filters game)
      {game_panel reload_data}
      {game_panel init}
   )
   (h
      ctrl
      alt
      "Print HamProvider messages"
      {set $hamprovider_print {! $hamprovider_print}}
      {cheat_display show_bool "Print HamProvider messages" $hamprovider_print}
   )
   (i
      "Force INTRO_QUICK camshot"
      (filters game)
      {set $cheat.intro_quick {! $cheat.intro_quick}}
      {cheat_display show_bool "Force INTRO_QUICK camshot" $cheat.intro_quick}
   )
   (i
      ctrl
      "Toggle eye debug overlay"
      (filters game)
      {rnd toggle_overlay eye_status}
   )
   (i
      alt
      "Show final pose effect"
      (filters game)
      {if $hud_panel
         {$hud_panel final_pose_snapshot}
      }
   )
   (I
      "buy dc1 import pack"
      {if_else {store_panel is_up}
         {store_panel buy_dc1_import}
         {print "store_panel is not up\n"}
      }
   )
   (I
      alt
      "buy dc2 import pack"
      {if_else {store_panel is_up}
         {store_panel buy_dc2_import}
         {print "store_panel is not up\n"}
      }
   )
   (I
      ctrl
      alt
      "buy dc2 proof of purchase"
      {if_else {store_panel is_up}
         {store_panel buy_dc2_pop}
         {print "store_panel is not up\n"}
      }
   )
   (j
      "Dump scoring stats"
      {set $dump_scoring_stats {! $dump_scoring_stats}}
      {cheat_display show_bool "Dump scoring stats" $dump_scoring_stats}
   )
   (j
      ctrl
      "Toggle use of eye jitter in lookats"
      {set $cheat.disable_eye_jitter {! $cheat.disable_eye_jitter}}
      {cheat_display show_bool
         "Disable character eye jitter"
         $cheat.disable_eye_jitter
      }
   )
   (J
      "Send a SmartGlass message to all clients"
      {platform_mgr smart_glass_send 0 (hello world)}
   )
   (k
      "Show/hide last Known Issues display"
      {cheat_display show_bool "Last Known Issues" {toggle_last_known_issues}}
   )
   (k
      ctrl
      "Allow Known Issues display"
      {cheat_display show_bool "Allow Known Issues" {toggle_allow_known_issues}}
   )
   (k
      alt
      ctrl
      "Burn 100 calories"
      {if_else {profile_mgr has_active_profile}
         {do
            ($profile {profile_mgr get_active_profile})
            ($stats {$profile get_stats})
            {$stats increment_count kCountStat_TotalCaloriesBurned 100}
            {cheat_display show
               {sprint
                  {$profile get_name}
                  ": calories burned "
                  {$stats get_count kCountStat_TotalCaloriesBurned}
               }
            }
         }
         {cheat_display show
            "Sign-in to a profile and load save data to burn calories"
         }
      }
   )
   (K "Toggle HAQ Printouts" {toggle_haq_printouts})
   (l
      "Toggle loop visualization"
      (filters game)
      {rnd toggle_overlay loop_viz}
   )
   (l
      alt
      "Toggles blocking of RockCentral login on/off"
      {rock_central toggle_block_login}
      {cheat_display show_bool
         "Blocking of RockCentral login is"
         {rock_central is_login_blocked}
      }
   )
   (L "Toggle audio levels" {synth toggle_hud})
   (m
      "Toggle metronome"
      (filters game)
      {if {game_panel is_up}
         {master toggle_metronome}
      }
   )
   (m
      ctrl
      "Game: Toggle midi audio"
      (filters game meta)
      {if {game_panel is_up}
         {do
            ($midi_cross_fader {synth find midi_music_cross_fade.fade FALSE})
            ($active {! {midi_player get active}})
            {midi_player set active $active}
            {if $midi_cross_fader
               {$midi_cross_fader set level 0}
            }
            {cheat_display show {sprint "Midi playing " {midi_player get active}}}
         }
      }
   )
   (m
      alt
      "Get latest strings from Magnu"
      (filters writer)
      {do
         ($num_strings {magnu_refresh_strings})
         {cheat_display show
            {sprintf "Found %i new strings from Magnu" $num_strings}
         }
      }
   )
   (m
      ctrl
      "Game: Toggle crowd meter/Meta: Mute shell music"
      (filters game meta)
      {if_else {game_panel is_up}
         {toggle_crowd_meter}
         {toggle_mute_shell_music}
      }
   )
   (M
      "Toggle mutes all"
      (value_bool $mute_cheat)
      {toggle_mute_global}
   )
   (M
      ctrl
      "Toggle motd cheat"
      (filters meta)
      {if {meta is_up}
         {cheat_display show_bool "Toggle Motd Cheat" {toggle_motd_cheat}}
      }
   )
   (n
      "Cycle notify level"
      (value {elem (disable overlay modal) $notify_level})
      {do
         ($names (disable overlay modal))
         {set $notify_level {mod {'++' $notify_level} {size $names}}}
         {cheat_display show {sprint "Notify level " {elem $names $notify_level}}}
      }
   )
   (N
      "Toggle Natal autoexposure"
      (filters natural_input)
      (value_bool {gesture_mgr using_autoexposure_tweak})
      {gesture_mgr toggle_autoexposure_tweak}
      {cheat_display show_bool
         "Camera night mode"
         {gesture_mgr using_autoexposure_tweak}
      }
   )
   (n
      ctrl
      "Toggle finale"
      (filters game)
      {if hamprovider
         {do
            ($finale {! {hamprovider get finale}})
            {hamprovider set finale $finale}
            {cheat_display show_bool "Finale: " $finale}
         }
      }
   )
   (n
      alt
      "Toggle always nag"
      {title_screen set always_nag {! {title_screen get always_nag}}}
      {cheat_display show_bool
         "Setting always_nag to "
         {title_screen get always_nag}
      }
   )
   (N
      ctrl
      "Increase nag count"
      {if {profile_mgr has_active_profile}
         {{profile_mgr get_active_profile} update_nag}
         {cheat_display show_bool
            "Updating nag count. Time to show? "
            {{profile_mgr get_active_profile} needs_to_be_nagged}
         }
      }
   )
   (N
      ctrl
      alt
      "Reset nags"
      {if {profile_mgr has_active_profile}
         {{profile_mgr get_active_profile} reset_nags}
         {cheat_display show "Resetting nags..."}
      }
   )
   (o
      "Toggle Post Proc overlay"
      {do
         ($ppo {rnd get_postproc_override})
         ($pps {rnd get_selected_postproc})
         {if_else $ppo
            {cheat_display show {sprint "top level override: " {path_name $ppo}}}
            {do
               {cheat_display show "No top level postproc override"}
               {cheat_display show {sprint "Selected postproc: " {path_name $pps}}}
            }
         }
         {rnd toggle_overlay postproc}
      }
   )
   (O "Print the symbol table" {print_symbol_table syms})
   (o
      alt
      "Lower depth alpha threshold"
      {do
         ($depth {cursor_panel find depth_buffer.mat})
         ($alpha_threshold {$depth get alpha_threshold})
         {$depth set alpha_threshold {- $alpha_threshold 1}}
         {cheat_display show
            {sprint "Alpha threshold: " {$depth get alpha_threshold}}
         }
      }
   )
   (o
      ctrl
      "Raise depth alpha threshold"
      {do
         ($depth {cursor_panel find depth_buffer.mat})
         ($alpha_threshold {$depth get alpha_threshold})
         {$depth set alpha_threshold {'+' $alpha_threshold 1}}
         {cheat_display show
            {sprint "Alpha threshold: " {$depth get alpha_threshold}}
         }
      }
   )
   (p
      alt
      "Toggle all postprocess effects"
      (filters game meta)
      {cheat_display show
         {sprint
            "PostProcs: "
            {if_else {rnd toggle_all_postprocs}
               "off"
               "on"
            }
         }
      }
   )
   (P "Toggle profiles overlay" {rnd toggle_overlay profiles})
   (q
      "Print Current Screen"
      (filters meta)
      {handle ({ui current_screen} print)}
   )
   (q
      ctrl
      "Toggle shuffling OMG moves"
      (filters game)
      {set $kill_omg_shuffle {! $kill_omg_shuffle}}
      {cheat_display show_bool "OMG move shuffle: " {! $kill_omg_shuffle}}
   )
   (Q
      "Toggle Credits Autoscroll"
      {if {== {ui current_screen} text_credits_screen}
         {text_credits_panel debug_toggle_autoscroll}
         {cheat_display show "Credits Autoscroll toggled"}
      }
   )
   (r "Toggle Framerate" {rnd toggle_overlay rate})
   (r
      ctrl
      "Game: Reset Detection"
      (filters game)
      {if {exists game}
         {game reset_detection}
      }
   )
   (r
      alt
      "Game: Toggle Song Recording"
      (filters game)
      {cheat_display show_bool "Song recording" {toggle_song_record}}
   )
   (R
      alt
      "Game: Toggle Song Recording for both players"
      (filters game)
      {cheat_display show_bool "Song recording" {toggle_song_record_double}}
   )
   (R
      ctrl
      "Use Restart as the default option in the end game screens"
      {set $cheat_focus_restart {! $cheat_focus_restart}}
      {cheat_display show
         {sprint
            "Default end game screen option: "
            {if_else $cheat_focus_restart
               "Restart"
               "Continue"
            }
         }
      }
   )
   (s
      "Toggle Skeleton Drawing"
      (filters natural_input)
      {cheat_display show_bool "Skeleton drawing" {ui toggle_draw_skeletons}}
   )
   (s
      ctrl
      "Cycle stub skeletons"
      (filters natural_input)
      {cheat_display show
         {sprintf "Num Stub Skeletons %i" {cycle_num_stub_skeletons}}
      }
   )
   #endif
   (s
      alt
      "Toggle between 30 and 60 frames per second"
      {do
         ($curr_sync {rnd get_sync})
         {rnd set_sync
            {if_else {== 1 $curr_sync}
               2
               1
            }
         }
         {cheat_display show
            {sprintf
               "Max frames per second: %d"
               {if_else {== 1 {rnd get_sync}}
                  60
                  30
               }
            }
         }
      }
   )
   #ifndef DEMO
   (s
      ctrl
      alt
      "Tilt the camera to scan the player"
      (filters game)
      {camera_tilt camera_scan}
   )
   (S
      "Toggle scoring info"
      (filters game)
      {if {game_panel is_up}
         {rnd toggle_overlay score}
      }
   )
   (S
      ctrl
      "Toggle supereasy info"
      (filters game)
      {set $supereasy_overlay_enabled {! $supereasy_overlay_enabled}}
      {cheat_display show
         {sprintf
            "Supereasy overlay %s"
            {if_else $supereasy_overlay_enabled
               "enabled"
               "disabled"
            }
         }
      }
   )
   (S
      ctrl
      alt
      "Skip Crew Throwdown step (crew select or crew photo)"
      {crew_throwdown_skip_step}
   )
   (t
      "Toggle time overlay"
      (filters game)
      {rnd toggle_overlay time}
   )
   (t
      ctrl
      "Toggle mip mode"
      {cheat_display show {sprintf "Mip mode %i" {mip_mode}}}
   )
   (t
      alt
      "Hi-reZ screen shot"
      (filters game meta)
      {rnd hi_res_screen 5}
   )
   (T
      "Toggle profiling timers"
      (filters game)
      {rnd toggle_timers}
      {rnd toggle_overlay rate}
   )
   (T ctrl "Toggle Show Tokens" {toggle_show_tokens_cheat})
   (u
      "Toggle fullscreen camera/skeleton debug drawing"
      (filters natural_input)
      {cheat_display show_bool
         "Fullscreen camera/skeleton"
         {ui toggle_full_screen_draw}
      }
   )
   (u
      ctrl
      "Toggle threaded skeleton update"
      (filters natural_input)
      {cheat_display show_bool
         "Threaded Skeleton Update"
         {toggle_skeletal_update_thread}
      }
   )
   (U
      "Toggle UI load times"
      (filters meta)
      (value_bool {ui showing_load_times})
      {ui toggle_load_times}
   )
   (v
      "Venue preference cycle"
      (filters meta)
      {meta cycle_venue_preference}
      {meta_performer setup_venue}
      {cheat_display show
         {sprintf "Venue Preference: %s" {meta get_venue_preference}}
      }
   )
   (V
      "Turn on verb barks"
      (filters game)
      {if {game_panel is_up}
         {if_else {action_bark_player get active}
            {action_bark_player set_active FALSE}
            {$hud_panel add_all_barks}
         }
         {cheat_display show_bool "actions barks " {action_bark_player get active}}
      }
   )
   (v
      ctrl
      "toggle VO spew"
      {if {game_panel is_up}
         {do
            ($new_state {! {game_panel get vo_spew}})
            {game_panel set vo_spew $new_state}
            {cheat_display show_bool "VO spew" $new_state}
         }
      }
   )
   (w
      "Win the game"
      (filters game)
      {if {game_panel is_up}
         {game_panel win}
      }
   )
   (w
      alt
      "Wave to turn on the light in the venue"
      (filters game)
      {wave_to_turn_on_light switch_wave_state}
   )
   (w
      ctrl
      "Choose BustAMove final sequence"
      {set $bam_final_sequence {mod {'+' $bam_final_sequence 1} 4}}
      {switch $bam_final_sequence
         (0 {cheat_display show "BustAMove final sequence: random"})
         (1 {cheat_display show "BustAMove final sequence: escalate"})
         (2 {cheat_display show "BustAMove final sequence: pairs"})
         (3 {cheat_display show "BustAMove final sequence: pairs plus"})
      }
   )
   (x
      "Show skeleton identification debug"
      (filters gesture)
      {cheat_display show_bool
         "Skeleton identification debug"
         {skeleton_identifier toggle_draw_debug}
      }
   )
   (x
      ctrl
      "Show skeleton chooser debug"
      (filters gesture)
      {cheat_display show_bool
         "Skeleton chooser debug"
         {skeleton_chooser toggle_draw_debug}
      }
   )
   (x
      alt
      "Toggle Kinect autoexposure"
      (filters game meta)
      {cheat_display show
         {sprint
            "Autoexposure: "
            {if_else {gesture_mgr toggle_autoexposure}
               "on"
               "off"
            }
         }
      }
   )
   (X
      "Toggle shuttle"
      (filters game)
      {toggle_shuttle}
   )
   (X
      alt
      "Disable skeleton identification"
      (filters gesture)
      {gesture_mgr set_identification_enabled FALSE}
      {cheat_display show "Disable skeleton identification"}
   )
   (y
      "Toggle fake leaderboard upload failure"
      {toggle_fake_leaderboard_upload_failure}
   )
   (y
      ctrl
      "Toggle on character feedback"
      (filters game)
      {set $hide_character_feedback {! $hide_character_feedback}}
      {do
         ($wrld {$hamdirector get cur_world})
         ($feedback_list ())
         {resize $feedback_list 0}
         {push_back
            $feedback_list
            {find_obj $wrld phrase_meter draw.grp}
         }
         {push_back
            $feedback_list
            {find_obj $wrld text_feedback draw.grp}
         }
         {push_back $feedback_list {find_obj $wrld move_feedback}}
         {foreach $elem $feedback_list
            {if $elem
               {$elem set_showing {! $hide_character_feedback}}
            }
         }
      }
      {cheat_display show_bool
         "On character feedback "
         {! $hide_character_feedback}
      }
   )
   (Y
      "Game: Toggle mute master fader"
      (filters game)
      {if {game_panel is_up}
         {audio toggle_mute_master}
      }
   )
   (z
      "Toggle showing world"
      (filters game)
      (value_bool
         {&&
            $hamdirector
            {$hamdirector get cur_world}
            {{$hamdirector get cur_world} showing}
         }
      )
      {if {&& $hamdirector {$hamdirector get cur_world}}
         {{$hamdirector get cur_world} set_showing
            {! {{$hamdirector get cur_world} showing}}
         }
         {cheat_display show_bool "VENUE" {{$hamdirector get cur_world} showing}}
      }
   )
   #endif
   (z
      ctrl
      "Toggle pause on skeleton loss"
      (filters natural_input)
      {cheat_display show
         {sprintf
            "Pause on skeleton loss : %s"
            {do
               {gesture_mgr toggle_pause_on_skeleton_loss}
               {cond
                  ({==
                        {gesture_mgr pause_on_skeleton_loss}
                        0}
                     "No pause, flashcards drop out"
                  )
                  ({==
                        {gesture_mgr pause_on_skeleton_loss}
                        1}
                     "No pause, flashcards don't drop out"
                  )
                  ({== {gesture_mgr pause_on_skeleton_loss} 2} "Pause on skeleton loss")
                  "Meh?"
               }
            }
         }
      }
      {if {pause_panel is_up}
         {pause_panel update_skeleton_status}
      }
   )
   #ifndef DEMO
   (Z "Print the particle pool size" {print_particle_pool_size})
   ('+'
      "Toggle Store Metadata Index"
      (value {net_cache_mgr server_type})
      (filters store)
      {cheat_display show
         {sprintf
            "Music Store now using %s metadata"
            {net_cache_mgr cheat_next_server}
         }
      }
   )
   (KB_F5 "screen capture the kinect depth buffer" {camera_dump})
   (KB_F5
      ctrl
      "Fake 'xbox' voice command"
      (filters game)
      {speech_mgr emulate_input "xbox"}
   )
   (KB_F6
      ctrl
      "Fake 'xbox previous' voice command"
      (filters game)
      {speech_mgr emulate_input "xbox previous"}
   )
   (KB_F7
      ctrl
      "Fake 'xbox skip' voice command"
      (filters game)
      {speech_mgr emulate_input "xbox skip"}
   )
   (KB_F8
      ctrl
      "Slow down in rehearse"
      (filters game)
      {{find_obj $hud_panel practice_options} select_menu ingame_slowmo}
      {cheat_display show "Rehearse slow down"}
   )
   (KB_F9
      ctrl
      "Speed up in rehearse"
      (filters game)
      {{find_obj $hud_panel practice_options} select_menu ingame_speedup}
      {cheat_display show "Rehearse speed up"}
   )
   (')' "Win with 0 stars" {fake_win 0})
   (! "Win with 1 star" {fake_win 1})
   ('@' "Win with 2 stars" {fake_win 2})
   (# "Win with 3 stars" {fake_win 3})
   ('$' "Win with 4 stars" {fake_win 4})
   ('%' "Win with 5 stars" {fake_win 5})
   ('^' "Win with 6 stars" {fake_win 6})
   (<
      "Jump backward a bit in time"
      {if_else {&& {exists game} {game_panel is_up}}
         {game jump {- {game get_song_ms} 1000.0}}
         {speech_mgr reload}
      }
   )
   (KB_UP
      "Double song speed / Paused: increase vocal pitch window size"
      {if_else {rnd overlay_showing speech_mgr}
         {voice_input_panel confidence_up}
         {if {game_panel is_up}
            {change_speed 2.0}
         }
      }
   )
   (KB_DOWN
      "Halve song speed / Paused: decrease vocal pitch window size"
      {if_else {rnd overlay_showing speech_mgr}
         {voice_input_panel confidence_down}
         {if {game_panel is_up}
            {change_speed 0.5}
         }
      }
   )
   (KB_LEFT
      "Rewind back in time 3 seconds"
      (filters game)
      {if {game_panel is_up}
         {game jump {max 0 {- {'*' 1000 {master stream_time}} 3000}}}
      }
   )
   (KB_UP
      ctrl
      "Fast forward to song end minus 10 seconds"
      (filters game)
      {if {game_panel is_up}
         {game jump {- {master song_duration_ms} 10000}}
      }
   )
   (KB_DOWN
      ctrl
      "Fast forward to song end minus 20 seconds"
      (filters game)
      {if {game_panel is_up}
         {game jump {- {master song_duration_ms} 20000}}
      }
   )
   (KB_RIGHT
      "Fast forward in time 3 seconds"
      (filters game)
      {if {game_panel is_up}
         {game jump
            {min {master song_duration_ms} {'+' {'*' 1000 {master stream_time}} 3000}}
         }
      }
   )
   (KB_RIGHT
      ctrl
      "Rotate Debug Skeleton drawing by 90 degrees"
      (filters natural_input)
      {cheat_display show
         {sprintf "Skeleton rotation: %f degrees" {ui next_skeleton_draw_rot}}
      }
   )
   (KB_ENTER
      "Skills - skip to next section/ Multiplayer - skip to end of section"
      (filters game)
      {switch {game_panel get_type}
         (practice {game_panel cheat_skip_section})
         (multiplayer {game_panel cheat_skip_phase})
         (rhythm_battle {game flush_move_record})
      }
   )
   (':'
      "Toggle pink error shaders"
      (filters game meta)
      {cheat_display show
         {sprint
            "Pink error shaders (for uncached shaders): "
            {if_else {rnd toggle_error_shaders}
               "on"
               "off"
            }
         }
      }
   )
   ('['
      alt
      "Previous performance level"
      (filters game)
      {if {== {game_panel get_type} perform}
         {game_panel force_performance_previous}
      }
   )
   (']'
      alt
      "Next performance level"
      (filters game)
      {if {== {game_panel get_type} perform}
         {game_panel force_performance_next}
      }
   )
   (>
      "Toggle Language"
      (filters writer)
      (value {system_language})
      {do
         ($old_notify_level $notify_level)
         {set $notify_level 0}
         {switch_system_language}
         {ui reload_strings}
         {cheat_display show {sprint "System language set to " {system_language}}}
         {set $notify_level $old_notify_level}
      }
   )
   ('\\'
      "Sync and reload locale files"
      (filters writer)
      {sync_reload_locale}
      {cheat_display show "Locale files synced and reloaded"}
   )
   ('?'
      "Switch camera area"
      (filters game)
      {if $hamdirector
         {do
            ($output "Reset")
            ($cur_shot {$hamdirector get cur_shot})
            {'++' $cheat.cam_area}
            {if {> $cheat.cam_area 2}
               {set $cheat.cam_area 0}
            }
            {cond
               ({== $cheat.cam_area 0}
                  {$hamdirector force_shot ""}
               )
               ({== $cheat.cam_area 1}
                  {$hamdirector force_shot area1_far01.shot}
                  {set $output "Area1"}
               )
               ({== $cheat.cam_area 2}
                  {$hamdirector force_shot area2_far01.shot}
                  {set $output "Area2"}
               )
            }
            {cheat_display show {sprint "Venue Area: " $output}}
         }
      }
   )
   (' '
      "Show next camera output (RGB/depth/off)"
      (filters natural_input)
      {cheat_display show
         {sprintf "Camera output: %s" {ui display_next_camera_output}}
      }
   )
   (' '
      alt
      "Toggle player visualizer"
      (filters natural_input)
      {if $hamdirector
         {do
            ($vis {! {$hamdirector get player_freestyle}})
            {$hamdirector set player_freestyle $vis}
            {set $force_freestyle $vis}
            {cheat_display show_bool "Player Visualizer: " $vis}
         }
      }
   )
   #endif
)