#include ham_macros.dta
#define COORD_SYSTEMS (
   "kCoordCamera"
   "kCoordLeftArm"
   "kCoordRightArm"
   "kCoordLeftLeg"
   "kCoordRightLeg"
)
(CharFeedback
   (description "Drawable for on-character filter feedback/visualization")
   (superclasses Draw)
   (allowed_dirs RndDir)
   (ext cf)
   (editor
      (target
         object
         (class Character)
         (help "Character for displaying filter feedback")
         (no_test)
      )
      (fail_mat
         object
         (class Mat)
         (help "Mat to show on the character")
      )
      (fail_trigger_secs
         float
         (help "Min time a node must be failing to start flash")
      )
      (min_fail_secs float (help "Min time a node must be flashing to stop"))
      (fade_secs float (help "Time (secs) to fade in/out"))
      (test_limbs
         bitfield
         (list
            (
               "kFeedbackLeftArm"
               "kFeedbackRightArm"
               "kFeedbackLeftLeg"
               "kFeedbackRightLeg"
            )
         )
         (help "Test limb(s) for debugging")
      )
      (trigger_fail
         script
         (script {$this trigger_fail TRUE})
         (help "Put test node into failure state")
      )
      (trigger_success
         script
         (script {$this trigger_fail FALSE})
         (help "Put test node into success state")
      )
   )
   (types)
)
(HamLabel
   (description "Label with Hammer-specific features")
   (allowed_dirs RndDir)
   (superclasses UILabel)
   (ext lbl)
   (editor)
   (init {set [styles 0 font_resource] "default"})
   (types)
   (resources_path "../ui/resource/fonts/")
)
(HamCamShot
   (description "Hammer specific camera shot")
   (superclasses CamShot)
   (allowed_dirs RndDir)
   (ext shot)
   (editor
      (targets
         (array
            (struct
               (target
                  symbol
                  (list {$this list_targets})
                  (refresh targets)
                  (help "Symbolic name of target")
               )
               (target_ptr
                  object
                  (class Trans)
                  (read_only TRUE)
                  (help "pointer to target")
               )
               (anim_group
                  symbol
                  (list
                     {do
                        ($drv {find_obj [targets {elem $milo_prop_path 1} target_ptr] main.drv})
                        {object_list
                           {if_else $drv
                              {$drv get clips}
                              ''
                           }
                           CharClipGroup
                        }
                     }
                  )
                  (help "Name of CharClipGroup to play on character")
                  (no_cdb)
               )
               (teleport bool (help "do we teleport this character?"))
               (to TRANSFORM (help "the transform to teleport the character to"))
               (return bool (help "return to original position after shot?"))
               (force_lod
                  int
                  (list ("kLODPerFrame" "kLOD0" "kLOD1" "kLOD2"))
                  (help
                     "Forces LOD, kLODPerFrame is normal behavior of picking per frame, the others force the lod (0 is highest res lod, 2 is lowest res lod)"
                  )
               )
               (self_shadow bool (help "should character cast a self shadow"))
               (fast_forward
                  float
                  (help "Fast forward chosen animation by this time, in camera units")
               )
               (forward_event
                  symbol
                  (help "Event to fastforward relative to")
                  (list ('' freeze))
               )
               (env_override
                  object
                  (class Environ)
                  (help "environment override for this target during this shot")
               )
            )
         )
      )
      (player_flag
         int
         (list PLAYER_FLAGS)
         (help "Flag to determine player configuration")
      )
      (zero_time float (help "synchronization time for this camshot"))
      (min_time
         int
         (help
            "30fps reg: minimum time this shot can last, DCuts: time past zero time in which the shot can be interupted"
         )
      )
      (max_time int (help "30fps maximum duration for this shot, 0 is infinite"))
      (master_anims
         (array object (class Anim))
         (help
            "Anims set throughout this shot and any next shots\nNot valid entries for a next shot."
         )
      )
      (next_shots
         (array object (list {$this allowable_next_shots}))
         (help "Next camshots, in order")
      )
      (store
         script
         (script {$this store})
         (help "store the current target character teleport locations")
      )
      (view script (script {$this view}))
   )
   (types)
   (views
      (flags
         ("Category" [category])
         ("Platform Only" [platform_only])
         ("DoF" [use_depth_of_field])
         ("Target 0" [keyframes 0 targets 0])
         ("Target 1" [keyframes 1 targets 0])
         ("Total Duration" {$this duration_seconds})
         ("Blur Depth" [keyframes 0 blur_depth])
         ("Max Blur" [keyframes 0 max_blur])
         ("Focus Blur Mult" [keyframes 0 focus_blur_multiplier])
         ("Shake Freq" [keyframes 0 shake_noisefreq])
         ("Shake Amp" [keyframes 0 shake_noiseamp])
         ("Shake Max x" [keyframes 0 shake_maxangle x])
         ("Shake Max y" [keyframes 0 shake_maxangle y])
      )
      (Shadows
         ("Category" [category])
         ("Bass Shadow" [targets 0 self_shadow])
         ("Drum Shadow" [targets 1 self_shadow])
         ("Guitar Shadow" [targets 2 self_shadow])
         ("Vocal Shadow" [targets 3 self_shadow])
      )
      ('next shots'
         ("Category" [category])
         ("Number of next_shots" {$this size (next_shots)})
      )
   )
)
(HamCharacter
   (description
      "Hammer main character class, can be configured to look like characters in /dancer"
   )
   (superclasses Character)
   (editor
      (outfit
         symbol
         (list {file_list {sprint [outfit_dir] "/*.milo"}})
         (help "which character to look like")
      )
      (start_load
         script
         (script {$this start_load FALSE})
         (help "load up the outfit")
      )
      (outfit_dir symbol (help "where to load outfits from"))
      (gender
         int
         (list kHamGenderList)
         (help "Gender of this character")
         (no_test)
         (read_only TRUE)
      )
      (show_box
         bool
         (help "Draws a 6 foot square box around the character teleport point")
      )
      (poll_when_hidden
         bool
         (help
            "Updates the character's animation even though showing is set to FALSE. Useful for rendering the character to a texture."
         )
      )
      (tex_blenders_active
         bool
         (help "True if the internal TexBlenders are working.")
      )
      (crew_card_showing
         bool
         (read_only {! {$this crew_card_found}})
         (no_test)
         (help "Show/hide the campaign crew card, if the character has one.")
      )
      (prop_0_showing
         bool
         (no_test)
         (help "Show/hide the 0th prop, if the character has one.")
      )
      (prop_1_showing
         bool
         (no_test)
         (help "Show/hide the 1st prop, if the character has one.")
      )
      (prop_2_showing
         bool
         (no_test)
         (help "Show/hide the 2nd prop, if the character has one.")
      )
      (prop_3_showing
         bool
         (no_test)
         (help "Show/hide the 3rd prop, if the character has one.")
      )
      (reset_waypoint
         script
         (help "moves the character waypoint to its current position")
         (script {$this cam_teleport})
      )
      (analyze_footik
         script
         (help "analyze our clips, temporary for testing")
         (script {$this analyze_footik})
      )
      (toggle_interests_overlay
         script
         (script {$this toggle_interests_overlay})
         (help "Toggles display of debug overlay for interest objects")
      )
      (find_new_interests
         script
         (script {$this find_interest_objects {$this dir}})
         (help
            "If you add an interest, hit this to let the character know about it"
         )
      )
   )
   (types)
)
(HamWardrobe
   (description
      "Manager class that clothes characters and loads animations under different conditions"
   )
   (test_singleton)
   (editor)
   (types)
)
(HamDirector
   (description
      "Hammer Director, sits in each song file and manages camera + scene changes"
   )
   (superclasses Poll Draw)
   (init)
   (editor
      (freestyle_enabled bool (help "TRUE if freestyle is allowed"))
      (debug_char_interests
         script
         (script {$this debug_char_interests})
         (help
            "Cycles through each character, enabling debug rendering of its interest objects"
         )
      )
      (toggle_interests_overlay
         script
         (script {$this toggle_interests_overlay})
         (help "Toggles display of debug overlay for interest objects")
      )
      (practice_start
         symbol
         (list
            {$this practice_list
               {gamedata getp 0 difficulty}
            }
         )
         (help "start frame of practice mode")
      )
      (practice_end
         symbol
         (list
            {$this practice_list
               {gamedata getp 0 difficulty}
            }
         )
         (help "end frame of practice mode")
      )
      (start_loop_margin
         int
         (help "In practice mode, measures before practice_start until loop")
         (range 1 100)
      )
      (end_loop_margin
         int
         (help "In practice mode, measures after practice_end until loop")
         (range 1 100)
      )
      (blend_debug
         int
         (help
            "If > 0, is which clip to show by itself rather than doing full blending"
         )
      )
      (no_transitions bool (help "If true, does not play transitions"))
      (collision_checks
         bool
         (help "If true, check character collisions when picking cam shots")
      )
      (song_properties
         (indent
            (shot
               symbol
               (list
                  {do
                     ($lst {array (AUTHORED_CAM_CATS)})
                     {insert_elem $lst 0 ''}
                     $lst
                  }
               )
               (help "HamCamShot category")
               (no_test)
            )
            (cur_shot
               object
               (class CamShot)
               (help "currently shown camshot, nice for debugging.")
               (read_only TRUE)
               (no_test)
            )
            (excitement
               int
               (help "excitement level")
               (read_only TRUE)
               (no_test)
            )
            (num_players_failed
               int
               (help "how many have failed")
               (read_only TRUE)
               (no_test)
            )
            (postproc
               object
               (class PostProc)
               (interp_handlers postproc_interp)
               (dir {milo cur_dir})
               (help "the current venue postproc.")
               (no_test)
            )
            (cam_postproc
               object
               (class PostProc)
               (help "camera postproc override.  If set, does no postproc blends")
               (read_only TRUE)
               (no_test)
            )
            (world_event
               symbol
               (list (none HAM_WORLD_EVENTS))
               (help "author chorus or verse-specific events, as well as bonusfx")
               (no_test)
            )
            (clip
               symbol
               (propanim_annotate clip_annotate)
               (propanim_safetoadd clip_safetoadd)
               (list
                  {do
                     ($lst {array {$this clip_list}})
                     {insert_elem $lst 0 ''}
                     $lst
                  }
               )
               (help "the current clip to play.")
               (no_test)
            )
            (practice
               symbol
               (propanim_annotate practice_annotate)
               (propanim_safetoadd practice_safetoadd)
               (help "practice mode sections")
               (no_test)
            )
            (spot_instructor
               symbol
               (list (on off))
               (help "author character-specific spotlights")
               (no_test)
            )
            (move
               symbol
               (list
                  {do
                     ($lst {object_list {find_obj {milo cur_dir} moves} HamMove FALSE})
                     {insert_elem $lst 0 ""}
                     $lst
                  }
               )
               (help "current active move")
               (interp_handlers move_interp)
               (propanim_safetoadd update_move_keys)
               (no_test)
            )
            (backup_drift
               float
               (help "How much backup dancers drift, 0 is none, 1 is full")
            )
            (move_instance
               symbol
               (list {$this list_possible_move})
               (help "current move instance")
               (no_test)
            )
            (move_parents
               symbol
               (list {$this list_possible_move})
               (help "move parents")
               (no_test)
            )
            (clip_crossover
               symbol
               (list {$this list_possible_variants})
               (help "move variant 1")
               (no_test)
            )
         )
         (help
            "These are the properties animated by the song, displayed here for debugging"
         )
      )
   )
   (types)
)
(HamDriver
   (description "Class to play back clips, has a tree view of layers")
   (allowed_dirs Character)
   (superclasses CharWeightable CharPollable)
   (ext hdrv)
   (editor
      (bones
         object
         (class CharBonesObject)
         (help "The CharBones object to add into.")
      )
   )
   (types)
)
(HamSkeletonConverter
   (description "Class to convert from a camera to a character skeleton")
   (allowed_dirs HamCharacter)
   (superclasses CharPollable)
   (ext cvt)
   (editor
      (bones
         object
         (class CharBonesObject)
         (help "The CharBones object to add into.")
      )
      (test_button
         script
         (script {$this run_test})
         (help "Run a test that changes quat on a bone")
      )
   )
   (types)
)
(HamRegulate
   (description
      "Class to do regulation on a HamCharacter.  Has two modes of operation"
   )
   (allowed_dirs Character)
   (superclasses CharPollable)
   (ext hreg)
   (editor
      (left_foot
         object
         (class CharIKFoot)
         (help
            "left foot ik object, used for clamping regulation when one or more feet are planted"
         )
      )
      (right_foot
         object
         (class CharIKFoot)
         (help
            "right foot ik object, used for clamping regulation when one or more feet are planted"
         )
      )
   )
   (types)
)
(HamIKEffector
   (description "Does IK on end effectors and props")
   (allowed_dirs ObjectDir)
   (superclasses CharPollable CharWeightable)
   (ext ikf)
   (editor
      (skeleton
         object
         (class HamIKSkeleton)
         (help "pointer to a HamIKSkeleton object")
      )
      (effector
         object
         (class Trans)
         (help
            "The character end effector or prop to be constrained.  When hilit, the big red circles are the "
            'natural"'
            'positions,'
            the
            blue
            circles
            are
            the
            desired
            'destination,'
            and
            the
            green
            circle
            is
            where
            it
            was
            'IK\qd'
            to.
            Each
            "target"
            shows
            up
            as
            an
            axis
            display
            with
            the
            current
            weight
            shown
            next
            to
            'it."'
         )
      )
      (finger
         object
         (class Trans)
         (help
            "The actual trans to IK to constraints. Effector is still the thing that gets moved, if NULL, same as effector"
         )
      )
      (constraints
         (array
            (struct
               (target
                  object
                  (class Trans)
                  (help
                     "The thing the [effector] will keep relative xfm to, or absolute xfm if weight <= 0."
                  )
               )
               (weight
                  float
                  (help
                     "Relative weight for this constraint, is same as radius in feet of full effect.  If zero or negative [effector] will be constrained directly to the [target]"
                  )
               )
            )
         )
      )
      (ground
         object
         (class Trans)
         (help "for pelvis/feet specifies a ground plane height")
      )
      (elbow
         object
         (class HamIKEffector)
         (help "If hand, pointer to elbow object")
      )
      (more
         object
         (class HamIKEffector)
         (help "More constraints to evaluate")
      )
      (other
         object
         (class CharPollable)
         (help
            "Can call others to do ik on the same bone before doing shoulder fixup"
         )
      )
   )
   (types)
)
(HamIKSkeleton
   (description "Manages the neutral skeleton for a HamCharacter")
   (allowed_dirs ObjectDir)
   (superclasses CharPollable)
   (ext iks)
   (editor)
   (types)
)
(SkeletonDir
   (description "Dir with skeleton tracking/debugging functionality")
   (superclasses PanelDir)
   (editor
      (test_clip
         object
         (class SkeletonClip)
         (help "Test clip for in-milo visualization")
      )
      (live_camera
         script
         (script {$this live_camera})
         (help "Return to using live camera input")
         (refresh test_clip)
      )
      (print_skeleton
         script
         (script {$this print_skeleton})
         (help "Output skeleton/joint information")
      )
   )
   (types)
)
#define ERROR_NODE_TYPES (
   "kErrorHam1Euclidean"
   "kErrorHam1Displacement"
   "kErrorDisplacement"
   "kErrorPosition"
)
#define ERROR_NODE_JOINTS (
   "kErrorJointHipCenter"
   "kErrorJointSpine"
   "kErrorJointShoulderCenter"
   "kErrorJointHead"
   "kErrorJointShoulderLeft"
   "kErrorJointElbowLeft"
   "kErrorJointWristLeft"
   "kErrorJointHandLeft"
   "kErrorJointShoulderRight"
   "kErrorJointElbowRight"
   "kErrorJointWristRight"
   "kErrorJointHandRight"
   "kErrorJointHipLeft"
   "kErrorJointKneeLeft"
   "kErrorJointAnkleLeft"
   "kErrorJointHipRight"
   "kErrorJointKneeRight"
   "kErrorJointAnkleRight"
   "kErrorJointFootLeft"
   "kErrorJointFootRight"
)
#define CSV_FLAGS (
   "kCsvFrameWeighted"
   "kCsvNodes"
   "kCsvMovePSNR"
   "kCsvPSNRThreshold"
   "kCsvLimbFrameWeighted"
   "kCsvDetectRangeMean"
)
(MoveDir
   (description "Dir for HamMoves, contains debugging functionality")
   (superclasses SkeletonDir)
   (editor
      (edit_current_move
         script
         (script
            {if_else [current_move]
               {milo edit [current_move] HamMove}
               {notify "Current HamMove is not set"}
            }
         )
         (help "Pop up the editor for the current HamMove")
      )
      (debug_collision
         bool
         (help "Show collision debug")
         (no_test)
      )
      (move_overlay bool (help "Show debugging overlay for the current HamMove"))
      (debug_latency_offset
         bool
         (help "Offset debug skeleton by latency offset")
         (no_test)
      )
      (debug_skeleton_rotation
         float
         (range -360 360)
         (no_test)
         (help "How much to rotate the skeletons in move overlay (degrees)")
      )
      (detection
         (indent
            (filter_version
               symbol
               (read_only TRUE)
               (help "Version of detection used")
               (no_test)
            )
            (reset_detection
               script
               (script {$this reset_detection})
               (help "Reset all detection frames")
            )
            (reload_scoring
               script
               (script {$this reload_scoring})
               (help "Reload scoring/detection config")
            )
            (debug_node_types
               bitfield
               (list (ERROR_NODE_TYPES))
               (help "Types of error nodes to show")
            )
            (debug_node_joints
               bitfield
               (list (ERROR_NODE_JOINTS))
               (help "Specific joints to display debug viz for")
            )
            (csv_flags
               bitfield
               (list (CSV_FLAGS))
               (help "Dump CSV files during process_weights")
               (no_test)
            )
         )
      )
      (processing
         (indent
            (weight_graph_data
               bool
               (help "Create graph image with move distributions")
               (no_test)
            )
            (process_simulate
               script
               (script
                  {if $hamdirector
                     {$this process_filters}
                     {$this simulate_song TRUE FALSE}
                  }
               )
               (help "Process filter data then simulate perform")
            )
            (process_simulate_both
               script
               (script
                  {if $hamdirector
                     {$this process_filters}
                     {$this simulate_song TRUE FALSE}
                  }
               )
               (help "Process filter then simulate perform+skills")
            )
            (process_omg script (script {$this process_omg TRUE}))
         )
      )
      (save_moves
         script
         (script
            {do
               ($objs {array 0})
               {$this iterate DancerSequence $seq {push_back $objs $seq}}
               {$this iterate HamMove $move {push_back $objs $move}}
               {$this iterate PracticeSection $sec {push_back $objs $sec}}
               {$this iterate_self SkeletonClip $clp {push_back $objs $clp}}
               {milo merge_back_objects $objs}
            }
         )
         (help "Merge back all the HamMoves and DancerSequences")
      )
      (playback
         (indent
            (play_clip
               object
               (class SkeletonClip)
               (help "Clip to play back in sync with the song")
               (read_only {! {$this is_proxy}})
               (refresh play_fail_clip)
               (dir $this)
            )
            (play_fail_clip
               object
               (class SkeletonClip)
               (help "Fail clip to play back in sync with the song")
               (read_only {! {$this is_proxy}})
               (refresh play_clip)
               (dir [fail_clip_dir])
            )
            (bar_expected
               symbol
               (list ('' default FEEDBACK_STATES))
               (help "Expected rating for current clip/bar")
               (no_test)
            )
            (set_bar_overrides
               script
               (script {$this set_bar_overrides})
               (help "Apply bar_expected and to current clip/bar")
            )
            (report_move
               object
               (class HamMove)
               (read_only {! {$this is_proxy}})
               (dir $this)
               (help "If set, report will be limited to this move")
            )
            (simulate_song
               script
               (script {$this simulate_song 1 0})
               (help "Create playback report using all available clips")
            )
            (simulate_skills
               script
               (script {$this simulate_song 0 1})
               (help "Create playback report using all available clips in skills mode")
            )
            (simulate_both
               script
               (script {$this simulate_song 1 1})
               (help "Create playback report using all available clips in both modes")
            )
         )
      )
      (recording
         (indent
            (record_clip
               object
               (class SkeletonClip)
               (help "Clip to use for song recording")
               (read_only {! {$this is_proxy}})
               (dir $this)
            )
            (start_song_record
               script
               (script {$this start_song_record})
               (help "start recording moves")
               (refresh play_clip play_fail_clip)
            )
            (stop_song_record
               script
               (script {$this stop_song_record})
               (help "stop recording moves")
            )
         )
      )
      (import_clip_path
         file
         (ext "SkeletonClip files" "clp")
         (help "The pre-recorded .clp file to import")
         (refresh import)
      )
      (import
         script
         (script
            {$this import_clip TRUE}
            {milo update_objects}
         )
         (help "Import a .clp file into a new SkeletonClip")
         (read_only {== [import_clip_path] ""})
      )
   )
   (types)
)
(DancerSequence
   (description
      "Linear sequence of DancerFrame structs, animatable for preview in milo"
   )
   (allowed_dirs MoveDir)
   (superclasses Anim)
   (ext seq)
   (types)
)
(HamMove
   (description "Data associated with a ham Move")
   (superclasses PropAnim)
   (allowed_dirs MoveDir)
   (ext move)
   (editor
      (mirror
         object
         (class HamMove)
         (help "Move to mirror")
         (refresh tex tex_state)
         (post_sync
            {if {&& {! [tex]} [mirror]}
               {set [tex] {[mirror] get tex}}
               {if [tex]
                  {set [tex_state] kTexFlip}
               }
            }
         )
      )
      (tex
         object
         (class Tex)
         (help "Texture to describe the move")
      )
      (tex_state
         int
         (list TEX_STATE_LIST)
         (help "Texture state describes how to display the tex")
      )
      (scored
         bool
         (help
            "True if this is move is scored. False if it's a rest or some kind of indicator (like freestyle)"
         )
      )
      (paradiddle bool (help "True if this move is a paradiddle"))
      (final_pose bool (help "True if this move is the final pose in the song"))
      (omit_minigame
         bool
         (help "Prevent this move from appear in the dance battle minigame")
      )
      (suppress_guide
         bool
         (help
            "Prevent the Guide Gesture from appearing for the duration of this move"
         )
      )
      (suppress_practice_options
         bool
         (help
            "Prevent the Practice Options from appearing for the duration of this move"
         )
      )
      (difficulty
         int
         (list DIFF_LIST)
         (help "Difficulty classification for this move")
      )
      (confusability
         (indent
            (confusability_id int (help "id used when comparing to other moves"))
            (confusability_count int (help "count of other moves I have data for"))
         )
      )
      (thresholds
         (indent
            (super_perfect_threshold
               float
               (read_only TRUE)
               (help "Generated threshold for super perfect")
            )
            (perfect_threshold
               float
               (read_only TRUE)
               (help "Generated threshold for perfect/flawless")
            )
            (awesome_threshold
               float
               (read_only TRUE)
               (help "Generated threshold for awesome/nice")
            )
            (ok_threshold
               float
               (read_only TRUE)
               (help "Generated threshold for ok/almost")
            )
            (super_perfect_override
               float
               (range 0 1000)
               (help "Override threshold for super perfect (0 means no override)")
            )
            (perfect_override
               float
               (range 0 1000)
               (help "Override threshold for perfect/flawless (0 means no override)")
            )
            (awesome_override
               float
               (range 0 1000)
               (help "Override threshold for awesome/nice (0 means no override)")
            )
            (ok_override
               float
               (range 0 1000)
               (help "Override threshold for ok/almost (0 means no override)")
            )
         )
      )
      (ham1
         (indent
            (shoulder_displacements
               bool
               (read_only TRUE)
               (help "Whether to use shoudler displacements for detection")
            )
            (rating_overrides
               (indent
                  (move_perfect
                     float
                     (range 0 1)
                     (read_only TRUE)
                     (help "Override for move_perfect threshold")
                  )
                  (move_awesome
                     float
                     (range 0 1)
                     (read_only TRUE)
                     (help "Override for move_awesome threshold")
                  )
                  (move_ok
                     float
                     (range 0 1)
                     (read_only TRUE)
                     (help "Override for move_ok threshold")
                  )
                  (move_bad
                     float
                     (range 0 1)
                     (read_only TRUE)
                     (help "Override for move_bad threshold")
                  )
               )
            )
         )
      )
      (derive_name
         script
         (script
            {do
               ($eng_name {$this name})
               {search_replace $eng_name _ ' ' $eng_name}
               {search_replace $eng_name .move '' $eng_name}
               {set [name_eng] $eng_name}
               {milo update_open_editor $this}
            }
         )
         (help "Derive the name of the move from the name of the object")
      )
      (name_eng string (help "English name"))
      (name_fre
         string
         (read_only TRUE)
         (help "French name")
      )
      (name_ita
         string
         (read_only TRUE)
         (help "Italian name")
      )
      (name_deu
         string
         (read_only TRUE)
         (help "German name")
      )
      (name_esl
         string
         (read_only TRUE)
         (help "Iberian Spanish name")
      )
      (name_mex
         string
         (read_only TRUE)
         (help "Latin Amer. Spanish name")
      )
      (name_swe
         string
         (read_only TRUE)
         (help "Swedish name")
      )
      (name_pol
         string
         (read_only TRUE)
         (help "Polish name")
      )
      (name_dut
         string
         (read_only TRUE)
         (help "Dutch name")
      )
      (name_ptb
         string
         (read_only TRUE)
         (help "Brazilian name")
      )
      (name_rus
         string
         (read_only TRUE)
         (help "Russian name")
      )
      (name_cht
         string
         (read_only TRUE)
         (help "Traditional Chinese name")
      )
      (name_kor
         string
         (read_only TRUE)
         (help "Korian name")
      )
      (name_jpn
         string
         (read_only TRUE)
         (help "Japanese name")
      )
      (name_nor
         string
         (read_only TRUE)
         (help "Norwegian name")
      )
   )
   (types)
   (init
      {do
         ($eng_name {$this name})
         {search_replace $eng_name _ ' ' $eng_name}
         {search_replace $eng_name .move '' $eng_name}
         {set [name_eng] $eng_name}
      }
   )
)
(SkeletonClip
   (description "An animated clip of a skeleton playable in milo")
   (superclasses Anim)
   (allowed_dirs SkeletonDir)
   (editor
      (live_camera
         script
         (script {{$this dir} live_camera})
         (help "Return to using live camera input")
      )
      (make_active
         script
         (script {{$this dir} set test_clip $this})
         (help "Start using this clip as camera input")
      )
      (file
         string
         (help "associated data file")
         (no_test)
         (read_only TRUE)
      )
      (autoplay
         bool
         (help
            "Automatically animate skeleton data regardless of the current frame."
         )
         (refresh time_recorded song difficulty song_start_seconds song_end_seconds)
         (no_test)
      )
      (start_recording
         script
         (script {$this start_recording})
         (help "start a recording")
         (read_only {'||' {!= [file] ''} {$this is_recording}})
         (refresh file stop_recording)
      )
      (stop_recording
         script
         (script {$this stop_recording})
         (help "stop the current recording")
         (read_only {! {$this is_recording}})
      )
      (time_recorded
         string
         (read_only TRUE)
         (help "Time/Date this clip was recorded")
      )
      (build
         string
         (read_only TRUE)
         (help "Build recording was made in")
      )
      (song
         string
         (read_only TRUE)
         (help "Song clip was recorded from")
      )
      (difficulty
         string
         (read_only TRUE)
         (help "Difficulty of song during recording")
      )
      (song_start_seconds
         float
         (read_only TRUE)
         (help "Time in song when recording started")
      )
      (song_end_seconds
         float
         (read_only TRUE)
         (help "Time in song when recording ended")
      )
      (default_rating
         symbol
         (list ('' FEEDBACK_STATES))
         (help "Default expected move rating when simulating playback")
      )
      (weighted
         int
         (list ("kClipNotWeighted" "kClipWeighted"))
         (help "Is this clip used in the filter weighting?")
      )
      (move_ratings
         (array
            (struct
               (move_name
                  string
                  (read_only TRUE)
                  (help "Name of the HamMove")
               )
               (expected
                  symbol
                  (list ('' default FEEDBACK_STATES))
                  (help "Expected rating for this move")
               )
            )
         )
         (fixed_size TRUE)
      )
      (fill_move_ratings
         script
         (script {$this fill_move_ratings})
         (help
            "(Re)populate the move ratings for this clip (you must load a song to do this)"
         )
         (refresh move_ratings)
         (read_only {! $hamdirector})
      )
      (override_diff
         int
         (list DIFF_LIST)
         (help "Override difficulty to apply")
         (no_test)
      )
      (apply_override_diff
         script
         (script {$this apply_override_diff})
         (help "Apply override difficulty and overwrite file")
         (refresh difficulty)
      )
   )
   (ext clp)
   (types)
)
(SkeletonViz
   (description "Visualization of one natural input skeleton")
   (superclasses Draw Trans)
   (allowed_dirs SkeletonDir WorldDir)
   (ext viz)
   (types)
   (editor
      (use_physical_cam
         bool
         (help "Draw skeleton from Natal camera perspective?")
      )
      (physical_cam_rotation
         float
         (range -360 360)
         (help "Degrees to rotation physical camera around skeleton")
      )
      (axes_coord_sys
         int
         (list (COORD_SYSTEMS))
         (help "Which coordinate system axes to draw")
      )
      (rotate_right
         script
         (script {$this rotate 15})
         (help "Rotate to the right")
      )
      (rotate_left
         script
         (script {$this rotate -15})
         (help "Rotate to the left")
      )
   )
)
(HamListRibbon
   (description "Top-level resource object for UILists")
   (superclasses RndDir)
   (types)
   (editor
      (test_mode
         bool
         (help "(Milo only) Draw as a test list?")
         (no_test)
      )
      (test_entering
         bool
         (help "(Milo only) Test enter anim?")
         (no_test)
      )
      (test_num_display
         int
         (help "(Milo only) If test_mode is on, how many to draw")
         (no_test)
      )
      (test_selected_index
         int
         (help "(Milo only) If test_mode is on, which element is highlighted")
         (no_test)
      )
      (mode
         int
         (list (RIBBON_MODE))
         (help "Mode for animations")
         (no_test)
      )
      (spacing float (help "How far apart elements should be spaced"))
      (padded_size int (help "Minimum number of ribbons to show"))
      (padded_spacing float (help "Spacing between padded ribbons"))
      (swell_anim object (class Anim))
      (slide_anim object (class Anim))
      (select_anim object (class Anim))
      (select_inactive_anim object (class Anim))
      (select_all_anim object (class Anim))
      (select_toggle_anim object (class Anim))
      (disengage_anim object (class Anim))
      (enter_flow
         object
         (class Flow)
         (help "Flow to play on enter")
      )
      (enter_anim object (class Anim))
      (label_placeholder
         object
         (class UILabel)
         (help "Where the label goes")
      )
      (scroll_anims
         (struct
            (scroll_anim object (class Anim))
            (scroll_active object (class Anim))
            (scroll_fade object (class Anim))
            (scroll_faded object (class Anim))
         )
      )
      (highlight_sounds (array object (class Flow)))
      (select_sounds (array object (class Flow)))
      (slide_sound object (class Sound))
      (slide_sound_anim object (class Anim))
      (scroll_sound object (class Sound))
      (scroll_sound_anim object (class Anim))
   )
)
(HamScrollSpeedIndicator
   (description "Resource object for scrolly stuff")
   (superclasses RndDir)
   (types)
   (editor
      (enter_anim object (class Anim))
      (exit_anim object (class Anim))
      (indicator_anim object (class Anim))
      (slow_scroll_threshold_frame
         float
         (help "Frame at which the bar reaches the slow-scroll indicator")
      )
      (fast_scroll_threshold_frame
         float
         (help "Frame at which the bar reaches the fast-scroll indicator")
      )
   )
)
(HamVisDir
   (description "panel dir that handles the visualizer")
   (superclasses SkeletonDir)
   (editor
      (milo_manual_frame
         bool
         (help
            "Allow Milo anim bar to drive the gesture propanim frame, not the player's skeleton."
         )
      )
      (player1_left
         object
         (class Anim)
         (help "Animated from 0 - 100, depending on player one's hand height")
      )
      (player1_right
         object
         (class Anim)
         (help "Animated from 0 - 100, depending on player one's hand height")
      )
      (player2_left
         object
         (class Anim)
         (help "Animated from 0 - 100, depending on player two's hand height")
      )
      (player2_right
         object
         (class Anim)
         (help "Animated from 0 - 100, depending on player two's hand height")
      )
      (in_pose_squat_0 bool (no_test))
      (in_pose_squat_1 bool (no_test))
      (in_pose_y_0 bool (no_test))
      (in_pose_y_1 bool (no_test))
   )
   (init {$this set_type ham})
   (types (ham))
   (supported_events
      (pose_squat_0_state_changed
         pose_squat_1_state_changed
         pose_y_0_state_changed
         pose_y_1_state_changed
      )
   )
)
(HamMeterEffectMonitor
   (description "Monitor for FxMeterEffect to feed back channel data")
   (superclasses Poll)
   (ext effmon)
   (editor
      (meter_effect
         object
         (class FxSendMeterEffect)
         (help "FxSendMeterEffect for this object to monitor")
      )
   )
   (types)
)
(HamPhraseMeter
   (description "Custom component for move feedback progress")
   (superclasses RndDir)
   (types)
   (editor
      (player_index
         int
         (range 0 1)
         (help "Player index this phrase meter is for")
         (no_test)
      )
      (anim
         object
         (class Anim)
         (help "what do animate")
         (read_only {$this is_proxy})
      )
      (rating_frac
         float
         (help "Current rating frac (for testing)")
         (range 0 1)
      )
      (rating
         symbol
         (list (FEEDBACK_STATES))
         (help "Current rating symbol (for testing)")
      )
      (desired_fpb float (help "Desired animation speed (frames per beat)"))
      (first_perfect_frame
         float
         (help "Value of the first frame of a perfect rating")
      )
   )
)
(PracticeSection
   (description "Practice section details for skills mode")
   (superclasses Anim)
   (ext sect)
   (editor
      (display_name
         symbol
         (help "Display name used to show in selection screens")
      )
      (difficulty
         int
         (list DIFF_LIST)
         (help "Difficulty this section is tied to")
      )
      (generate_sections
         script
         (script
            {cond
               ({! $hamdirector}
                  {notify "No hamdirector exists, world must be loaded"}
               )
               ({!
                     {$hamdirector player_song_anim 0}}
                  {notify "Song must be loaded with hamdirector"}
               )
               (TRUE
                  {do
                     ($song_anim {$hamdirector difficulty_song_anim [difficulty]})
                     ($last_keyframe "")
                     ($count 0)
                     {$this clear (steps)}
                     {$song_anim foreach_keyframe $hamdirector
                        (practice)
                        $frame
                        $value
                        {if
                           {&&
                              {!= $last_keyframe ""}
                              {'||'
                                 {< {strlen $last_keyframe} 4}
                                 {!=
                                    {substr $last_keyframe {- {strlen $last_keyframe} 4} 4}
                                    "_end"
                                 }
                              }
                           }
                           {$this append (steps) 0}
                           {$this set (steps $count start) $last_keyframe}
                           {$this set (steps $count end) $value}
                           {$this set (steps $count type) learn}
                           {'++' $count}
                        }
                        {set $last_keyframe $value}
                     }
                  }
                  {milo update_open_editor $this}
               )
            }
         )
      )
      (steps
         (array
            (struct
               (type
                  symbol
                  (list (learn review freestyle))
                  (help "Type of step")
                  (refresh steps)
               )
               (boundary
                  bool
                  (help "True if this step is the START of a subsection")
                  (read_only {!= [steps {elem $milo_prop_path 1} type] learn})
                  (refresh steps)
               )
               (start
                  symbol
                  (help "Start of sequence")
                  (read_only {! $hamdirector})
                  (list
                     {if_else $hamdirector
                        {$hamdirector practice_list [difficulty]}
                        ([steps {elem $milo_prop_path 1} start])
                     }
                  )
                  (refresh steps)
                  (no_test)
               )
               (end
                  symbol
                  (help "End of sequence")
                  (read_only {! $hamdirector})
                  (list
                     {if_else $hamdirector
                        {$hamdirector practice_list [difficulty]}
                        ([steps {elem $milo_prop_path 1} end])
                     }
                  )
                  (refresh steps)
                  (no_test)
               )
               (name_override
                  string
                  (help
                     "Name to display on the PracticeChoosePanel, if left blank it tries to automatically pick one"
                  )
               )
            )
            (header
               {do
                  ($index {elem $milo_prop_path 1})
                  {sprint
                     {if_else [steps $index boundary]
                        "> "
                        "  "
                     }
                     [steps $index type]
                     ":    "
                     [steps $index start]
                     "  "
                     [steps $index end]
                  }
               }
            )
         )
         (help "List of steps for this practice section")
      )
      (test_step_sequence
         int
         (help "Index of step/sequence to test")
         (no_test)
      )
   )
   (types)
)
(NavigationSkeletonDir
   (description "Dir to view shell navigation gestures in milo")
   (superclasses SkeletonDir)
   (types)
   (editor (clear_filters script (script {$this clear_filters})))
)
(SongDifficultyDisplay
   (description "Song Difficulty Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (types)
   (ext sdd)
   (editor)
)
(StarsDisplay
   (description "Stars Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (types)
   (ext std)
   (editor (alpha float))
)
(StreamRecorder
   (description "Stores a series of depth buffer textures")
   (superclasses Draw)
   (ext srec)
   (editor
      (input
         object
         (class RndDir)
         (help
            "Renders the Kinect input to a texture for storage in this StreamRecorder"
         )
      )
      (use_alpha
         bool
         (help "Should the next recording have transparent texels?")
      )
      (output_mat
         object
         (class Mat)
         (help "Material for playback")
      )
      (max_frames
         int
         (range 0 300)
         (help "Max number of depth buffer textures stored")
         (refresh frames_recorded)
      )
      (frames_recorded
         int
         (read_only TRUE)
         (help "Number of textures recorded for playback")
      )
      (playback_speed
         int
         (list SPEED_FLAGS)
         (help "Speed at which to play back depth buffer textures")
      )
      (reset_recording
         script
         (script
            {do
               {set [debug_frame] -1}
               {$this reset}
            }
         )
         (help "Reset the buffer allocation")
         (refresh frames_recorded)
      )
      (start_recording
         script
         (script
            {do
               {set [debug_frame] -1}
               {$this start_recording}
            }
         )
         (help "Begin storing depth buffer textures")
         (refresh frames_recorded)
      )
      (stop_recording
         script
         (script {$this stop_recording})
         (help "Stop storing depth buffer textures")
         (refresh frames_recorded)
      )
      (play_recording
         script
         (script
            {do
               {set [debug_frame] -1}
               {$this play_recording}
            }
         )
         (help "Play recorded depth buffer textures")
         (refresh frames_recorded)
      )
      (stop_playback
         script
         (script {$this stop_playback})
         (help "End display of recorded images")
         (refresh frames_recorded)
      )
      (debug_frame
         int
         (read_only TRUE)
         (help
            "Overrides the normal playback to display one recorded frame.\nSet to -1 to turn off."
         )
      )
      (next_debug_frame
         script
         (script {set [debug_frame] {'+' [debug_frame] 1}})
         (help "Show next frame.  Used for debubing")
         (refresh frames_recorded debug_frame)
      )
      (prev_debug_frame
         script
         (script {set [debug_frame] {- [debug_frame] 1}})
         (help "Show previous frame.  Used for debubing")
         (refresh frames_recorded debug_frame)
      )
      (reset_debug_frame
         script
         (script {set [debug_frame] -1})
         (help "Reset debug frame to turn off debug display")
         (refresh frames_recorded debug_frame)
      )
   )
   (types)
   (flow_commands
      (start_recording (editor))
      (stop_recording (editor))
      (play_recording (editor))
      (stop_playback (editor))
      (pause_playback (editor))
      (unpause_playback (editor))
   )
)
(StreamRenderer
   (description "Renders Natal stream textures into a texture.")
   (superclasses Draw)
   (ext sr)
   (editor
      (output_texture
         object
         (class Tex)
         (help "Texture to write to")
         (list {$this get_render_textures})
         (pre_sync
            {if [output_texture]
               {milo record [output_texture] reset_tex_render}
            }
         )
         (post_sync
            {if [output_texture]
               {milo record [output_texture] set_tex_render}
               {[output_texture] set_rendered}
            }
         )
      )
      (display
         int
         (list STREAM_DISPLAY_LIST)
         (help "Natal buffer to display")
      )
      (num_blurs
         int
         (range 0 64)
         (help "Number of times to blur the player silhouette texture")
      )
      (player_depth_nobody
         color
         (help "Color for non-player pixels (i.e. the background)")
      )
      (player_depth_nobody_alpha float (help "Alpha for non-player pixels"))
      (player1_depth_color color (help "Player 1 color"))
      (player1_depth_color_alpha float (help "Player 1 alpha"))
      (player2_depth_color color (help "Player 2 color"))
      (player2_depth_color_alpha float (help "Player 2 alpha"))
      (player3_depth_color color (help "Player 3 color"))
      (player3_depth_color_alpha float (help "Player 3 alpha"))
      (player4_depth_color color (help "Player 4 color"))
      (player4_depth_color_alpha float (help "Player 4 alpha"))
      (player5_depth_color color (help "Player 5 color"))
      (player5_depth_color_alpha float (help "Player 5 alpha"))
      (player6_depth_color color (help "Player 6 color"))
      (player6_depth_color_alpha float (help "Player 6 alpha"))
      (player1_depth_palette
         object
         (class Tex)
         (help "1D palette for player 1 depth")
      )
      (player1_depth_palette_offset
         float
         (range -1 1)
         (help "Starting point for p1 palette")
      )
      (player2_depth_palette
         object
         (class Tex)
         (help "1D palette for player 2 depth")
      )
      (player2_depth_palette_offset
         float
         (range -1 1)
         (help "Starting point for p2 palette")
      )
      (player_other_depth_palette
         object
         (class Tex)
         (help "1D palette for players 3-6")
      )
      (player_other_depth_palette_offset
         float
         (range -1 1)
         (help "Starting point for p3-p6 palettes")
      )
      (background_depth_palette
         object
         (class Tex)
         (help "1D palette for background depth ")
      )
      (background_depth_palette_offset
         float
         (range -1 1)
         (help "Starting point for palette")
      )
      (force_draw
         bool
         (help
            "Always render the image, even there is no new depth/color buffer this frame."
         )
      )
      (static_color_indices
         bool
         (help
            "Assign colors by index instead of giving preference to Player 1 and Player 2."
         )
      )
      (force_mips bool (help "Generate mip maps for the texture."))
      (pc_test_texture
         object
         (class Tex)
         (help
            "StreamRenderer will output this test texture.\nOnly works on the PC."
         )
      )
      (lag_primary_texture
         bool
         (help
            "Used to lag the depth image by one frame to better line up with the color image for greenscreening"
         )
      )
      (crew_photo_edge_iterations float)
      (crew_photo_edge_offset float)
      (crew_photo_horizontal_color
         color
         (help "note: will be overwritten dynamically")
      )
      (crew_photo_vertical_color
         color
         (help "note: will be overwritten dynamically")
      )
      (crew_photo_blur_start float)
      (crew_photo_blur_width float)
      (crew_photo_blur_iterations float)
      (crew_photo_background_brightness float)
   )
   (types)
)
(TransConstraint
   (description "Object for setting up lazy transform parenting")
   (superclasses Poll)
   (ext tc)
   (editor
      (parent
         object
         (class Trans)
         (help "The trans parent")
      )
      (child
         object
         (class Trans)
         (help "The trans child")
      )
      (static_cube
         VECTOR3
         (help "Dimensions of cube in which child transform is not updated")
      )
      (speed
         float
         (range 1 10000)
         (help "Speed of tracking in inches/second")
      )
      (track_x bool (help "Track x-axis to parent?"))
      (track_y bool (help "Track y-axis to parent?"))
      (track_z bool (help "Track z-axis to parent?"))
      (affect_scale
         bool
         (help "Whether or not to interpolate scale along with position")
      )
      (use_ui_time
         bool
         (help "Whether or not to use UI timing.  Default is to use game time.")
      )
      (snap_to_parent
         script
         (script {$this snap_to_parent})
         (help "Snap position to parent")
      )
   )
   (flow_commands (snap_to_parent (editor)))
   (types)
)
(HamPhotoDisplay
   (description "Photo displayer for Hammer")
   (allowed_dirs)
   (superclasses RndDir)
   (types)
   (ext photdisp)
   (editor
      (mesh1
         object
         (class Mesh)
         (dir $this)
         (read_only {$this is_proxy})
      )
      (mesh2
         object
         (class Mesh)
         (dir $this)
         (read_only {$this is_proxy})
      )
      (index1 float (no_test))
      (index2 float (no_test))
   )
)
(HamRibbon
   (description "Ribbon")
   (superclasses Poll Draw)
   (types)
   (ext rbn)
   (editor
      (active bool)
      (num_sides int (range 3 20))
      (num_segments int (range 0 40))
      (mat object (class Mat))
      (width float (help "Width of the tube"))
      (decay float (range 1.0e-3 10))
      (follow_a object (class Trans))
      (follow_b object (class Trans))
      (follow_weight float (range 0 1))
      (taper bool)
      (expose_mesh script (script {$this expose_mesh}))
   )
   (flow_commands reset)
)
(HamPeakRibbon
   (description "Peak Ribbon, line which chases an object")
   (superclasses Poll Line)
   (types)
   (ext pkrbn)
   (editor
      (active bool (help "Currently following the follow trans"))
      (follow_a
         object
         (class Trans)
         (help "Object to follow")
         (refresh follow_b follow_weight)
      )
      (follow_b
         object
         (class Trans)
         (help "Secondary object to follow")
         (read_only {== [follow_a] ""})
         (refresh follow_weight)
      )
      (follow_weight
         float
         (help "Weighted follow point for secondary follow object")
         (range 0 1)
         (read_only {== [follow_b] ""})
      )
      (decay_time
         float
         (help "Amount of time (seconds) for the effect to decay")
      )
      (color_anim
         object
         (class PropAnim)
         (help "Prop anim for defining color and alpha gradients")
         (refresh color alpha alpha_gradient)
      )
      (color
         color
         (help "Color of the streamer")
         (hide {!= [color_anim] ""})
      )
      (global_alpha
         float
         (help "Alpha applied to all segments")
         (range 0 1)
      )
      (alpha
         float
         (help "Alpha value of the streamer")
         (range 0 1)
         (hide TRUE)
      )
      (alpha_gradient
         bool
         (help "TRUE if the tail fades out.")
         (hide {!= [color_anim] ""})
      )
      (hide_distance
         float
         (help "Hides segments if they're less than this close to their neighbors")
      )
   )
)
(HamCamTransform
   (description
      "Used to parent camera shots to separate areas.\nThis allows camera shots to be shared between venues."
   )
   (superclasses Poll)
   (ext hct)
   (init)
   (editor
      (areas
         (array
            (struct
               (area
                  object
                  (class Trans)
                  (help "New origin for area")
               )
               (camshots
                  (array
                     object
                     (class HamCamShot)
                     (obj_flags no_null)
                  )
                  (help "Camera shots to be moved to this area")
               )
               (flow
                  object
                  (class Flow)
                  (help "Flow to execute for the setup of these camshots")
               )
               (anims
                  (array
                     object
                     (class Anim)
                     (obj_flags no_null)
                  )
                  (help "Anim to be run for these cam shots")
               )
               (crowds
                  (array
                     (struct
                        (crowd
                           object
                           (class WorldCrowd)
                           (help "The crowd to show for this shot")
                           (refresh areas)
                        )
                        (crowd_rotate
                           int
                           (list CROWD_ROTATE)
                           (help "How to rotate crowd")
                        )
                     )
                  )
               )
            )
            (header
               {do
                  ($obj [areas {elem $milo_prop_path 1} area])
                  {if_else $obj
                     {$obj name}
                     ''
                  }
               }
            )
         )
      )
      (update
         script
         (script {$this update_camshots})
         (help "Update the Camshots with the anims and transform parents")
      )
   )
   (types)
)
(HamBattleData
   (description "Data used to construct a Dance Battle")
   (ext btl)
   (init)
   (editor
      (steps
         (array
            (struct
               (state
                  symbol
                  (list (normal minigame))
                  (help "What's going on during this section of the battle")
                  (refresh steps)
               )
               (players
                  int
                  (list PLAYER_FLAGS)
                  (help "Which players are involved with this section")
                  (refresh steps)
               )
               (cam
                  symbol
                  (list
                     (''
                        Area1_NEAR
                        Area1_FAR
                        Area1_MOVEMENT
                        Area2_NEAR
                        Area2_FAR
                        Area2_MOVEMENT
                        DC_PLAYER_FREESTYLE
                     )
                  )
                  (help "Which camera cut to use for this section")
               )
               (music_range
                  (vector
                     (start int)
                     (end int)
                  )
                  (help "Music loop start and end")
                  (refresh steps)
               )
               (play_range
                  (vector
                     (start int)
                     (end int)
                  )
                  (help "Playable range of the section")
                  (refresh steps)
               )
               (nonplay_action
                  symbol
                  (help "What the non-dancer is doing")
                  (hide {== [steps {elem $milo_prop_path 1} players] kHamPlayerBoth})
                  (list (idle dance hide))
               )
            )
            (header
               {do
                  ($index {elem $milo_prop_path 1})
                  {sprint
                     {elem {elem PLAYER_FLAGS [steps $index players]} 0}
                     " Music("
                     [steps $index music_range start]
                     "-"
                     [steps $index music_range end]
                     ") Play("
                     [steps $index play_range start]
                     "-"
                     [steps $index play_range end]
                     ") "
                     {if_else {!= [steps $index state] normal}
                        "MINI-GAME"
                        ""
                     }
                  }
               }
            )
         )
         (help "Steps for the dance battle")
      )
   )
   (types)
)
(BustAMoveData
   (description "Data used to construct a Bustamove session")
   (ext bam)
   (init)
   (editor
      (phrases
         (array
            (struct
               (count
                  int
                  (range 1 100)
                  (help "How many times this bar phrasing repeats")
                  (read_only
                     {do
                        ($index {elem $milo_prop_path 1})
                        {== $index 0}
                     }
                  )
               )
               (bars
                  int
                  (range 1 100)
                  (help "How many bars per phrase")
               )
            )
            (header
               {do
                  ($index {elem $milo_prop_path 1})
                  {sprint
                     "Count("
                     [phrases $index count]
                     ") Bars("
                     [phrases $index bars]
                     ") "
                     {if_else {== $index 0}
                        "INTRO"
                        ""
                     }
                  }
               }
            )
         )
         (help "Phrases for Bustamove")
      )
   )
   (types)
)
(CrazeHollaback
   (description "Data used for Craze Hollaback")
   (ext chb)
   (init)
   (editor
      (music_range
         (vector
            (start int)
            (end int)
         )
         (help "Music loop start and end")
      )
      (play_range
         (vector
            (start int)
            (end int)
         )
         (help "Playable range of hollaback")
      )
   )
   (types)
)
(HamSupereasyData
   (description "Moves for a super easy dance routine")
   (ext sup)
   (init)
   (editor
      (routine
         (array
            (struct
               (first symbol (help "MoveVariant to use for transition into measure"))
               (second symbol (help "MoveVariant to use for transition out of measure"))
               (preferred symbol (help "Preferred MoveVariant for this measure"))
            )
            (header
               {do
                  ($index {elem $milo_prop_path 1})
                  ($first [routine $index first])
                  ($second [routine $index second])
                  {if_else {== $first $second}
                     {sprint $first}
                     {sprint $first " -> " $second}
                  }
               }
            )
         )
         (help "Routine for Supereasy difficulty.")
      )
   )
   (types)
)
(HamPartyJumpData
   (description "Handles jump points for this song in party mode")
   (ext jmp)
   (init)
   (editor
      (jumps
         (array
            (vector
               (from_measure int)
               (to_measure int)
            )
            (help
               "When song reaches 'from_measure', jump to start of 'to_measure'. 'from_measure' is not played."
            )
         )
         (help "Jump points for this song in party mode")
      )
   )
   (types)
)
(SongLayout
   (description "Song layout")
   (ext slt)
   (init)
   (editor
      (patterns
         (array
            (struct
               (name
                  symbol
                  (help "The name of this pattern")
                  (refresh patterns)
               )
               (initial_measure_range
                  (vector
                     (start int)
                     (end int)
                  )
                  (help "The measure range when this pattern first appears")
                  (refresh patterns)
               )
               (elements
                  (array symbol)
                  (help "Pattern elements")
                  (refresh patterns)
               )
            )
            (header
               {do
                  ($index {elem $milo_prop_path 1})
                  {sprint
                     "Initial Measure("
                     [patterns $index initial_measure_range start]
                     "-"
                     [patterns $index initial_measure_range end]
                     ") "
                     [patterns $index name]
                  }
               }
            )
         )
         (help "Patterns of a song layout section")
      )
      (sections
         (array
            (struct
               (measure_range
                  (vector
                     (start int)
                     (end int)
                  )
                  (help "Measure start and end")
                  (refresh sections)
               )
               (pattern
                  symbol
                  (help "The pattern this section is using")
                  (refresh sections)
               )
               (pattern_range
                  (vector
                     (start int)
                     (end int)
                  )
                  (help "Pattern start and end")
                  (refresh sections)
               )
            )
            (header
               {do
                  ($index {elem $milo_prop_path 1})
                  {sprint
                     " Measure("
                     [sections $index measure_range start]
                     "-"
                     [sections $index measure_range end]
                     ") "
                     [sections $index pattern]
                     " Pattern("
                     [sections $index pattern_range start]
                     "-"
                     [sections $index pattern_range end]
                     ")"
                  }
               }
            )
         )
         (help "Sections of a song layout")
      )
   )
   (types)
)
(HamIconMan
   (description "Icon Man to render icon man in game")
   (ext iconman)
   (init)
   (superclasses Anim Draw)
   (editor
      (texture object (class Tex))
      (start_beat float)
      (end_beat float)
      (offset float)
      (difficulty
         int
         (list DIFF_LIST)
         (help "Difficulty for iconman to be dancing")
      )
   )
   (types)
)
(MiniLeaderboardDisplay
   (description "Mini Leaderboard Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext mld)
   (editor)
   (types)
)
(DepthBuffer3D
   (description "Render the Kinect depth buffer as a 3D mesh")
   (superclasses Draw Trans)
   (ext db3d)
   (editor
      (nobody_color
         color
         (help "Color for non-player pixels (i.e. the background)")
      )
      (nobody_alpha float (help "Alpha for non-player pixels"))
      (player_palette
         object
         (class Tex)
         (help "1D palette for player depth")
      )
      (player_palette_offset
         float
         (range -1 1)
         (help "Starting point for palette")
      )
      (player_palette_scale
         float
         (range -100 100)
         (help
            "Scale the coordinate used to look up the palette value.\nIf the scale is 2, you'll cycle through the palette twice as fast, and so on."
         )
      )
      (minimal_mat
         object
         (class Mat)
         (help "Some Mat properties are used to render the depth buffer")
      )
      (draw_sheet bool (help "draw old school depth buffer - 1 plane"))
      (mesh
         object
         (class Mesh)
         (help "Mesh to draw")
      )
      (stretch_near_camera
         float
         (range 0 10)
         (help
            "Stretch the depth buffer along an exponential curve.\n1 is the default; values greater than 1 mean more distortion for objects closer to the Kinect camera."
         )
      )
      (opacity
         float
         (range 0 1)
         (help "Multiply palette alpha by this value.")
      )
      (draw_player_1
         bool
         (help "Whether Player 1 should be drawn in this DepthBuffer3D")
      )
      (draw_player_2
         bool
         (help "Whether Player 2 should be drawn in this DepthBuffer3D")
      )
      (draw_non_players
         bool
         (help "Whether non-players should be drawn in this DepthBuffer3D")
      )
      (tile_x float (help "How many times to tile the mesh in the x-axis"))
      (tile_y float (help "How many times to tile the mesh in the y-axis"))
      (scale_voxel float (help "Voxel scalar"))
      (scale_voxelgap float (help "Voxel gap scalar"))
      (fisheye_x float (help "horizontal fisheye coefficient"))
      (fisheye_y float (help "vertical fisheye coefficient"))
      (max_zoom float (help "maximum uv zooming"))
      (max_depth_zoom float (help "maximum uv zooming"))
      (debug_layout
         bool
         (help "enabled alters xbox rendering to display every voxel")
      )
   )
   (types)
)
(SongCollision
   (description "Contains data for handling potential character collisions")
   (ext sc)
   (types)
)
(MeterDisplay
   (description "Meter Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext md)
   (editor
      (show_text bool (help "whether or not to show text"))
      (percentage_text
         bool
         (help "whether or not to show text in percentage form")
         (refresh hide_denominator)
      )
      (hide_denominator
         bool
         (help "whether or not to hide denominator")
         (read_only [percentage_text])
      )
      (wrapper_text symbol (help "Localization token to use for wrapper"))
      (current_value int (help "current value of meter"))
      (max_value int (help "max value of meter"))
      (anim_period float (help "length of value change animation, in seconds"))
   )
   (types)
)
(RhythmDetector
   (description "An object that performs rhythmic analysis on Kinect input.")
   (superclasses Poll)
   (allowed_dirs RndDir)
   (ext rhy)
   (editor
      (start_recording
         script
         (script {$this start_recording})
         (help "Start looking at Kinect data")
         (read_only {$this is_recording})
         (refresh stop_recording)
      )
      (stop_recording
         script
         (script {$this stop_recording})
         (help "Stop looking at Kinect data")
         (read_only {! {$this is_recording}})
         (refresh start_recording)
      )
      (rhythm_rating float (read_only TRUE))
   )
   (types)
)
(RhythmBattlePlayer
   (description "The state of a player in Rhythm Battle.")
   (superclasses Poll)
   (allowed_dirs RndDir)
   (ext rbp)
   (editor
      (score_label
         object
         (class HamLabel)
         (help "instruction display")
      )
      (combo_position_anim
         object
         (class Anim)
         (help "instruction display")
      )
      (combo_color_anim
         object
         (class Anim)
         (help "instruction display")
      )
      (reset_combo_anim
         object
         (class Anim)
         (help "instruction display")
      )
      (2x_mult_anim
         object
         (class Anim)
         (help "instruction display")
      )
      (3x_mult_anim
         object
         (class Anim)
         (help "instruction display")
      )
      (4x_mult_anim
         object
         (class Anim)
         (help "instruction display")
      )
      (player int (help "which player is this"))
      (boxydir
         object
         (class RndDir)
         (help "override the world boxydir")
      )
   )
   (types)
)
(RhythmBattle
   (description "Competition between two RhythmBattlePlayers.")
   (superclasses Poll)
   (allowed_dirs RndDir)
   (ext rhb)
   (editor
      (player0
         object
         (class RhythmBattlePlayer)
         (help "player 0 object")
      )
      (player1
         object
         (class RhythmBattlePlayer)
         (help "player 1 object")
      )
      (command_label
         object
         (class HamLabel)
         (help "instruction display")
      )
      (full_ktb
         bool
         (help "is this keep the beat, or just groove tech experience")
      )
   )
   (types)
   (flow_commands
      (begin (editor))
      (end (editor))
   )
)
(RhythmDetectorGroup
   (description "Group of RhythmDetectors that combines their output.")
   (superclasses Poll)
   (allowed_dirs RndDir)
   (ext rhg)
   (editor
      (detectors
         (array object (class RhythmDetector))
         (help "The detectors")
      )
      (skeleton_index int (help "The group's skeleton index"))
   )
   (types)
)