#define PERFORMANCE_EVENTS (
   performance_low
   performance_high
   performance_high_downto
   performance_high_upto
   performance_awesome
   skills_learn_low
   skills_learn_high
   skills_learn_high_downto
   skills_learn_high_upto
   skills_learn_awesome
)
#define HAM_WORLD_EVENTS (bonusfx bonusfx_optional chorus verse)
#define kHamFemale (0)
#define kHamMale (1)
#define kHamGenderList (
   (
      ("kHamFemale" "female character")
      ("kHamMale" "male character")
   )
)
#define kSkeletonLeft (0)
#define kSkeletonRight (1)
#define kBoneHead (0)
#define kBoneCollarRight (1)
#define kBoneArmUpperRight (2)
#define kBoneArmLowerRight (3)
#define kBoneHandRight (4)
#define kBoneCollarLeft (5)
#define kBoneArmUpperLeft (6)
#define kBoneArmLowerLeft (7)
#define kBoneHandLeft (8)
#define kBoneLegUpperRight (9)
#define kBoneLegLowerRight (10)
#define kBoneLegUpperLeft (11)
#define kBoneLegLowerLeft (12)
#define kBoneBackUpper (13)
#define kBoneBackLower (14)
#define kBoneHipRight (15)
#define kBoneHipLeft (16)
#define kBoneFootLeft (17)
#define kBoneFootRight (18)
#define kJointHipCenter (0)
#define kJointSpine (1)
#define kJointShoulderCenter (2)
#define kJointHead (3)
#define kJointShoulderLeft (4)
#define kJointElbowLeft (5)
#define kJointWristLeft (6)
#define kJointHandLeft (7)
#define kJointShoulderRight (8)
#define kJointElbowRight (9)
#define kJointWristRight (10)
#define kJointHandRight (11)
#define kJointHipLeft (12)
#define kJointKneeLeft (13)
#define kJointAnkleLeft (14)
#define kJointHipRight (15)
#define kJointKneeRight (16)
#define kJointAnkleRight (17)
#define kJointFootLeft (18)
#define kJointFootRight (19)
#define kConfidenceNotTracked (0)
#define kConfidenceInferred (1)
#define kConfidenceTracked (2)
#define kCoordCamera (0)
#define kCoordLeftArm (1)
#define kCoordRightArm (2)
#define kCoordLeftLeg (3)
#define kCoordRightLeg (4)
#define kErrorScaleDist (0)
#define kErrorScaleDistSq (1)
#define kFeedbackLeftArm (1)
#define kFeedbackRightArm (2)
#define kFeedbackLeftLeg (4)
#define kFeedbackRightLeg (8)
#define kTexNone (0)
#define kTexNormal (1)
#define kTexFlip (2)
#define kTexDblFlip (3)
#define TEX_STATE_LIST (("kTexNone" "kTexNormal" "kTexFlip" "kTexDblFlip"))
#define kDifficultyEasy (0)
#define kDifficultyMedium (1)
#define kDifficultyExpert (2)
#define kDifficultyBeginner (3)
#define kNumDifficulties (4)
#define DIFF_SYMBOLS (easy medium expert beginner)
#define DIFF_LIST (
   (
      "kDifficultyEasy"
      "kDifficultyMedium"
      "kDifficultyExpert"
      "kDifficultyBeginner"
   )
)
#define kStreamColor (0)
#define kStreamBasicDepth (1)
#define kStreamPlayerDepthVis (2)
#define kStreamPlayerDepthShell (3)
#define kStreamPlayerDepthShell2 (4)
#define kStreamBlackAndWhite (5)
#define kStreamPlayerGreenscreen (6)
#define kStreamPlayerDepthGreenscreen (7)
#define kStreamCrewPhoto (8)
#define STREAM_DISPLAY_LIST (
   (
      ("kStreamColor" "Color output of camera")
      ("kStreamBlackAndWhite" "Convert color output to black and white")
      ("kStreamBasicDepth" "Depth buffer output")
      ("kStreamPlayerDepthVis" "DC1 visualizer")
      ("kStreamPlayerDepthShell" "DC1 player helper frame")
      ("kStreamPlayerDepthShell2" "DC2 player helper frame")
      ("kStreamPlayerGreenscreen" "RGB player without background")
      ("kStreamPlayerDepthGreenscreen" "RGB player with depth buffer")
      (
         "kStreamCrewPhoto"
         "Color output with edge detection on background and radial blur on players"
      )
   )
)
#define NAV_HIGHLIGHT_MSG (nav_highlight ($name $index $component $can_select))
#define NAV_HIGHLIGHT_SETTLED_MSG (nav_highlight_settled ($name $index $component $can_select))
#define NAV_SELECT_MSG (nav_select ($name $index $component $can_select))
#define NAV_SELECT_DONE_MSG (nav_select_done ($name $index $component $can_select))
#define SLIDE_TIME (0.5)
#define SET_ACTIVE_LIST (
   {switch $user_side
      (0
         {switch $list_side
            (0 {set $active_list left_hand_p1.hnl})
            (1 {set $active_list right_hand_p1.hnl})
         }
      )
      (1
         {switch $list_side
            (0 {set $active_list left_hand_p2.hnl})
            (1 {set $active_list right_hand_p2.hnl})
         }
      )
      {switch $list_side
         (0 {set $active_list left_hand.hnl})
         (1 {set $active_list right_hand.hnl})
      }
   }
)
#define HIGHLIGHT_LIST_ITEM (
   (highlight_list_item
      ($user_side $list_side $index)
      SET_ACTIVE_LIST
      {$active_list scroll_to_index $index $index}
      {$active_list set_highlight $index}
      {$active_list set_sliding 0.0}
   )
)
#define SELECT_LIST_ITEM (
   HIGHLIGHT_LIST_ITEM
   (slide_timer {- 1.0})
   (select_list_item
      ($user_side $list_side $index)
      {print
         "SELECT_LIST_ITEM - user_side: "
         $user_side
         "; list_side: "
         $list_side
         "; index: "
         $index
         "\n"
      }
      {if {< [slide_timer] 0.0}
         SET_ACTIVE_LIST
         {gesture_mgr set_gesturing_with_voice TRUE}
         {$this highlight_list_item $user_side $list_side $index}
         {set [slide_timer] SLIDE_TIME}
      }
   )
)
#define SELECT_LIST_TOKEN (
   SELECT_LIST_ITEM
   (select_list_token
      ($user_side $list_side $token)
      SET_ACTIVE_LIST
      {do
         ($token_index {$active_list data_index $token})
         {if_else {>= $token_index 0}
            {$this select_list_item $user_side $list_side $token_index}
            {print
               "select_list_token: token "
               $token
               " not found in list "
               $active_list
               "!\n"
            }
         }
      }
   )
)
#define SLIDE_LIST_ITEM (
   {if {>= [slide_timer] 0.0}
      {-= [slide_timer] {taskmgr ui_delta_seconds}}
      {if_else {< [slide_timer] 0.0}
         {do
            {$active_list set_selecting}
         }
         {do
            ($pct {/ {- SLIDE_TIME [slide_timer]} SLIDE_TIME})
            {$active_list set_sliding $pct}
         }
      }
   }
)
#define HIGHLIGHT_RIGHT_LIST_ITEM (
   (highlight_right_list_item
      ($index)
      {right_hand.hnl scroll_to_index $index $index}
      {right_hand.hnl set_highlight $index}
      {right_hand.hnl set_sliding 0.0}
   )
)
#define SELECT_RIGHT_LIST_ITEM (
   HIGHLIGHT_RIGHT_LIST_ITEM
   (slide_right_timer {- 1.0})
   (select_right_list_item
      ($index)
      {if_else {>= $index 0}
         {if {< [slide_right_timer] 0.0}
            {gesture_mgr set_gesturing_with_voice TRUE}
            {$this highlight_right_list_item $index}
            {set [slide_right_timer] SLIDE_TIME}
         }
         {print "select_right_list_token: trying to select a negative index!\n"}
      }
   )
)
#define SELECT_RIGHT_LIST_TOKEN (
   HIGHLIGHT_RIGHT_LIST_ITEM
   SELECT_RIGHT_LIST_ITEM
   (select_right_list_token
      ($token)
      {do
         ($token_index {right_hand.hnl data_index $token})
         {if_else {>= $token_index 0}
            {if_else {right_hand.hnl index_enabled $token_index}
               {do
                  {$this highlight_right_list_item $token_index}
                  {$this select_right_list_item $token_index}
               }
               {print
                  "select_right_list_token: token "
                  $token
                  " not enabled in right_hand.hnl!\n"
               }
            }
            {print
               "select_right_list_token: token "
               $token
               " not found in right_hand.hnl!\n"
            }
         }
      }
   )
)
#define SLIDE_RIGHT_LIST_ITEM (
   {if {>= [slide_right_timer] 0.0}
      {-= [slide_right_timer] {taskmgr ui_delta_seconds}}
      {if_else {< [slide_right_timer] 0.0}
         {do
            {right_hand.hnl set_selecting}
         }
         {do
            ($pct {/ {- SLIDE_TIME [slide_right_timer]} SLIDE_TIME})
            {right_hand.hnl set_sliding $pct}
         }
      }
   }
)
#define HIGHLIGHT_LEFT_LIST_ITEM (
   (highlight_left_list_item
      ($index)
      {left_hand.hnl scroll_to_index $index $index}
      {left_hand.hnl set_highlight $index}
      {left_hand.hnl set_sliding 0.0}
   )
)
#define SELECT_LEFT_LIST_ITEM (
   (slide_left_timer {- 1.0})
   (select_left_list_item
      ($index)
      {if {< [slide_left_timer] 0.0}
         {left_hand.hnl set_highlight $index}
         {left_hand.hnl set_sliding 0.0}
         {set [slide_left_timer] SLIDE_TIME}
      }
   )
)
#define SLIDE_LEFT_LIST_ITEM (
   {if {>= [slide_left_timer] 0.0}
      {-= [slide_left_timer] {taskmgr ui_delta_seconds}}
      {if_else {< [slide_left_timer] 0.0}
         {do
            {left_hand.hnl set_selecting}
         }
         {do
            ($pct {/ {- SLIDE_TIME [slide_left_timer]} SLIDE_TIME})
            {left_hand.hnl set_sliding $pct}
         }
      }
   }
)
#define BACRO ((back {helpbar select_left_list_item 1}))
#define FEEDBACK_STATES (move_perfect move_awesome move_ok move_bad)
#define kNoPrompt (0)
#define kWeight (1)
#define kUnweight (2)
#define kRibbonSwell (0)
#define kRibbonSlide (1)
#define kRibbonSelect (2)
#define kRibbonDisengaged (3)
#define kCheckbox_None (0)
#define kCheckbox_Disabled (1)
#define kCheckbox_Enabled (2)
#define CHECKBOX_MODE ("kCheckbox_None" "kCheckbox_Disabled" "kCheckbox_Enabled")
#define kHamPlayer0 (0)
#define kHamPlayer1 (1)
#define kHamPlayerBoth (2)
#define kHamPlayerOff (3)
#define kHamPlayer0SoloInOut (4)
#define kHamPlayer1SoloInOut (5)
#define PLAYER_FLAGS (
   (
      ("kHamPlayer0" "Player 0")
      ("kHamPlayer1" "Player 1")
      ("kHamPlayerBoth" "Both Players")
      ("kHamPlayerOff" "Neither Player")
      ("kHamPlayer0SoloInOut" "Player 0 Solo")
      ("kHamPlayer1SoloInOut" "Player 1 Solo")
   )
)
#define kNavInput_RightHand (0)
#define kNavInput_LeftHand (1)
#define kHamPlay30fps (0)
#define kHamPlay20fps (1)
#define kHamPlay15fps (2)
#define kHamPlay12fps (3)
#define kHamPlay10fps (4)
#define FPS_FLAGS (
   (
      ("kHamPlay30fps" "30 frames per second")
      ("kHamPlay20fps" "20 frames per second")
      ("kHamPlay15fps" "15 frames per second")
      ("kHamPlay12fps" "12 frames per second")
      ("kHamPlay10fps" "10 frames per second")
   )
)
#define kHamPlay4xSlower (0)
#define kHamPlay3xSlower (1)
#define kHamPlay2xSlower (2)
#define kHamPlayRegularSpeed (3)
#define kHamPlay2xFaster (4)
#define kHamPlay3xFaster (5)
#define kHamPlay4xFaster (6)
#define SPEED_FLAGS (
   (
      ("kHamPlay4xSlower" "4x slow down")
      ("kHamPlay3xSlower" "3x slow down")
      ("kHamPlay2xSlower" "2x slow down")
      ("kHamPlayRegularSpeed" "regular speed")
      ("kHamPlay2xFaster" "2x speed up")
      ("kHamPlay3xFaster" "3x speed up")
      ("kHamPlay4xFaster" "4x speed up")
   )
)
#define kErrorJointHipCenter (1)
#define kErrorJointSpine (2)
#define kErrorJointShoulderCenter (4)
#define kErrorJointHead (8)
#define kErrorJointShoulderLeft (16)
#define kErrorJointElbowLeft (32)
#define kErrorJointWristLeft (64)
#define kErrorJointHandLeft (128)
#define kErrorJointShoulderRight (256)
#define kErrorJointElbowRight (512)
#define kErrorJointWristRight (1024)
#define kErrorJointHandRight (2048)
#define kErrorJointHipLeft (4096)
#define kErrorJointKneeLeft (8192)
#define kErrorJointAnkleLeft (16384)
#define kErrorJointHipRight (32768)
#define kErrorJointKneeRight (65536)
#define kErrorJointAnkleRight (131072)
#define kErrorJointFootLeft (262144)
#define kErrorJointFootRight (524288)
#define kErrorHam1Euclidean (1048576)
#define kErrorHam1Displacement (2097152)
#define kErrorDisplacement (4194304)
#define kErrorPosition (8388608)
#define kFilterVersionHam1 (0)
#define kFilterVersionHam2 (1)
#define kCsvFrameWeighted (1)
#define kCsvNodes (2)
#define kCsvMovePSNR (4)
#define kCsvPSNRThreshold (8)
#define kCsvLimbFrameWeighted (16)
#define kCsvDetectRangeMean (32)
#define kReportFramePSNR (1)
#define kReportFrameWeight (2)
#define kClipNotWeighted (0)
#define kClipWeighted (1)
#define kClipDefaultWeighting (2)