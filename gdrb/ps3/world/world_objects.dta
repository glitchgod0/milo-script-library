#include ../config/macros.dta
#include crowd_audio.dta
#define LIGHTING_CATEGORIES (
   (BRIGHT
      SILHOUETTE
      ALL_OFF
      ALL_OFF_CHAR_ON
      Back_Spot_Blue
      Back_Spot_Blue_Strobe_2fpb
      Back_Spot_Green
      Back_Spot_Green_Strobe_2fpb
      Back_Spot_Patriot
      Back_Spot_Patriot_Strobe_2fpb
      Back_Spot_Violet
      Back_Spot_Violet_Strobe_2fpb
      Center_Blue_Pink
      Center_Green_Yellow
      Cool_Blue_Front_Top_Middle
      Cool_Blue_White
      Cool_Blue_White_Strobe_2fpb
      Cool_Blue_White_Strobe_8fpb
      Cool_BT
      Cool_Green_White
      Cool_Green_White_Strobe_2fpb
      Cool_Green_White_Strobe_8fpb
      Cool_Green_White_Yellow_Strobe_2fpb
      Cool_Green_White_Yellow_Strobe_8fpb
      Cool_Green_Yellow
      Cool_GY
      Front_Middle_Green
      Front_Middle_Patriot
      Front_Middle_Patriot_Strobe_2fpb
      Front_Middle_Warm_Color_RO
      Front_Middle_Warm_Color_VP
      Strobe_Front_Top_All_2fpb
      Strobe_Front_Top_All_8fpb
      Strobe_Front_Top_Center_2fpb
      Strobe_Front_Top_Center_8fpb
      Strobe_Front_Top_LR_2fpb
      Strobe_Front_Top_LR_8fpb
      Strobe_Stage_2fpb
      Strobe_Stage_8fpb
      Strobe_Stage_Main_2fpb
      Strobe_Stage_Main_8fpb
      Strobe_Stage_Main_Only_2fpb
      Strobe_Stage_Main_Only_8fpb
      Strobe_Stage_Main_Wave
      Strobe_Stage_SidesBack_2fpb
      Strobe_Stage_SidesBack_8fpb
      Strobe_Stage_SidesBackFront_2fpb
      Strobe_Stage_SidesBackFront_8fpb
      Warm_Orange_Front_Top_Middle
      Warm_Purple_Front_Top_Middle
      Warm_Red_Front_Top_Middle
      Warm_Red_Orange
      Warm_Red_Orange_Strobe_2fpb
      Warm_Red_Orange_Strobe_8fpb
      Warm_Red_White
      Warm_Red_White_Strobe_2fpb
      Warm_Red_White_Strobe_2fpb01
      blackout_fast
      blackout_slow
      dischord
      flare_fast
      flare_slow
      frenzy
      harmony
      manual_cool
      manual_warm
      searchlights
      silhouettes
      silhouettes_spot
      stomp
      strobe_fast
      strobe_slow
      sweep
      loop_cool
      loop_warm
      win_bre
      bre
   )
)
#define CAMSHOT_CATEGORIES ((#include camera_cats.dta))
#include worldbase.dta
(Tex
   (types
      (sticker
         (editor
            (sizex float (help "scaling in x"))
            (sizey float (help "scaling in y"))
            (display_name symbol (help "display name"))
            (palette_index
               int
               (help "default palette index in the colors list for this sticker")
            )
            (allow_color bool (help "can the user apply color to this image?"))
         )
         (sizex 1)
         (sizey 1)
         (display_name '')
         (palette_index 0)
         (allow_color TRUE)
      )
   )
)
(TexRenderer
   (types
      (snapshot
         (editor
            (camshot
               symbol
               (list
                  {do
                     ($array {array 0})
                     {push_back $array none}
                     {if [proxy]
                        {[proxy] iterate BandCamShot $obj {push_back $array {symbol {$obj name}}}}
                     }
                     {sort $array}
                     $array
                  }
               )
               (help "camshot to use for this render to texture")
            )
         )
         (camshot none)
         (pre_render
            {if [camshot]
               {if {!= [camshot] none}
                  {[proxy] start_shot {[proxy] find [camshot]}}
               }
            }
         )
      )
   )
)
(CamShot
   (allowed_dirs PanelDir)
   (init {$this set category test_shot})
   (editor
      (category
         symbol
         (list CAMSHOT_CATEGORIES)
         (help "Category of the shot")
      )
   )
)
(EventTrigger
   (supported_events
      (start
         p0_hit
         p1_hit
         p2_hit
         p3_hit
         excitement_bad
         excitement_okay
         excitement_great
         excitement_peak
         intro_start
         intro_end
         kick_drum
         snare_drum
         crash_hit
         bass_hit
         post_switch_cam
         music_start
         game_lost
         game_won
         game_won_band0
         game_won_band1
         game_won_tie
         game_won_finale
         verse
         chorus
         bre_success
         mode_coop
         mode_h2hb
         mode_h2hd
         mode_h2hg
         mode_h2hv
      )
   )
   (types
      (toggler
         (editor
            (disable
               object
               (class EventTrigger)
               (help "disable this event trigger when I'm triggered")
            )
            (enable
               object
               (class EventTrigger)
               (help "enable this event trigger when I'm triggered")
            )
         )
         (disable '')
         (enable '')
         (trigger
            {if [disable]
               {script_task kTaskBeats (delay 1.0e-2) (script {[disable] disable})}
            }
            {if [enable]
               {script_task kTaskBeats (delay 1.0e-2) (script {[enable] enable})}
            }
         )
      )
      (endgame_action
         (supported_events
            (endgame_swing_drum_0
               endgame_swing_drum_1
               endgame_swing_drum_2
               endgame_swing_drum_3
               endgame_swing_drum_4
               endgame_swing_bass_0
               endgame_swing_bass_1
               endgame_swing_bass_2
               endgame_swing_bass_3
               endgame_swing_bass_4
               endgame_swing_guitar_0
               endgame_swing_guitar_1
               endgame_swing_guitar_2
               endgame_swing_guitar_3
               endgame_swing_guitar_4
               endgame_vocals_none
               endgame_vocals_low
               endgame_vocals_medium
               endgame_vocals_high
            )
         )
      )
      (backlight
         (editor
            (tex1
               object
               (class Tex)
               (help "texture for first moving layer")
            )
            (tex2
               object
               (class Tex)
               (help "texture for second moving layer")
            )
            (part_tex1
               object
               (class Tex)
               (help "texture for first particle system")
            )
            (part_tex2
               object
               (class Tex)
               (help "texture for second particle system")
            )
         )
         (tex1 '')
         (tex2 '')
         (part_tex1 '')
         (part_tex2 '')
         (trigger
            {if {exists mat02.mat}
               {mat02.mat set diffuse_tex [tex1]}
            }
            {if {exists mat03.mat}
               {mat03.mat set diffuse_tex [tex2]}
            }
            {if {exists part_mat02.mat}
               {part_mat02.mat set diffuse_tex [part_tex1]}
            }
            {if {exists part_mat03.mat}
               {part_mat03.mat set diffuse_tex [part_tex2]}
            }
         )
      )
   )
)
(LightPreset
   (init {$this set category BRIGHT})
   (editor
      (category
         symbol
         (list LIGHTING_CATEGORIES)
         (help "Category of the preset")
      )
   )
   (views
      (flags
         ("category" [category])
         ("platform_only" [platform_only])
      )
   )
   (types
      (target_animator
         (editor
            (backlight
               object
               (class RndDir)
               (help "backlight object to animate")
            )
            (backlight_event
               symbol
               (list
                  {do
                     ($array {array 0})
                     {push_back $array none}
                     {if [backlight]
                        {[backlight] iterate
                           EventTrigger
                           $obj
                           {push_back $array {symbol {$obj name}}}
                        }
                     }
                     {sort $array}
                     $array
                  }
               )
               (help "event trigger to fire for this keyframe")
            )
            (target_1
               (indent
                  (target1
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base1_anim symbol (list {$this get_clip_names}))
                  (base1_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base1_speed float (help "speed multiplier"))
                  (base1_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add1_anim symbol (list {$this get_clip_names}))
                  (add1_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add1_speed float (help "speed multiplier"))
                  (add1_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_2
               (indent
                  (target2
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base2_anim symbol (list {$this get_clip_names}))
                  (base2_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base2_speed float (help "speed multiplier"))
                  (base2_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add2_anim symbol (list {$this get_clip_names}))
                  (add2_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add2_speed float (help "speed multiplier"))
                  (add2_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_3
               (indent
                  (target3
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base3_anim symbol (list {$this get_clip_names}))
                  (base3_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base3_speed float (help "speed multiplier"))
                  (base3_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add3_anim symbol (list {$this get_clip_names}))
                  (add3_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add3_speed float (help "speed multiplier"))
                  (add3_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_4
               (indent
                  (target4
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base4_anim symbol (list {$this get_clip_names}))
                  (base4_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base4_speed float (help "speed multiplier"))
                  (base4_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add4_anim symbol (list {$this get_clip_names}))
                  (add4_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add4_speed float (help "speed multiplier"))
                  (add4_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_5
               (indent
                  (target5
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base5_anim symbol (list {$this get_clip_names}))
                  (base5_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base5_speed float (help "speed multiplier"))
                  (base5_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add5_anim symbol (list {$this get_clip_names}))
                  (add5_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add5_speed float (help "speed multiplier"))
                  (add5_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (target_6
               (indent
                  (target6
                     object
                     (class Character)
                     (help "target object to animate")
                  )
                  (base6_anim symbol (list {$this get_clip_names}))
                  (base6_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (base6_speed float (help "speed multiplier"))
                  (base6_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
                  (add6_anim symbol (list {$this get_clip_names}))
                  (add6_amplitude
                     float
                     (range 0 1)
                     (help "physical scale of animation loop")
                  )
                  (add6_speed float (help "speed multiplier"))
                  (add6_phase
                     float
                     (range 0 1)
                     (help "0 to 1, 0.5 would start the loop half way through")
                  )
               )
            )
            (test script (script {$this start_anim}))
         )
         (backlight {object ''})
         (backlight_event none)
         (target1 {object ''})
         (base1_anim still)
         (base1_amplitude 1)
         (base1_speed 1)
         (base1_phase 0)
         (add1_anim still)
         (add1_amplitude 1)
         (add1_speed 1)
         (add1_phase 0)
         (target2 {object ''})
         (base2_anim still)
         (base2_amplitude 1)
         (base2_speed 1)
         (base2_phase 0)
         (add2_anim still)
         (add2_amplitude 1)
         (add2_speed 1)
         (add2_phase 0)
         (target3 {object ''})
         (base3_anim still)
         (base3_amplitude 1)
         (base3_speed 1)
         (base3_phase 0)
         (add3_anim still)
         (add3_amplitude 1)
         (add3_speed 1)
         (add3_phase 0)
         (target4 {object ''})
         (base4_anim still)
         (base4_amplitude 1)
         (base4_speed 1)
         (base4_phase 0)
         (add4_anim still)
         (add4_amplitude 1)
         (add4_speed 1)
         (add4_phase 0)
         (target5 {object ''})
         (base5_anim still)
         (base5_amplitude 1)
         (base5_speed 1)
         (base5_phase 0)
         (add5_anim still)
         (add5_amplitude 1)
         (add5_speed 1)
         (add5_phase 0)
         (target6 {object ''})
         (base6_anim still)
         (base6_amplitude 1)
         (base6_speed 1)
         (base6_phase 0)
         (add6_anim still)
         (add6_amplitude 1)
         (add6_speed 1)
         (add6_phase 0)
         (get_clip_names
            {if_else [target1]
               {[target1] get_clip_names}
               (still)
            }
         )
         (enter
            {if [backlight]
               {if {!= [backlight_event] none}
                  {unless {[backlight] exists [backlight_event]}
                     {set [backlight_event] none}
                     {notify "invalid backlight event on " {$this name} ", clearing!"}
                  }
               }
            }
         )
         (start_anim
            {if {&& [backlight] {!= [backlight_event] none}}
               {[backlight] trigger [backlight_event]}
            }
            {if [target1]
               {[target1] play_anim
                  [base1_anim]
                  [base1_amplitude]
                  [base1_speed]
                  [base1_phase]
                  [add1_anim]
                  [add1_amplitude]
                  [add1_speed]
                  [add1_phase]
               }
            }
            {if [target2]
               {[target2] play_anim
                  [base2_anim]
                  [base2_amplitude]
                  [base2_speed]
                  [base2_phase]
                  [add2_anim]
                  [add2_amplitude]
                  [add2_speed]
                  [add2_phase]
               }
            }
            {if [target3]
               {[target3] play_anim
                  [base3_anim]
                  [base3_amplitude]
                  [base3_speed]
                  [base3_phase]
                  [add3_anim]
                  [add3_amplitude]
                  [add3_speed]
                  [add3_phase]
               }
            }
            {if [target4]
               {[target4] play_anim
                  [base4_anim]
                  [base4_amplitude]
                  [base4_speed]
                  [base4_phase]
                  [add4_anim]
                  [add4_amplitude]
                  [add4_speed]
                  [add4_phase]
               }
            }
            {if [target5]
               {[target5] play_anim
                  [base5_anim]
                  [base5_amplitude]
                  [base5_speed]
                  [base5_phase]
                  [add5_anim]
                  [add5_amplitude]
                  [add5_speed]
                  [add5_phase]
               }
            }
            {if [target6]
               {[target6] play_anim
                  [base6_anim]
                  [base6_amplitude]
                  [base6_speed]
                  [base6_phase]
                  [add6_anim]
                  [add6_amplitude]
                  [add6_speed]
                  [add6_phase]
               }
            }
         )
         (on_set_frame
            {if [backlight]
               {if {exists backlight_color1.env}
                  {[backlight] set color1 {backlight_color1.env get ambient_color}}
               }
               {if {exists backlight_color2.env}
                  {[backlight] set color2 {backlight_color2.env get ambient_color}}
               }
               {if {exists backlight_color3.env}
                  {[backlight] set color3 {backlight_color3.env get ambient_color}}
               }
               {[backlight] update}
            }
         )
      )
   )
)
(ObjectDir
   (types
      (song
         #ifdef HX_PC

         #else
         (change_subdir
            ($file)
            {if_else {&& {exists game} {has_substr $file ":"}}
               {cond
                  ({has_substr
                        $file
                        "/world/shared/director.milo"}
                     "world/shared/director.milo"
                  )
                  ({has_substr $file "/world/shared/camera.milo"} "world/shared/camera.milo")
                  "stream_cache"
               }
               kDataUnhandled
            }
         )
         #endif
      )
   )
)
(RndDir
   (types
      (chars (enter WORLD_SETUP_CHARACTERS))
      (lighting
         (outfit cavern)
         (editor
            (outfit
               symbol
               (list (P9_OUTFITS))
               (help "character outfit to wear when authoring cameras")
               (post_sync {$this set_outfits})
            )
         )
         WORLD_SET_OUTFITS
         (enter WORLD_SETUP_CHARACTERS {$this set_outfits})
      )
      (venue_lyric
         (set_text
            ($str)
            {if_else {exists lyric.txt}
               {lyric.txt set_text $str}
               {notify {path_name $this} " requires a 'lyric.txt'"}
            }
         )
         (set_font
            ($font)
            {if_else {exists lyric.txt}
               {lyric.txt set_font $font}
               {notify {path_name $this} " requires a 'lyric.txt'"}
            }
         )
         (play_transition
            ($transition)
            {if {exists reset.anim}
               {reset.anim set frame 0}
            }
            {if {== $transition ""}
               {set $transition default.anim}
            }
            {if_else {$this exists $transition}
               {do
                  ($anim {$this find $transition})
                  {$anim set frame 0}
                  {$anim animate}
               }
               {notify "Venue Lyric has no transition animation called " $transition}
            }
         )
      )
      (crowd
         (editor
            (test_excitement
               int
               (list P9_EXCITEMENT_ENUM)
               (help "Crowd excitement to test")
            )
            (test
               script
               (script {$this test_crowd_excitement})
               (help "Set crowd excitement and animate crowd")
            )
         )
         (test_excitement kExcitementOkay)
         (test_crowd_excitement
            {set $crowd.authored_excitement kNumExcitements}
            {set $crowd.authored_action ''}
            {set $crowd.game_excitement [test_excitement]}
            {{$this dir} iterate_self
               WorldCrowd
               $wc
               {if {$wc showing}
                  {$wc set old_excitement kExcitementInvalid}
                  {$wc crowd_update}
               }
            }
         )
         (enter
            {{if_else
                  $world
                  $world
                  {$this dir}} add_sink
               $this
               (excitement
                  game_over
                  game_lost
                  game_won
                  game_won_finale
                  game_won_band0
                  game_won_band1
                  game_won_tie
                  playing_final_cam
                  crowd_realtime
                  crowd_won
                  crowd_mellow
                  crowd_normal
                  crowd_intense
               )
               kSinkModeType
            }
            {set $crowd.game_excitement kExcitementOkay}
            {set $crowd.authored_excitement kExcitementIdle}
            {set $crowd.authored_action ''}
            {set $crowd.idle_flags {'|' kPlayGraphLoop kPlayRealTime}}
            {set $crowd.play_flags kPlayGraphLoop}
         )
         (game_over
            {{if_else
                  $world
                  $world
                  {$this dir}} remove_sink
               $this
               excitement
               crowd_realtime
               crowd_won
               crowd_mellow
               crowd_normal
               crowd_intense
            }
         )
         (game_outro {{$this dir} remove_sink $this})
         (game_lost {set $crowd.game_excitement kExcitementLost})
         (game_won {set $crowd.game_excitement kExcitementWon})
         (game_won_band0 {set $crowd.game_excitement kExcitementWon})
         (game_won_band1 {set $crowd.game_excitement kExcitementWon})
         (game_won_tie {set $crowd.game_excitement kExcitementWon})
         (game_won_finale {set $crowd.game_excitement kExcitementWon})
         (playing_final_cam
            {set $crowd.play_flags
               {'|' kPlayNoBlend kPlayGraphLoop kPlayRealTime}
            }
         )
         (excitement
            ($level)
            {set $crowd.game_excitement $level}
         )
         (crowd_won {set $crowd.authored_excitement kExcitementWon})
         (crowd_realtime {set $crowd.authored_excitement kExcitementIdle})
         (crowd_mellow {set $crowd.authored_excitement kExcitementBad})
         (crowd_normal {set $crowd.authored_excitement kExcitementOkay})
         (crowd_intense {set $crowd.authored_excitement kExcitementGreat})
         (crowd_fists_on {set $crowd.authored_action fists})
         (crowd_fists_off {set $crowd.authored_action ''})
      )
   )
)
(Fur
   (init
      {do
         ($ww {find_obj {$this dir} world.wind})
         {if $ww
            {set [wind] $ww}
         }
      }
   )
)
(WorldCrowd
   (init {$this set_type band})
   (types
      (band
         #include crowd.dta
      )
   )
)
(WorldDir
   (types
      (world
         WORLD_OBJECT_BASE
         (autosave FALSE)
         (select_camera
            {if $p9director
               {handle ($p9director select_camera)}
            }
         )
         (presave {char_clear_outfit_loaders $this})
         (postsave
            ($cached)
            {char_restore_outfit_loaders $this $cached}
            {$this enter}
         )
         (sync_objects
            {if {exists gamecfg}
               {$this camera_random_seed {gamecfg get net_random_seed}}
            }
         )
         (post_tool_sync
            {$this presave}
            {$this postsave 0}
         )
      )
      (venue
         (outfit cavern)
         (lookat_cameras 1)
         (editor
            (outfit
               symbol
               (list (P9_OUTFITS))
               (help "character outfit to wear when authoring cameras")
               (post_sync {$this set_outfits})
            )
            (lookat_cameras
               bool
               (help
                  "Do the guys look at the cameras in this venue?  if false, they can still be forced to look at the camera through song anim keyframes or shot-specific lookats"
               )
            )
            WORLD_OBJECT_EDITOR_COMMON
         )
         (enter
            WORLD_SETUP_CHARACTERS
            {if {&& $edit_mode {! $p9director}}
               {foreach $char {object_list $this P9Character}
                  {if {exists $char}
                     {$char find_interest_objects $this}
                  }
               }
            }
         )
         WORLD_OBJECT_VALIDATE
         WORLD_SET_OUTFITS
         (sync_objects SET_CHAR_ENVS)
      )
      (scene
         (outfit sixtyeight)
         (editor
            (outfit
               symbol
               (list (P9_OUTFITS))
               (help "character outfit to wear when authoring cameras")
               (post_sync
                  {$this set_outfits}
                  {script_task kTaskSeconds
                     (delay 0.1)
                     (script {milo tool_script {'`' {$this set_outfits}} $this})
                  }
               )
            )
         )
         (enter
            WORLD_SETUP_CHARACTERS
            {if {&& {! $p9director} {exists world.cam}}
               {world.cam reset_xfm}
            }
         )
         WORLD_SET_OUTFITS
         (sync_objects SET_CHAR_ENVS)
      )
      (shell
         (editor
            (postprocess
               object
               (class PostProc)
               (help "Post process object to use when this panel is on screen")
               (post_sync {$this update_postproc})
            )
            (refresh_postproc
               script
               (script {$this update_postproc})
               (help "Refresh postprocessor selection on the tool")
            )
         )
         (postprocess '')
         (update_postproc
            {if $edit_mode
               {if_else [postprocess]
                  {[postprocess] select}
                  {rnd reset_postproc}
               }
            }
         )
      )
      (facetest
         (outfit cavern)
         (editor
            (outfit
               symbol
               (list (P9_OUTFITS))
               (help "character outfit to wear when viewing lipsync")
               (post_sync {$this set_outfits})
            )
         )
         WORLD_SET_OUTFITS
         (enter
            {$this set_outfits}
            {do
               ($song
                  {if_else $tool_song
                     {$tool_song song_name}
                     ""
                  }
               )
               {if_else $song
                  {foreach $name (mikedirnt billiejoe trecool)
                     {do
                        ($lip {$this find {sprint $name "_lip"}})
                        ($lipsync "")
                        {$lip set
                           proxy_file
                           {sprint "songs/" $song "/" $name ".milo"}
                        }
                        {set $lipsync {$lip find {sprint $name ".lipsync"}}}
                        {{{object $name} find song.lipdrv} set lipsync $lipsync}
                     }
                  }
                  {notify "To preview lipsync: pick a song to preview in the Anim bar"}
               }
            }
         )
      )
      (georgetest
         (enter
            {$this iterate_self
               P9Character
               $char
               {$char teleport Waypoint.way}
               {$char set group_name stand}
               {$char play}
               {set $char.mic_head TRUE}
            }
         )
      )
   )
)
(P9SongPref
   (init
      {set [studio_outfit] cavern}
      {set [dreamscape_outfit] sgtpepper}
   )
   (editor
      (minivenues
         (array symbol (list {$this get_scenes "world/dreamscape/*/*.milo" 0}))
         (help "list of minivenues to load, you can have 4")
         (no_test)
      )
      (scenes
         (array
            symbol
            (list {$this get_scenes "world/dreamscape/greenscreen/scene/*.milo" 1})
         )
         (help "list of scenes to load, you can have 8")
         (no_test)
      )
      (normal_outfit
         symbol
         (list (P9_OUTFITS))
         (help "the normal outfit used for this songs")
         (no_test)
      )
      (bonus_outfit
         symbol
         (list (P9_OUTFITS))
         (help "the bonus outfit that can be used for this song once unlocked.")
         (no_test)
      )
      (drum_set
         symbol
         (list (RKP_DRUM_SETS))
         (help "the drum set to use for this song")
         (no_test)
      )
      (era
         symbol
         (list (early dream))
         (help "whether or not this is an early era song.")
         (no_test)
      )
      (scene_groups
         (array
            (struct
               (name symbol (help "name of the scene group"))
               (scenetriggers
                  (array
                     symbol
                     (list
                        {if_else {{$this dir} exists P9Director}
                           {{{$this dir} find P9Director} get_scene_triggers}
                           ()
                        }
                     )
                  )
                  (help "array of random scene triggers to choose from")
               )
            )
         )
         (read_only {! {{$this dir} is_a WorldDir}})
      )
      (mikedirnt_instrument
         (array
            symbol
            (list
               {do
                  ($array {array 0})
                  {foreach $inst {find (INSTRUMENTS) outfits}
                     {unless
                        {'||'
                           {== $inst outfits}
                           {has_any_substr {elem $inst 0} (none "_lh_" "drum_")}
                        }
                        {push_back $array {elem $inst 0}}
                     }
                  }
                  $array
               }
            )
         )
      )
      (billiejoe_instrument
         (array
            symbol
            (list
               {do
                  ($array {array 0})
                  {foreach $inst {find (INSTRUMENTS) outfits}
                     {unless
                        {'||'
                           {== $inst outfits}
                           {has_any_substr
                              {elem $inst 0}
                              (none "_lh_" "sitar" "drum_")
                           }
                        }
                        {push_back $array {elem $inst 0}}
                     }
                  }
                  $array
               }
            )
         )
      )
      (trecool_instrument
         (array
            symbol
            (list
               {do
                  ($array {array 0})
                  {foreach $inst {find (INSTRUMENTS) outfits}
                     {if {&& {!= $inst outfits} {has_substr {elem $inst 0} "drum_"}}
                        {push_back $array {elem $inst 0}}
                     }
                  }
                  $array
               }
            )
         )
      )
      (cam_dir
         file
         (ext "Milo" milo)
         (help "Milo file containing song-specific cameras for this song")
      )
      (media_dir
         file
         (ext "Milo" milo)
         (help "Milo file containing song-specific media (for a media wall, etc.).")
      )
      (song_intro_cam
         symbol
         (list
            {do
               ($symlist {array 0})
               {set $source $world}
               {if {&& $p9director {$p9director camera_source}}
                  {set $source {$p9director camera_source}}
               }
               {foreach $string {object_list $source CamShot}
                  {push_back $symlist {symbol $string}}
               }
               $symlist
            }
         )
      )
      (win_cam
         symbol
         (list
            {do
               ($symlist {array 0})
               {set $source $world}
               {if {&& $p9director {$p9director camera_source}}
                  {set $source {$p9director camera_source}}
               }
               {foreach $string {object_list $source CamShot}
                  {push_back $symlist {symbol $string}}
               }
               $symlist
            }
         )
      )
   )
)
(BandCamShot
   (init
      {$this set_type proj9}
      {set [category] test_cam}
      {set [flags] {'|' 1023 kP9DreamAllConfigs}}
      {do
         ($count 0)
         {foreach $char (mikedirnt billiejoe trecool)
            {if {exists $char}
               {$this add_target {object $char}}
               {set [targets $count teleport] FALSE}
               {set [targets $count return] TRUE}
               {'++' $count}
            }
         }
      }
   )
   (views
      (facing
         ("facing" {p9_facing_string [flags]})
         ("cfgs" {p9_configuration_string [flags]})
      )
   )
   (types
      (proj9
         (editor
            (flags
               (struct
                  (BIT_kP9CamLeft
                     bool
                     (post_sync {$this radio kP9CamLeft kP9CamAllFacings})
                     (help "is this a left facing camera")
                     (refresh flags)
                     (alias CamLeft)
                  )
                  (BIT_kP9CamRight
                     bool
                     (post_sync {$this radio kP9CamRight kP9CamAllFacings})
                     (help "is this a right facing camera")
                     (refresh flags)
                     (alias CamRight)
                  )
                  (BIT_kP9CamCenter
                     bool
                     (post_sync {$this radio kP9CamCenter kP9CamAllFacings})
                     (help "is this a center facing camera")
                     (refresh flags)
                     (alias CamCenter)
                  )
                  (BIT_kP9CamBehind
                     bool
                     (post_sync {$this radio kP9CamBehind kP9CamAllFacings})
                     (help "is this a behind facing camera")
                     (refresh flags)
                     (alias CamBehind)
                  )
                  (BIT_kWaypointConfigMocap
                     bool
                     (alias "kWaypointConfigMocap")
                     (help "all waypoints on same point relative to origin")
                  )
                  (BIT_kWaypointConfigLegacy
                     bool
                     (alias "kWaypointConfigLegacy")
                     (help "triangle formation, use for old temp songs")
                  )
                  (BIT_kWaypointConfigMocap_BJRamp
                     bool
                     (alias "kWaypointConfigMocap_BJRamp")
                     (help "Same as kWaypointConfigMocap except BJ is in place for a ramp run")
                  )
                  (BIT_kWaypointConfigMocap_MDRamp
                     bool
                     (alias "kWaypointConfigMocap_MDRamp")
                     (help "Same as kWaypointConfigMocap except MD is in place for a ramp run")
                  )
                  (BIT_kWaypointConfigMocap_BJRamp_MDRamp
                     bool
                     (alias "kWaypointConfigMocap_BJRamp_MDRamp")
                     (help
                        "Same as kWaypointConfigMocap except BJ and MD is in place for a ramp run"
                     )
                  )
                  (BIT_kWaypointConfigMocap_BJCat
                     bool
                     (alias "kWaypointConfigMocap_BJCat")
                     (help
                        "Same as kWaypointConfigMocap except BJ is in place for a catwalk walk"
                     )
                  )
                  (BIT_kWaypointConfigMocap_BJOuterRamp
                     bool
                     (alias "kWaypointConfigMocap_BJOuterRamp")
                     (help
                        "Same as kWaypointConfigMocap except BJ is in place for a ramp run, but a little further out than in kWaypointConfigMocap_BJRamp (special request for boulevardof)"
                     )
                  )
                  (BIT_kWaypointConfigMocap_BJGenLeftRamp
                     bool
                     (alias "kWaypointConfigMocap_BJGenLeftRamp")
                     (help
                        "Same as kWaypointConfigMocap except BJ is in place for a generic ramp run"
                     )
                  )
                  (BIT_kWaypointConfigMocap_BJGenRightRamp
                     bool
                     (alias "kWaypointConfigMocap_BJGenRightRamp")
                     (help
                        "Same as kWaypointConfigMocap except BJ is in place for a generic ramp run"
                     )
                  )
                  (BIT_kWaypointConfigMocap_BJBack
                     bool
                     (alias "kWaypointConfigMocap_BJBack")
                     (help "Same as kWaypointConfigMocap except BJ is a littler further back")
                  )
                  (BIT_kWaypointConfigMocap_BJCatFront
                     bool
                     (alias "kWaypointConfigMocap_BJCatFront")
                     (help
                        "Same as kWaypointConfigMocap_BJCat except BJ is a little further forward"
                     )
                  )
               )
               (help
                  "The camera facing (can only be one) and which configurations are valid."
               )
            )
            (postprocess
               object
               (class PostProc)
               (help "Post process object to use for this shot")
            )
            (crowd_density
               float
               (range 0 1)
               (help "density of crowd")
            )
            (crowd_lod
               int
               (range 0 2)
               (help "LOD of crowd texture (0 =  256x512) (1 = 128x256) (2 = 64x128)")
            )
            (crowd_face_camera bool (help "Whether the crowd should face the camera"))
            (crowd_anim
               symbol
               (list
                  {do
                     {if_else $p9director
                        {do
                           {$p9director get_crowd_anim_groups}
                        }
                        ('' bad ok great win)
                     }
                  }
               )
               (help
                  "Crowd animation to play, overrides normal excitement level - EDITOR ONLY"
               )
            )
            (lighting_preset
               object
               (class LightPreset)
               (help
                  "light preset to fire for this camera only, only use in special cases, lighting override must be on, goes back to normal lighting when the shot is done!"
               )
            )
            (lighting_preset_modifier
               object
               (class LightPreset)
               (help
                  "light preset modifier: this will run in conjunction with the lighting_preset"
               )
            )
            (waypoint_config
               string
               (list
                  {do
                     ($array {array 0})
                     {push_back $array "None"}
                     {foreach $config WAYPOINT_CONFIGURATIONS
                        {push_back $array $config}
                     }
                     $array
                  }
               )
               (help
                  "Waypoint config to activate for this camera only, use it in accordance with anim overrides for band member targets"
               )
            )
            (jumbotron_shot
               object
               (class BandCamShot)
               (help "Jumbotron source override for this BandCamShot")
            )
            (worst
               bool
               (help "When using -worst_only with venuetest, only looks at these shots")
            )
            (play_anim
               object
               (class Anim)
               (help "animation to play with camshot")
            )
            (play_shot
               script
               (help "play this shot (useful for testing next shots)")
               (script
                  {do
                     {if {! $pdirector}
                        {foreach_int $idx 0 {size [targets]}
                           {do
                              ($target [targets $idx target])
                              {if $target
                                 {$target enter}
                              }
                           }
                        }
                     }
                     {$this test_crowd_anim [crowd_anim]}
                     {$world start_shot $this}
                  }
               )
            )
            (stop_shot
               script
               (help "stop the current shot from playing")
               (script
                  {do
                     {$this test_crowd_anim ''}
                     {$world start_shot ''}
                     {if {! $pdirector}
                        {foreach_int $idx 0 {size [targets]}
                           {do
                              ($target [targets $idx target])
                              {if $target
                                 {$target exit}
                              }
                           }
                        }
                     }
                  }
               )
            )
            (start_movie
               object
               (class TexMovie)
               (help "start movie render-to-texture")
            )
            (stop_movie
               object
               (class TexMovie)
               (help "stop movie render-to-texture")
            )
         )
         (worst FALSE)
         (postprocess {object ""})
         (crowd_density 1)
         (crowd_lod 0)
         (crowd_face_camera FALSE)
         (crowd_anim '')
         (lighting_preset '')
         (lighting_preset_modifier '')
         (waypoint_config "None")
         (jumbotron_shot '')
         (play_anim '')
         (start_movie '')
         (stop_movie '')
         (radio
            ($bit $mask)
            {if {& [flags] $bit}
               {mask_eq [flags] $mask}
               {'|=' [flags] $bit}
            }
         )
         (shot_over
            {if {&& $p9director {exists game}}
               {switch [category]
                  (
                     (lose win outro_venue)
                     {handle (game game_outro)}
                  )
                  (outro_multi
                     {$p9director set_shot_category outro_multi}
                     {$p9director pick_new_shot}
                  )
                  (intro_venue
                     {if {$p9director has_intro_song_shot}
                        {$p9director set_shot_category intro_song}
                     }
                     {$p9director pick_new_shot}
                  )
                  (intro_song
                     {with $p9director
                        {set [disabled] FALSE}
                        {set [pick_shot_disabled] FALSE}
                     }
                     {$p9director pick_new_shot}
                  )
               }
            }
         )
         (play_group
            ($char $grp $fwd $units $event)
            {if_else {== {$char get_type} extras}
               {if $grp
                  {{$char find main.drv} play_group $grp {'|' kPlayNoBlend kPlayNodeLoop}}
               }
               {$char override_group $grp TRUE FALSE $fwd $units $event}
            }
         )
         (teleport_char
            ($char $ret)
            {unless {== {$char get_type} extras}
               {$char cam_teleport $ret}
            }
         )
         (update_overlay
            #ifndef _SHIP
            {rnd reflect
               camera
               {print "BandCamShot:" {$this name} " category:" [category] "\n"}
               {print " cfgs: " {p9_configuration_string [flags]} "\n"}
               {print " facing: " {p9_facing_string [flags]} "\n"}
               {print " min_time: " [min_time] "\n"}
            }
            #endif
         )
         (play_movie
            ($texmovie $start)
            {$texmovie set showing $start}
            {$texmovie play_movie $start}
         )
         (start_shot
            {if
               {find_elem
                  (intro_venue intro_song win lose outro_venue outro_finale outro_multi)
                  [category]
               }
               {if_else $p9director
                  {do
                     {if_else {find_elem (intro_venue intro_song) [category]}
                        {$p9director intro_shot_starting}
                        {$p9director outro_shot_starting}
                     }
                  }
                  {do
                     {foreach $char_name (billiejoe mikedirnt trecool)
                        {set $char {find_obj {$this dir} $char_name}}
                        {if $char
                           {$char start_fret_mocap_only}
                        }
                     }
                  }
               }
            }
            {if [postprocess]
               {if_else $p9director
                  {$p9director set cam_postproc [postprocess]}
                  {[postprocess] select}
               }
            }
            {if [jumbotron_shot]
               {if_else $p9director
                  {$p9director set jumbotron_shot {symbol {[jumbotron_shot] name}}}
                  {do
                     ($tex {find_obj {$this dir} TexRenderer.rndtex})
                     {if $tex
                        {$tex set cam_shot [jumbotron_shot]}
                     }
                  }
               }
            }
            #ifndef _SHIP
            {$this update_overlay}
            #endif
            {if [play_anim]
               {[play_anim] animate}
            }
            {if [start_movie]
               {$this play_movie [start_movie] TRUE}
            }
            {do
               ($myname {$this name})
               {if {search_replace $myname ".shot" "_face.trig" $trigname}
                  {do
                     ($fanim {find_obj {$this dir} $trigname})
                     {if $fanim
                        {$fanim trigger}
                     }
                  }
               }
            }
            {if [lighting_preset]
               {if_else $p9director
                  {unless {&& $p9director {$p9director get disable_picking}}
                     {$p9director start_lighting_preset_modifier [lighting_preset]}
                  }
                  {[lighting_preset] animate (loop TRUE)}
               }
               {if [lighting_preset_modifier]
                  {if_else $p9director
                     {unless {&& $p9director {$p9director get disable_picking}}
                        {$p9director start_lighting_preset_modifier [lighting_preset_modifier]}
                     }
                     {[lighting_preset_modifier] animate (loop TRUE)}
                  }
               }
            }
            {if {!= [waypoint_config] "None"}
               {if_else $p9director
                  {$p9director set force_configuration {macro_elem [waypoint_config]}}
                  {do
                     ($wpc {find_obj {$this dir} P9WaypointConfiguration})
                     {if_else $wpc
                        {do
                           {$wpc set configuration {macro_elem [waypoint_config]}}
                           {$wpc preview_configuration}
                        }
                        {notify "couldn't find P9WaypointConfiguration\n"}
                     }
                  }
               }
            }
            {if
               {find_elem
                  (lose win outro_venue outro_finale)
                  [category]
               }
               {handle ($world playing_final_cam)}
            }
            {foreach_int $idx 0 {size [crowds]}
               {do
                  ($crowd [crowds $idx crowd])
                  {if $crowd
                     {$crowd crowd_update}
                     {$crowd set rotate [crowd_face_camera]}
                     {$crowd set_fullness [crowd_density] [crowd_density]}
                     {$crowd set lod [crowd_lod]}
                  }
               }
            }
         )
         (stop_shot
            {if $p9director
               {if
                  {find_elem
                     (intro_venue
                        intro_song
                        win
                        lose
                        outro_venue
                        outro_finale
                        outro_multi
                        intro_song_over
                        intro_venue_over
                     )
                     [category]
                  }
                  {$p9director intro_outro_shot_ending}
               }
               {if
                  {'||'
                     {== [category] intro_over}
                     {&& {== [category] intro_venue} {== {$this size (next_shots)} 0}}
                  }
                  {if_else {$p9director has_intro_song_shot}
                     {$p9director play_intro_song_shot}
                     {$p9director new_song_about_to_play}
                  }
               }
               {if
                  {'||'
                     {== [category] intro_song_over}
                     {&& {== [category] intro_song} {== {$this size (next_shots)} 0}}
                  }
                  {$p9director new_song_about_to_play}
               }
            }
            {if [postprocess]
               {if_else $p9director
                  {$p9director set cam_postproc {object ""}}
                  {rnd reset_postproc}
               }
            }
            {if [stop_movie]
               {$this play_movie [stop_movie] FALSE}
            }
            {if $world
               {if [lighting_preset]
                  {if_else $p9director
                     {$p9director stop_lighting_preset_modifier [lighting_preset]}
                     {[lighting_preset] stop_animation}
                  }
                  {if [lighting_preset_modifier]
                     {if_else $p9director
                        {$p9director stop_lighting_preset_modifier [lighting_preset_modifier]}
                        {[lighting_preset_modifier] stop_animation}
                     }
                  }
               }
            }
            {if {!= [waypoint_config] "None"}
               {if $p9director
                  {$p9director set force_configuration -1}
               }
            }
         )
         (validate
            {if {&& {find_elem (lose win) [category]} [postprocess]}
               {notify {path_name $this} "must specify no postprocess to show"}
            }
         )
         (shot_ok ($prev_shot) TRUE)
         (test_crowd_anim
            ($anim)
            {foreach_int $idx 0 {size [crowds]}
               {do
                  ($crowd [crowds $idx crowd])
                  {if $crowd
                     {$crowd override_anim $anim}
                  }
               }
            }
         )
      )
   )
)
(P9Director
   (test_singleton)
   (types
      (proj9
         (objects_to_restore_visibility ())
         (find_and_set_visibility_in_dir
            ($dir $obj_name $visible $restore)
            {if $dir
               {do
                  ($obj {find_obj $dir $obj_name})
                  {if $obj
                     {$obj set showing $visible}
                     {if $restore
                        {set $entry {array 0}}
                        {push_back $entry $obj_name}
                        {push_back $entry [venue]}
                        {push_back $entry {! $visible}}
                        {push_back [objects_to_restore_visibility] $entry}
                     }
                  }
               }
            }
         )
         (show_bj_detachable_mic
            {do
               {$this find_and_set_visibility_in_dir
                  {find_obj {$this get_curworld} billiejoe}
                  mic.mesh
                  FALSE
                  FALSE
               }
               {$this find_and_set_visibility_in_dir
                  {find_obj {$this get_curworld} billiejoe}
                  mic_stand.mesh
                  FALSE
                  FALSE
               }
               {$this find_and_set_visibility_in_dir
                  {find_obj {$this get_curworld} billiejoe}
                  mic_Detachable.mesh
                  TRUE
                  FALSE
               }
               {$this find_and_set_visibility_in_dir
                  {find_obj {$this get_curworld} billiejoe}
                  mic_stand_Detachable.mesh
                  TRUE
                  FALSE
               }
            }
         )
         (hide_bj_detachable_mic
            {do
               {$this find_and_set_visibility_in_dir
                  {find_obj {$this get_curworld} billiejoe}
                  mic.mesh
                  TRUE
                  FALSE
               }
               {$this find_and_set_visibility_in_dir
                  {find_obj {$this get_curworld} billiejoe}
                  mic_stand.mesh
                  TRUE
                  FALSE
               }
               {$this find_and_set_visibility_in_dir
                  {find_obj {$this get_curworld} billiejoe}
                  mic_Detachable.mesh
                  FALSE
                  FALSE
               }
               {$this find_and_set_visibility_in_dir
                  {find_obj {$this get_curworld} billiejoe}
                  mic_stand_Detachable.mesh
                  FALSE
                  FALSE
               }
            }
         )
         (new_song_loaded
            {foreach $entry [objects_to_restore_visibility]
               {do
                  ($obj_name {elem $entry 0})
                  ($venue {elem $entry 1})
                  ($visible {elem $entry 2})
                  {if {== $venue [venue]}
                     {set $obj {find_obj {$this get_curworld} $obj_name}}
                     {if $obj
                        {$obj set showing $visible}
                     }
                  }
               }
            }
            {resize [objects_to_restore_visibility] 0}
            {$this hide_bj_detachable_mic}
         )
         (new_song_about_to_play
            {$this iterate_chars
               $char
               {handle_type ($char play_song)}
               {$char start_fret_ik_and_mocap}
               {set $fret_dmidi {find_obj $char fret.dmidi}}
               {if $fret_dmidi
                  {$fret_dmidi play chord_c kPlayNoLoop}
               }
               {set $strum_dmidi {find_obj $char strum.dmidi}}
               {if $strum_dmidi
                  {$strum_dmidi play strum_open kPlayNoLoop}
               }
               {$this set face_weight_trecool 0}
               {$this set face_weight_billiejoe 0}
               {$this set face_weight_mikedirnt 0}
            }
            {$this setup_prop_anim}
         )
         (outro_shot_starting
            {$this iterate_chars $char {$char start_fret_mocap_only}}
            {$this reset_kit_clip crash.dmidi}
            {$this reset_kit_clip floortom.dmidi}
            {$this reset_kit_clip hihat.dmidi}
            {$this reset_kit_clip kick.dmidi}
            {$this reset_kit_clip left_crash.dmidi}
            {$this reset_kit_clip left_floortom.dmidi}
            {$this reset_kit_clip left_foot.dmidi}
            {$this reset_kit_clip left_tom.dmidi}
            {$this reset_kit_clip ride.dmidi}
            {$this reset_kit_clip right_crash.dmidi}
            {$this reset_kit_clip right_foot.dmidi}
            {$this reset_kit_clip right_tom.dmidi}
            {$this reset_kit_clip snare.dmidi}
            {$this set crash_ignore_triggers TRUE}
            {$this set floortom_ignore_triggers TRUE}
            {$this set hihat_ignore_triggers TRUE}
            {$this set kick_ignore_triggers TRUE}
            {$this set left_crash_ignore_triggers TRUE}
            {$this set left_floortom_ignore_triggers TRUE}
            {$this set left_foot_ignore_triggers TRUE}
            {$this set left_tom_ignore_triggers TRUE}
            {$this set ride_ignore_triggers TRUE}
            {$this set right_crash_ignore_triggers TRUE}
            {$this set right_foot_ignore_triggers TRUE}
            {$this set right_tom_ignore_triggers TRUE}
            {$this set snare_ignore_triggers TRUE}
            {$this set crash_weight 0}
            {$this set floortom_weight 0}
            {$this set hihat_weight 0}
            {$this set kick_weight 0}
            {$this set left_crash_weight 0}
            {$this set left_floortom_weight 0}
            {$this set left_foot_weight 0}
            {$this set left_tom_weight 0}
            {$this set ride_weight 0}
            {$this set right_crash_weight 0}
            {$this set right_foot_weight 0}
            {$this set right_tom_weight 0}
            {$this set snare_weight 0}
            {$this set brow_clip_mikedirnt {symbol ""}}
            {$this set brow_clip_b_mikedirnt {symbol ""}}
            {$this set brow_weight_mikedirnt 0}
            {$this set brow_clip_balance_mikedirnt 1}
            {$this set lid_clip_mikedirnt {symbol ""}}
            {$this set lid_clip_b_mikedirnt {symbol ""}}
            {$this set lid_weight_mikedirnt 0}
            {$this set lid_clip_balance_mikedirnt 1}
            {$this set add_face_clip_mikedirnt {symbol ""}}
            {$this set add_face_weight_mikedirnt 0}
            {$this set brow_clip_billiejoe {symbol ""}}
            {$this set brow_clip_b_billiejoe {symbol ""}}
            {$this set brow_weight_billiejoe 0}
            {$this set brow_clip_balance_billiejoe 1}
            {$this set lid_clip_billiejoe {symbol ""}}
            {$this set lid_clip_b_billiejoe {symbol ""}}
            {$this set lid_weight_billiejoe 0}
            {$this set lid_clip_balance_billiejoe 1}
            {$this set add_face_clip_billiejoe {symbol ""}}
            {$this set add_face_weight_billiejoe 0}
            {$this set brow_clip_trecool {symbol ""}}
            {$this set brow_clip_b_trecool {symbol ""}}
            {$this set brow_weight_trecool 0}
            {$this set brow_clip_balance_trecool 1}
            {$this set lid_clip_trecool {symbol ""}}
            {$this set lid_clip_b_trecool {symbol ""}}
            {$this set lid_weight_trecool 0}
            {$this set lid_clip_balance_trecool 1}
            {$this set add_face_clip_trecool {symbol ""}}
            {$this set add_face_weight_trecool 0}
            {$this set face_clip_mikedirnt {symbol ""}}
            {$this set face_clip_balance_mikedirnt 1}
            {$this set face_weight_mikedirnt 1}
            {$this set face_clip_billiejoe {symbol ""}}
            {$this set face_clip_balance_billiejoe 1}
            {$this set face_weight_billiejoe 1}
            {$this set face_clip_trecool {symbol ""}}
            {$this set face_clip_balance_trecool 1}
            {$this set face_weight_trecool 1}
         )
         (intro_shot_starting
            {$this outro_shot_starting}
            {$this kill_particles}
         )
         (intro_outro_shot_ending
            {$this set crash_ignore_triggers FALSE}
            {$this set floortom_ignore_triggers FALSE}
            {$this set hihat_ignore_triggers FALSE}
            {$this set kick_ignore_triggers FALSE}
            {$this set left_crash_ignore_triggers FALSE}
            {$this set left_floortom_ignore_triggers FALSE}
            {$this set left_foot_ignore_triggers FALSE}
            {$this set left_tom_ignore_triggers FALSE}
            {$this set ride_ignore_triggers FALSE}
            {$this set right_crash_ignore_triggers FALSE}
            {$this set right_foot_ignore_triggers FALSE}
            {$this set right_tom_ignore_triggers FALSE}
            {$this set snare_ignore_triggers FALSE}
            {$this set crash_weight 1}
            {$this set floortom_weight 1}
            {$this set hihat_weight 1}
            {$this set kick_weight 1}
            {$this set left_crash_weight 1}
            {$this set left_floortom_weight 1}
            {$this set left_foot_weight 1}
            {$this set left_tom_weight 1}
            {$this set ride_weight 1}
            {$this set right_crash_weight 1}
            {$this set right_foot_weight 1}
            {$this set right_tom_weight 1}
            {$this set snare_weight 1}
         )
         (show_bj_mic_stand
            {$this find_and_set_visibility_in_dir
               {$this get_curworld}
               mic_bj.inst
               TRUE
               TRUE
            }
         )
         (hide_bj_mic_stand
            {$this find_and_set_visibility_in_dir
               {$this get_curworld}
               mic_bj.inst
               FALSE
               TRUE
            }
         )
         (show_md_mic_stand
            {$this find_and_set_visibility_in_dir
               {$this get_curworld}
               mic_md.inst
               TRUE
               TRUE
            }
         )
         (hide_md_mic_stand
            {$this find_and_set_visibility_in_dir
               {$this get_curworld}
               mic_md.inst
               FALSE
               TRUE
            }
         )
         (show_ramp_left_mic_stand
            {$this find_and_set_visibility_in_dir
               {$this get_curworld}
               mic_ramp_L.inst
               TRUE
               TRUE
            }
         )
         (hide_ramp_left_mic_stand
            {$this find_and_set_visibility_in_dir
               {$this get_curworld}
               mic_ramp_L.isnt
               FALSE
               TRUE
            }
         )
         (show_ramp_right_mic_stand
            {$this find_and_set_visibility_in_dir
               {$this get_curworld}
               mic_ramp_R.inst
               TRUE
               TRUE
            }
         )
         (hide_ramp_right_mic_stand
            {$this find_and_set_visibility_in_dir
               {$this get_curworld}
               mic_ramp_R.inst
               FALSE
               TRUE
            }
         )
         (show_runway_mic_stand
            {$this find_and_set_visibility_in_dir
               {$this get_curworld}
               mic_runway.inst
               TRUE
               TRUE
            }
         )
         (hide_runway_mic_stand
            {$this find_and_set_visibility_in_dir
               {$this get_curworld}
               mic_runway.inst
               FALSE
               TRUE
            }
         )
         (show_tc_mic_stand
            {$this find_and_set_visibility_in_dir
               {$this get_curworld}
               mic_tre
               TRUE
               TRUE
            }
         )
         (hide_tc_mic_stand
            {$this find_and_set_visibility_in_dir
               {$this get_curworld}
               mic_tre
               FALSE
               TRUE
            }
         )
         (pick_intro_shot
            ($dir)
            {do
               ($intro_shot '')
               {if {exists beatmatch}
                  {do
                     ($intro_category {$world get_intro_category})
                     {if {== $intro_category intro_venue}
                        {if_else {== {meta_performer song} goodriddance}
                           {set $intro_shot {$p9director find_shot_from_camera_source intro_song}}
                           {do
                              {if_else {gamemode in_mode story}
                                 {do
                                    ($chapter_shot_name
                                       {sprintf "%s_intro.shot" {{story chapter} chapter_name}}
                                    )
                                    ($chapter_shot {find_obj $dir $chapter_shot_name})
                                    {if {== $chapter_shot ''}
                                       {notify "Could not find chapter intro shot named " $chapter_shot_name}
                                    }
                                    {set $intro_shot $chapter_shot}
                                 }
                                 {set $intro_shot {$dir find_shot $intro_category}}
                              }
                           }
                        }
                     }
                  }
               }
               $intro_shot
            }
         )
         (pick_intro_song_shot
            ($p9director)
            {do
               ($intro_song_shot '')
               {set $intro_song_shot
                  {$p9director find_shot_from_camera_source intro_song}
               }
               $intro_song_shot
            }
         )
         (pick_venue
            {if_else {exists meta_performer}
               {meta_performer get_venue}
               {{$this get_songpref} get venue}
            }
         )
         (get_outro_venue_shot_name
            {if_else {== {meta_performer song} goodriddance}
               {{$p9director find_shot_from_camera_source win} name}
               {sprintf "%s_outro.shot" {{story chapter} chapter_name}}
            }
         )
         (set_intro_venue_and_song_real_time
            ($sec)
            {beatmatch set_intro_real_time $sec}
         )
      )
   )
)
(P9WaypointConfiguration
   (types
      (proj9
         (on_view_configuration
            {if {&& $edit_mode {! $p9director}}
               {$world set_outfits}
            }
         )
      )
   )
)
(DataDrivenCollection
   (types
      (Song_Group
         (chapter_number 1)
         (song_id
            {do
               ($lowest_id 0)
               ($curr_id 0)
               ($current_this $this)
               {$this set song_id -99}
               {foreach $collection {object_list {$this dir} DataDrivenCollection FALSE}
                  {if {== {$collection get_type} Song_Group}
                     {set_this $collection}
                     {set $curr_id {$collection get song_id}}
                     {set_this $current_this}
                     {if {< $curr_id $lowest_id}
                        {set $lowest_id $curr_id}
                     }
                  }
               }
               {$this set song_id {- $lowest_id 1}}
               {milo record $this 'Updated song_id'}
               {- $lowest_id 1}
            }
         )
         (is_challenge FALSE)
         (is_dlc FALSE)
         (teaser_image "")
         (locked_teaser_image "")
         (editor
            (chapter_number
               int
               (help "Each song should have a unique chapter number.")
            )
            (is_challenge bool (help "Does this song group represent a challenge?"))
            (song_id int (read_only TRUE))
            (is_dlc
               bool
               (help "Is chapter DLC (i.e. shouldn't count for completing the story)")
            )
            (teaser_image
               string
               (list
                  {do
                     ($picture_list {array ()})
                     ($img_path "ui/story/cover_art/")
                     {foreach_file
                        $curr_file
                        "ui\\story\\cover_art\\*_keep.png"
                        {set $full_path ""}
                        {append_str $full_path $img_path}
                        {append_str $full_path $curr_file}
                        {push_back $picture_list $full_path}
                     }
                     {push_back $picture_list ''}
                     {sort $picture_list}
                     $picture_list
                  }
               )
               (help "Path to the image to display in the story song select screen")
            )
            (locked_teaser_image
               string
               (list
                  {do
                     ($picture_list {array ()})
                     ($img_path "ui/story/cover_art/")
                     {foreach_file
                        $curr_file
                        "ui\\story\\cover_art\\*_keep.png"
                        {set $full_path ""}
                        {append_str $full_path $img_path}
                        {append_str $full_path $curr_file}
                        {push_back $picture_list $full_path}
                     }
                     {push_back $picture_list ''}
                     {sort $picture_list}
                     $picture_list
                  }
               )
               (help
                  "Path to the image to display in the story song select screen when the chapter/challenge is locked"
               )
            )
         )
      )
      (Memorabilia
         (special_asset_types
            ($asset_array)
            {array
               ('' Video Image1 Image2 Image3)
            }
         )
         (special_asset_list
            ($curr_asset_type)
            {func get_image_list
               {do
                  ($picture_list {array ()})
                  {foreach_file
                     $curr_file
                     "ui\\story\\memo_art\\*_keep.png"
                     {tolower $curr_file}
                     {search_replace $curr_file "_keep.png" "" $curr_file}
                     {push_back $picture_list $curr_file}
                  }
                  {sort $picture_list}
                  {eval $picture_list}
               }
            }
            {switch $curr_asset_type
               (Video {$tool_video video_list})
               (Image1 {get_image_list})
               (Image2 {get_image_list})
               (Image3 {get_image_list})
               kDataUnhandled
            }
         )
         (is_award FALSE)
         (award_number -1)
         (how_to_earn_text '')
         (how_was_earned_text '')
         (description_text '')
         (editor
            (is_award
               bool
               (help "Is this Memorabilia an award?")
               (refresh award_number)
            )
            (award_number
               int
               (help "Unique number for ths award")
               (hide {! {$this get is_award}})
            )
            (how_to_earn_text
               symbol
               (list {milo localized_tokens})
               (help "Token that tells player how to earn this memorabilia")
            )
            (how_was_earned_text
               symbol
               (list {milo localized_tokens})
               (help "Token that tells player how they earned this memorabilia")
            )
            (description_text
               symbol
               (list {milo localized_tokens})
               (help "Token that describes this memorabilia")
            )
            (infer_from_name
               script
               (help
                  "Convenience method for setting up memorabilia based on the name of the collection"
               )
               (refresh)
               (script {$this setup_green_memo})
            )
         )
         (setup_green_memo
            {do
               ($memo_name "")
               ($completion_test "")
               ($song_name "")
               ($image_base "")
               ($desc_token "")
               ($asset_index -1)
               ($earned_suffix "earned_desc")
               ($earn_suffix "earn_desc")
               {set [is_award] FALSE}
               {search_replace {$this name} ".ddc" "" $memo_name}
               {while {> {$this size (asset_list)} 0}
                  {$this remove (asset_list 0)}
               }
               {while {> {$this size (completion_criteria)} 0}
                  {$this remove (completion_criteria 0)}
               }
               {if {startswith $memo_name "memo_3star"}
                  {search_replace $memo_name "memo_3star_" "" $song_name}
                  {set $completion_test "3_star_all_songs"}
                  {set $image_base "memo_complete"}
               }
               {if {startswith $memo_name "memo_5star"}
                  {search_replace $memo_name "memo_5star_" "" $song_name}
                  {set $completion_test "5_star_all_songs"}
                  {set $image_base "memo_master"}
               }
               {if {startswith $memo_name "memo_chapter"}
                  {search_replace $memo_name "memo_" "" $song_name}
                  {set $completion_test "3_star_all_songs"}
                  {set $image_base "memo"}
               }
               {if {startswith $memo_name "memo_chapterchallenge"}
                  {do
                     ($award_str "")
                     {set [is_award] TRUE}
                     {search_replace $memo_name "memo_" "" $song_name}
                     {search_replace $memo_name "memo_chapterchallenge" "" $award_str}
                     {set [award_number] {int {symbol $award_str}}}
                     {set $completion_test ""}
                     {set $image_base "memo_mastered"}
                     {set $memo_name {sprintf "memo_mastered_%s" $song_name}}
                     {set $earned_suffix "desc"}
                     {set $earn_suffix "criteria"}
                     {set $desc_token {sprintf "prize%d_desc" [award_number]}}
                     {$this insert (asset_list {'++' $asset_index}) ''}
                     {set [asset_list $asset_index asset_type] "Video"}
                     {set [asset_list $asset_index asset_name]
                        {sprintf "prize%i_video" [award_number]}
                     }
                     {$this insert (asset_list {'++' $asset_index}) ''}
                     {set [asset_list $asset_index asset_type] "Image2"}
                     {set [asset_list $asset_index asset_name]
                        {sprintf "%s_%s_02" $image_base $song_name}
                     }
                     {$this insert (asset_list {'++' $asset_index}) ''}
                     {set [asset_list $asset_index asset_type] "Image3"}
                     {set [asset_list $asset_index asset_name]
                        {sprintf "%s_%s_03" $image_base $song_name}
                     }
                  }
               }
               {set [collection_name] $memo_name}
               {if_else [is_award]
                  {set [how_to_earn_text] {sprintf "prize_%02d_locked_desc" [award_number]}}
                  {set [how_to_earn_text]
                     {sprintf "%s_%s" $memo_name $earn_suffix}
                  }
               }
               {set [how_was_earned_text]
                  {sprintf "%s_%s" $memo_name $earned_suffix}
               }
               {set [description_text] $desc_token}
               {$this insert (completion_criteria 0) ''}
               {$this insert
                  (completion_criteria 0 completion_criteria_songs 0)
                  ''
               }
               {if {!= $completion_test ""}
                  {$this insert
                     (completion_criteria 0 completion_criteria_tests 0)
                     ''
                  }
               }
               {set [completion_criteria 0 completion_criteria_songs 0]
                  $song_name
               }
               {if {!= $completion_test ""}
                  {set [completion_criteria 0 completion_criteria_tests 0]
                     $completion_test
                  }
               }
               {$this insert (asset_list {'++' $asset_index}) ''}
               {set [asset_list $asset_index asset_type] "Image1"}
               {set [asset_list $asset_index asset_name]
                  {sprintf "%s_%s" $image_base $song_name}
               }
               {if [is_award]
                  {-- [award_number]}
               }
            }
         )
      )
      (Accomplishment
         (accomplishment_name '')
         (editor
            (accomplishment_name
               symbol
               (list
                  {do
                     ($acc_array {array 0})
                     ($accomplishments_array {array (#include ../config/accomplishments.dta)})
                     {foreach $acc_entry $accomplishments_array
                        {push_back $acc_array {elem $acc_entry 0}}
                     }
                     {push_back $acc_array ''}
                     {sort $acc_array}
                     $acc_array
                  }
               )
               (help "Which accomplishment to unlock")
            )
         )
      )
   )
)