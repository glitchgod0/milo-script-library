#define LYRICS_PARSER_DETAILS (
   (init
      {if {&& $p9director {$p9director valid_lyric_part [track_name]}}
         {$p9director clear_lyrics}
      }
   )
   (lyric
      {if {&& $p9director {$p9director valid_lyric_part [track_name]}}
         {$p9director add_lyrics $mp.val {beat_to_seconds $mp.start}}
      }
   )
)
{func rt_test_space
   ($before $after)
   {&& {> $mp.before_delta_sec $before} {> $mp.after_delta_sec $after}}
}
{new MidiParser
   events_parser
   (track_name EVENTS)
   (text
      {unless {has_substr $mp.val crowd_}
         {$this add_message $mp.data}
      }
   )
}
{new MidiParser
   lyrics_parser_vocals
   (track_name 'PART VOCALS')
   LYRICS_PARSER_DETAILS
}
{new MidiParser
   lyrics_parser_harmony1
   (track_name 'PART HARM1')
   LYRICS_PARSER_DETAILS
}
{new MidiParser
   lyrics_parser_harmony2
   (track_name 'PART HARM2')
   LYRICS_PARSER_DETAILS
}
{new MidiParser
   lyrics_parser_harmony3
   (track_name 'PART HARM3')
   LYRICS_PARSER_DETAILS
}
{new MidiParser
   active_events_parser
   (track_name EVENTS)
   (compress TRUE)
   (text
      {unless
         {'||'
            {== $mp.val section}
            {has_substr $mp.val tut_}
            {&&
               {has_substr $mp.val crowd_}
               {! {find_elem (crowd_clap crowd_noclap) $mp.val}}
            }
         }
         {$this add_message $mp.val}
      }
   )
}
{new MidiParser
   bass_strum
   (inverted TRUE)
   (track_name 'PART BASS')
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 0.24}
      {set $mp.mapping ''}
      {set $mp.up FALSE}
   )
   MIDIPARSER_CONVERTFUNCTIONS
   (idle
      {switch $mp.mapping
         (StrumMap_SlapBass {$this insert_idle bass_slap_open 3.52 0.4 0.4})
         (StrumMap_Pick {$this insert_idle strum_open 3.52 0.4 0.4})
         {$this insert_idle bass_finger_open 3.52 0.4 0.4}
      }
   )
   (text
      {if {&& {== $mp.val map} {has_substr {elem $mp.data 1} "StrumMap"}}
         {set $mp.mapping {elem $mp.data 1}}
      }
   )
   (gem
      {switch $mp.mapping
         (StrumMap_SlapBass
            {cond
               ({> $mp.prev_start 1}
                  {set $mp.up FALSE}
                  {$this add_message bass_slap_thumb}
               )
               ($mp.up
                  {set $mp.up FALSE}
                  {$this add_message bass_slap_thumb}
               )
               {set $mp.up TRUE}
               {$this add_message bass_slap_index}
            }
         )
         (StrumMap_Pick
            {$this rt_compute_space}
            {if_else $mp.single_bit
               {cond
                  ({rt_test_space 0.25 1}
                     {set $mp.up FALSE}
                     {$this add_message single_slow}
                  )
                  ({rt_test_space 0.0 0.4}
                     {set $mp.up FALSE}
                     {$this add_message single_medium_down}
                  )
                  ($mp.up
                     {set $mp.up FALSE}
                     {$this add_message single_fast_up}
                  )
                  {set $mp.up TRUE}
                  {$this add_message single_fast_down}
               }
               {do
                  {cond
                     ({rt_test_space 0.25 1}
                        {set $mp.up FALSE}
                        {$this add_message chord_slow}
                     )
                     ({rt_test_space 0 0.25}
                        {set $mp.up FALSE}
                        {$this add_message chord_medium}
                     )
                     ($mp.up
                        {set $mp.up FALSE}
                        {$this add_message single_fast_up}
                     )
                     {set $mp.up TRUE}
                     {$this add_message single_fast_down}
                  }
               }
            }
         )
         {$this add_message
            {if_else {'||' {== $mp.val kMPGem4} {== $mp.val kMPGem5}}
               {if_else {> $mp.prev_start 1}
                  {do
                     {set $mp.up FALSE}
                     bass_finger_middle_hi
                  }
                  {if_else $mp.up
                     {do
                        {set $mp.up FALSE}
                        bass_finger_middle_hi
                     }
                     {do
                        {set $mp.up TRUE}
                        bass_finger_index_hi
                     }
                  }
               }
               {if_else {> $mp.prev_start 1}
                  {do
                     {set $mp.up FALSE}
                     bass_finger_middle
                  }
                  {if_else $mp.up
                     {do
                        {set $mp.up FALSE}
                        bass_finger_middle
                     }
                     {do
                        {set $mp.up TRUE}
                        bass_finger_index
                     }
                  }
               }
            }
         }
      }
   )
}
{new MidiParser
   bass_fret
   (inverted TRUE)
   (track_name 'PART BASS')
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set [min_gap] 0.12}
      {set [max_gap] 0.24}
      {set $bass_fret.streak_start 0}
      {set $bass_fret.streak_end 0}
      {set $bass_fret.streak_val ''}
      {set $mp.mapping ''}
   )
   (term {$this add_streak})
   (idle {$this insert_idle open 0.52 0.24 0.24})
   (text
      {if {&& {== $mp.val map} {has_substr {elem $mp.data 1} "HandMap"}}
         {set $mp.mapping {elem $mp.data 1}}
      }
   )
   (gem
      {do
         ($val
            {switch $mp.mapping
               (HandMap_Chord_C chord_c)
               (HandMap_Chord_D chord_d)
               (HandMap_Chord_A chord_aminor)
               (HandMap_AllChords
                  {if_else {< $mp.lowest_bit kMPGem4}
                     chord_power_lo
                     chord_power_hi
                  }
               )
               (HandMap_DropD
                  {if_else $mp.single_bit
                     {switch $mp.val
                        (kMPGem1 open)
                        ((kMPGem2 kMPGem3) chord_power_lo)
                        chord_power_hi
                     }
                     {if_else {< $mp.lowest_bit kMPGem3}
                        chord_power_lo
                        chord_power_hi
                     }
                  }
               )
               (HandMap_DropD2
                  {if_else $mp.single_bit
                     {switch $mp.val
                        (kMPGem1 open)
                        (kMPGem2 index)
                        (kMPGem3 middle)
                        (kMPGem4 ring_hi)
                        pinky_hi
                     }
                     {if_else {< $mp.lowest_bit kMPGem3}
                        chord_power_lo
                        chord_power_hi
                     }
                  }
               )
               {if_else $mp.single_bit
                  {switch $mp.val
                     (kMPGem1 index)
                     (kMPGem2 ring)
                     (kMPGem3 pinky)
                     (kMPGem4 middle_hi)
                     ring_hi
                  }
                  {if_else {< $mp.lowest_bit kMPGem3}
                     chord_power_lo
                     chord_power_hi
                  }
               }
            }
         )
         {if_else {&& {== $val $bass_fret.streak_val} {< $mp.prev_start 1.1}}
            {set $bass_fret.streak_end $mp.end}
            {$this add_streak}
         }
      }
   )
   (add_streak
      {if $bass_fret.streak_val
         {$this add_message_se
            $bass_fret.streak_start
            $bass_fret.streak_end
            $bass_fret.streak_val
         }
      }
      {set $bass_fret.streak_start $mp.start}
      {set $bass_fret.streak_end $mp.end}
      {set $bass_fret.streak_val $val}
   )
}
{new MidiParser
   guitar_strum
   (track_name 'PART GUITAR')
   (inverted TRUE)
   (up FALSE)
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init {set [max_gap] 0.5})
   (mp.up FALSE)
   MIDIPARSER_CONVERTFUNCTIONS
   (idle {$this insert_idle strum_open 1.0 0.5 0.5})
   (gem
      {$this rt_compute_space}
      {if_else $mp.single_bit
         {cond
            ({rt_test_space 0.25 1}
               {set $mp.up FALSE}
               {$this add_message single_slow}
            )
            ({rt_test_space 0.0 0.4}
               {set $mp.up FALSE}
               {$this add_message single_medium_down}
            )
            ($mp.up
               {set $mp.up FALSE}
               {$this add_message single_fast_up}
            )
            {set $mp.up TRUE}
            {$this add_message single_fast_down}
         }
         {do
            {cond
               ({rt_test_space 0.25 1}
                  {set $mp.up FALSE}
                  {$this add_message chord_slow}
               )
               ({rt_test_space 0 0.25}
                  {set $mp.up FALSE}
                  {$this add_message chord_medium}
               )
               ($mp.up
                  {set $mp.up FALSE}
                  {$this add_message single_fast_up}
               )
               {set $mp.up TRUE}
               {$this add_message single_fast_down}
            }
         }
      }
   )
}
{new MidiParser
   guitar_string_open
   (track_name 'PART GUITAR')
   (inverted TRUE)
   (append_length TRUE)
   (compress TRUE)
   (init
      {set [max_gap] 0.5}
      {set $mp.mapping ''}
   )
   (text
      {if {&& {== $mp.val map} {has_substr {elem $mp.data 1} "HandMap"}}
         {set $mp.mapping {elem $mp.data 1}}
      }
   )
   (gem
      {switch $mp.mapping
         (HandMap_DropD
            {$this add_message
               {if_else {&& $mp.single_bit {== $mp.val kMPGem1}}
                  open
                  closed
               }
            }
         )
         (HandMap_DropD2
            {$this add_message
               {if_else {&& $mp.single_bit {== $mp.val kMPGem1}}
                  open
                  closed
               }
            }
         )
      }
   )
}
{new MidiParser
   guitar_string_hi
   (track_name 'PART GUITAR')
   (inverted TRUE)
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init {set [max_gap] 0.5})
   (gem
      {if_else $mp.single_bit
         {if {> $mp.lowest_bit kMPGem2}
            {$this add_message strum}
         }
         {$this add_message strum}
      }
   )
}
{new MidiParser
   guitar_string_low
   (track_name 'PART GUITAR')
   (inverted TRUE)
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init {set [max_gap] 0.5})
   (gem
      {if_else $mp.single_bit
         {if {< $mp.lowest_bit kMPGem3}
            {$this add_message strum}
         }
         {$this add_message strum}
      }
   )
}
{new MidiParser
   bass_string_hi
   (track_name 'PART BASS')
   (inverted TRUE)
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init {set [max_gap] 0.5})
   (gem
      {if_else $mp.single_bit
         {if {> $mp.lowest_bit kMPGem2}
            {$this add_message strum}
         }
         {$this add_message strum}
      }
   )
}
{new MidiParser
   bass_string_low
   (track_name 'PART BASS')
   (inverted TRUE)
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init {set [max_gap] 0.5})
   (gem
      {if_else $mp.single_bit
         {if {< $mp.lowest_bit kMPGem3}
            {$this add_message strum}
         }
         {$this add_message strum}
      }
   )
}
#define GUITARFRETMAPPINGS (
   (message_type midi_parser)
   (init
      {set [min_gap] 0.24}
      {set [max_gap] 0.5}
      {set $mp.mapping ''}
   )
   (idle {$this insert_idle open 0.52 0.5 0.5})
   (text
      {if {&& {== $mp.val map} {has_substr {elem $mp.data 1} "HandMap"}}
         {set $mp.mapping {elem $mp.data 1}}
      }
   )
   (gem
      {$this add_message
         {switch $mp.mapping
            (HandMap_NoChords
               {if_else $mp.single_bit
                  {switch $mp.val
                     (kMPGem1
                        {if_else {> $mp.length 0.3}
                           index_vibrato
                           index
                        }
                     )
                     (kMPGem2
                        {if_else {> $mp.length 0.3}
                           middle_vibrato
                           middle
                        }
                     )
                     (kMPGem3
                        {if_else {> $mp.length 0.3}
                           ring_hi_vibrato
                           ring_hi
                        }
                     )
                     (kMPGem4
                        {if_else {> $mp.length 0.3}
                           pinky_hi_vibrato
                           pinky_hi
                        }
                     )
                     (kMPGem5
                        {if_else {> $mp.length 0.3}
                           {random_elem (index_hi_vibrato ring_hi_vibrato)}
                           {random_elem (index_hi middle_hi ring_hi)}
                        }
                     )
                     kDataUnhandled
                  }
                  {switch $mp.lowest_bit
                     (kMPGem1 index)
                     (kMPGem2 middle)
                     (kMPGem3 ring)
                     (kMPGem4 pinky)
                     kDataUnhandled
                  }
               }
            )
            (HandMap_AllBend ring_hi_vibrato)
            (HandMap_Chord_C chord_c)
            (HandMap_Chord_D chord_d)
            (HandMap_Chord_A chord_aminor)
            (HandMap_AllChords
               {if_else {< $mp.lowest_bit kMPGem4}
                  chord_power_lo
                  chord_power_hi
               }
            )
            (HandMap_DropD
               {if_else $mp.single_bit
                  {switch $mp.val
                     (kMPGem1 open)
                     ((kMPGem2 kMPGem3) chord_power_lo)
                     chord_power_hi
                  }
                  {if_else {< $mp.lowest_bit kMPGem3}
                     chord_power_lo
                     chord_power_hi
                  }
               }
            )
            (HandMap_DropD2
               {if_else $mp.single_bit
                  {switch $mp.val
                     (kMPGem1 open)
                     (kMPGem2
                        {if_else {> $mp.length 0.3}
                           index_vibrato
                           index
                        }
                     )
                     (kMPGem3
                        {if_else {> $mp.length 0.3}
                           middle_vibrato
                           middle
                        }
                     )
                     (kMPGem4
                        {if_else {> $mp.length 0.3}
                           ring_hi_vibrato
                           ring_hi
                        }
                     )
                     (kMPGem5
                        {if_else {> $mp.length 0.3}
                           pinky_hi_vibrato
                           pinky_hi
                        }
                     )
                  }
                  {if_else {< $mp.lowest_bit kMPGem3}
                     chord_power_lo
                     chord_power_hi
                  }
               }
            )
            (HandMap_Solo
               {if_else $mp.single_bit
                  {switch $mp.val
                     (kMPGem1
                        {if_else {> $mp.length 0.3}
                           index_vibrato
                           index
                        }
                     )
                     (kMPGem2
                        {if_else {> $mp.length 0.3}
                           middle_vibrato
                           pinky
                        }
                     )
                     (kMPGem3
                        {if_else {> $mp.length 0.3}
                           ring_vibrato
                           index_hi
                        }
                     )
                     (kMPGem4
                        {if_else {> $mp.length 0.3}
                           pinky_vibrato
                           ring_hi
                        }
                     )
                     (kMPGem5
                        {if_else {> $mp.length 0.3}
                           {random_elem (index_vibrato ring_vibrato)}
                           middle_hi
                        }
                     )
                  }
                  {switch $mp.lowest_bit
                     (kMPGem1
                        {cond
                           ({& kMPGem2 $mp.val}
                              {if_else {> $mp.length 0.3}
                                 index_vibrato
                                 chord_d
                              }
                           )
                           ({& kMPGem3 $mp.val}
                              {if_else {> $mp.length 0.3}
                                 middle_vibrato
                                 chord_d
                              }
                           )
                           ({& kMPGem4 $mp.val}
                              {if_else {> $mp.length 0.3}
                                 ring_vibrato
                                 chord_d
                              }
                           )
                           {if_else {> $mp.length 0.3}
                              ring_vibrato
                              chord_d
                           }
                        }
                     )
                     (kMPGem2
                        {cond
                           ({& kMPGem3 $mp.val}
                              {if_else {> $mp.length 0.3}
                                 pinky_vibrato
                                 chord_d
                              }
                           )
                           ({& kMPGem4 $mp.val}
                              {if_else {> $mp.length 0.3}
                                 index_hi_vibrato
                                 chord_d
                              }
                           )
                           {if_else {> $mp.length 0.3}
                              middle_hi_vibrato
                              chord_d
                           }
                        }
                     )
                     (kMPGem3
                        {cond
                           ({& kMPGem4 $mp.val}
                              {if_else {> $mp.length 0.3}
                                 ring_hi_vibrato
                                 chord_d
                              }
                           )
                           {if_else {> $mp.length 0.3}
                              index_hi_vibrato
                              chord_d
                           }
                        }
                     )
                     {if_else {> $mp.length 0.3}
                        ring_hi_vibrato
                        chord_d
                     }
                  }
               }
            )
            {if_else $mp.single_bit
               {switch $mp.val
                  (kMPGem1
                     {if_else {> $mp.length 0.3}
                        index_vibrato
                        index
                     }
                  )
                  (kMPGem2
                     {if_else {> $mp.length 0.3}
                        ring_vibrato
                        pinky
                     }
                  )
                  (kMPGem3
                     {if_else {> $mp.length 0.3}
                        index_hi_vibrato
                        index_hi
                     }
                  )
                  (kMPGem4
                     {if_else {> $mp.length 0.3}
                        ring_hi_vibrato
                        ring_hi
                     }
                  )
                  {if_else {> $mp.length 0.3}
                     middle_hi_vibrato
                     middle_hi
                  }
               }
               {if_else {< $mp.lowest_bit kMPGem3}
                  chord_power_lo
                  chord_power_hi
               }
            }
         }
      }
   )
)
{new MidiParser
   guitar_streak_parser
   (track_name 'PART GUITAR')
   (compress TRUE)
   (streak_count 0)
   (streak_start 0)
   (last_start 0)
   (init {set [zero_length] TRUE})
   (gem
      {if_else $mp.single_bit
         {if_else {== [streak_count] 0}
            {do
               {set [streak_count] 1}
               {set [streak_start] $mp.start}
            }
            {if_else {< $mp.prev_start 0.75}
               {do
                  {'++' [streak_count]}
                  {set [last_start] $mp.start}
               }
               {do
                  {if {> [streak_count] 3}
                     {set $orig_start $mp.start}
                     {set $mp.start [streak_start]}
                     {set $mp.end [streak_start]}
                     {$this add_message lookat_in}
                     {set $mp.start [last_start]}
                     {set $mp.end [last_start]}
                     {$this add_message lookat_out}
                  }
                  {set [streak_count] 0}
               }
            }
         }
         {do
            {set [streak_count] 0}
         }
      }
   )
}
{new MidiParser
   guitar_fret
   (track_name 'PART GUITAR')
   (inverted TRUE)
   (append_length TRUE)
   (compress TRUE)
   GUITARFRETMAPPINGS
}
{new MidiParser
   bass_fret_pos
   (track_name 'PART BASS')
   (inverted TRUE)
   (compress TRUE)
   (append_length TRUE)
   (message_type new_spot)
   (init {set [min_gap] 0.25})
   (allowed_notes 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59)
   (midi
      {$this add_message
         {switch $mp.val
            (40 spot_neck_fret01.mesh)
            (41 spot_neck_fret02.mesh)
            (42 spot_neck_fret03.mesh)
            (43 spot_neck_fret04.mesh)
            (44 spot_neck_fret05.mesh)
            (45 spot_neck_fret06.mesh)
            (46 spot_neck_fret07.mesh)
            (47 spot_neck_fret08.mesh)
            (48 spot_neck_fret09.mesh)
            (49 spot_neck_fret10.mesh)
            (50 spot_neck_fret11.mesh)
            (51 spot_neck_fret12.mesh)
            (52 spot_neck_fret13.mesh)
            (53 spot_neck_fret14.mesh)
            (54 spot_neck_fret15.mesh)
            (55 spot_neck_fret16.mesh)
            (56 spot_neck_fret17.mesh)
            (57 spot_neck_fret18.mesh)
            (58 spot_neck_fret19.mesh)
            (59 spot_neck_fret20.mesh)
            kDataUnhandled
         }
      }
   )
}
{new MidiParser
   guitar_fret_pos
   (track_name 'PART GUITAR')
   (inverted TRUE)
   (append_length TRUE)
   (compress TRUE)
   (message_type new_spot)
   (init {set [min_gap] 0.25})
   (allowed_notes 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59)
   (midi
      {$this add_message
         {switch $mp.val
            (40 spot_neck_fret01.mesh)
            (41 spot_neck_fret02.mesh)
            (42 spot_neck_fret03.mesh)
            (43 spot_neck_fret04.mesh)
            (44 spot_neck_fret05.mesh)
            (45 spot_neck_fret06.mesh)
            (46 spot_neck_fret07.mesh)
            (47 spot_neck_fret08.mesh)
            (48 spot_neck_fret09.mesh)
            (49 spot_neck_fret10.mesh)
            (50 spot_neck_fret11.mesh)
            (51 spot_neck_fret12.mesh)
            (52 spot_neck_fret13.mesh)
            (53 spot_neck_fret14.mesh)
            (54 spot_neck_fret15.mesh)
            (55 spot_neck_fret16.mesh)
            (56 spot_neck_fret17.mesh)
            (57 spot_neck_fret18.mesh)
            (58 spot_neck_fret19.mesh)
            (59 spot_neck_fret20.mesh)
            kDataUnhandled
         }
      }
   )
}
{new MidiParser
   guitarist_parser
   (track_name 'PART GUITAR')
   (compress TRUE)
   (init {set [start_offset] -1})
   (text {$this add_message $mp.val})
}
{new MidiParser
   bassist_parser
   (track_name 'PART BASS')
   (compress TRUE)
   (init {set [start_offset] -1})
   (text {$this add_message $mp.val})
}
{new MidiParser
   drummer_parser
   (track_name 'PART DRUMS')
   (compress TRUE)
   (init {set [start_offset] -1})
   (text
      {unless {== $mp.val mix}
         {$this add_message $mp.val}
      }
   )
}
#define TAP_SPACE (0.22)
#define NORM_SPACE (0.37)
#define BIG_SPACE (0.75)
{new MidiParser
   drums_right_hand
   (track_name 'PART DRUMS')
   (inverted TRUE)
   (append_length TRUE)
   (compress TRUE)
   (message_type drum_rhand)
   (has_ride FALSE)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 2}
      {set $mp.fig8 FALSE}
      {set $mp.fig8_left FALSE}
   )
   (idle {$this insert_idle idle 1.0 0.5 0.5})
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 27 31 32 36 37 38 39 40 41 42 47 49 51)
   (midi
      {$this rt_compute_space}
      {$this add_message
         {switch $mp.val
            (27
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE} snare_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE} snare)
                  ({rt_test_space TAP_SPACE TAP_SPACE} snare_tap)
                  ({rt_test_space 0 BIG_SPACE} snare_tap)
                  snare_hover
               }
            )
            (31
               {if_else $mp.fig8
                  {if_else $mp.fig8_left
                     {do
                        {if_else {== {$this next_val} 31}
                           {do
                              {set $mp.fig8_left FALSE}
                              fig8_l
                           }
                           {do
                              {set $mp.fig8 FALSE}
                              fig8_return
                           }
                        }
                     }
                     {do
                        {set $mp.fig8_left TRUE}
                        {if_else {== {$this next_val} 31}
                           fig8_r
                           {do
                              {set $mp.fig8 FALSE}
                              fig8_return
                           }
                        }
                     }
                  }
                  {if_else {&& {< $mp.after_delta_sec BIG_SPACE} {== {$this next_val} 31}}
                     {do
                        {set $mp.fig8 TRUE}
                        {set $mp.fig8_left FALSE}
                        fig8_l
                     }
                     {cond
                        ({rt_test_space NORM_SPACE NORM_SPACE} hihat)
                        ({rt_test_space TAP_SPACE TAP_SPACE} hihat_tap)
                        ({rt_test_space 0 BIG_SPACE} hihat_tap)
                        hihat_hover
                     }
                  }
               }
            )
            (36
               {if_else {== {$this prev_val} 38}
                  {cond
                     ({&&
                           {<=
                              {$this delta}
                              1}
                           {rt_test_space TAP_SPACE TAP_SPACE}}
                        crash_l_side
                     )
                     ({<= {$this delta} 1} crash_l_hover)
                     ({rt_test_space BIG_SPACE BIG_SPACE} crash_l_big)
                     ({rt_test_space TAP_SPACE TAP_SPACE} crash_l_soft)
                     ({rt_test_space 0 BIG_SPACE} crash_l_soft)
                     crash_l_hover
                  }
                  {cond
                     ({rt_test_space BIG_SPACE BIG_SPACE} crash_l_big)
                     ({rt_test_space TAP_SPACE TAP_SPACE} crash_l_soft)
                     ({rt_test_space 0 BIG_SPACE} crash_l_soft)
                     crash_l_hover
                  }
               }
            )
            (37
               {cond
                  ({rt_test_space NORM_SPACE NORM_SPACE} crash_l)
                  ({rt_test_space TAP_SPACE TAP_SPACE} crash_l_soft)
                  ({rt_test_space 0 BIG_SPACE} crash_l)
                  crash_l_hover
               }
            )
            (38
               {if_else {== {$this prev_val} 36}
                  {cond
                     ({&&
                           {<=
                              {$this delta}
                              1}
                           {rt_test_space TAP_SPACE TAP_SPACE}}
                        crash_r_side
                     )
                     ({<= {$this delta} 1} crash_r_hover)
                     ({rt_test_space BIG_SPACE BIG_SPACE} crash_r_big)
                     ({rt_test_space TAP_SPACE TAP_SPACE} crash_r_soft)
                     ({rt_test_space 0 BIG_SPACE} crash_r_soft)
                     crash_r_hover
                  }
                  {cond
                     ({rt_test_space BIG_SPACE BIG_SPACE} crash_r_big)
                     ({rt_test_space TAP_SPACE TAP_SPACE} crash_r_soft)
                     ({rt_test_space 0 BIG_SPACE} crash_r_soft)
                     crash_r_hover
                  }
               }
            )
            (39
               {cond
                  ({rt_test_space NORM_SPACE NORM_SPACE} crash_r)
                  ({rt_test_space TAP_SPACE TAP_SPACE} crash_r_soft)
                  ({rt_test_space 0 BIG_SPACE} crash_r_soft)
                  crash_r_hover
               }
            )
            (40 crash_r_grab)
            (41 crash_l_grab)
            (42
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE} ride_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE} ride)
                  ({rt_test_space TAP_SPACE TAP_SPACE} ride_tap)
                  ({rt_test_space 0 BIG_SPACE} ride_tap)
                  ride_hover
               }
            )
            (47
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE} tom_l_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE} tom_l)
                  ({rt_test_space TAP_SPACE TAP_SPACE} tom_l_tap)
                  ({rt_test_space 0 BIG_SPACE} tom_l_tap)
                  tom_l_hover
               }
            )
            (49
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE} tom_r_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE} tom_r)
                  ({rt_test_space TAP_SPACE TAP_SPACE} tom_r_tap)
                  ({rt_test_space 0 BIG_SPACE} tom_r_tap)
                  tom_r_hover
               }
            )
            (51
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE} floortom_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE} floortom)
                  ({rt_test_space TAP_SPACE TAP_SPACE} floortom_tap)
                  ({rt_test_space 0 BIG_SPACE} floortom_tap)
                  floortom_hover
               }
            )
            kDataUnhandled
         }
      }
   )
}
{new MidiParser
   drums_left_hand
   (inverted TRUE)
   (track_name 'PART DRUMS')
   (append_length TRUE)
   (compress TRUE)
   (message_type drum_lhand)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 2}
   )
   (idle {$this insert_idle idle 0.5 3.0 2.5})
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 26 30 34 35 40 41 46 48 50)
   (midi
      {$this rt_compute_space}
      {$this add_message
         {switch $mp.val
            (26
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE} snare_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE} snare)
                  ({rt_test_space TAP_SPACE TAP_SPACE} snare_tap)
                  ({rt_test_space 0 BIG_SPACE} snare_tap)
                  snare_hover
               }
            )
            (30
               {cond
                  ({rt_test_space NORM_SPACE NORM_SPACE} hihat)
                  ({rt_test_space TAP_SPACE TAP_SPACE} hihat_tap)
                  ({rt_test_space 0 BIG_SPACE} hihat_tap)
                  hihat_hover
               }
            )
            (34
               {cond
                  {cond
                     ({rt_test_space BIG_SPACE BIG_SPACE} crash_l_big)
                     ({rt_test_space TAP_SPACE TAP_SPACE} crash_l_soft)
                     ({rt_test_space 0 BIG_SPACE} crash_l_soft)
                     crash_l_hover
                  }
               }
            )
            (35
               {cond
                  ({rt_test_space TAP_SPACE TAP_SPACE} crash_l)
                  ({rt_test_space 0 BIG_SPACE} crash_l)
                  crash_l_hover
               }
            )
            (40 crash_r_grab)
            (41 crash_l_grab)
            (46
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE} tom_l_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE} tom_l)
                  ({rt_test_space TAP_SPACE TAP_SPACE} tom_l_tap)
                  ({rt_test_space 0 BIG_SPACE} tom_l_tap)
                  tom_l_hover
               }
            )
            (48
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE} tom_r_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE} tom_r)
                  ({rt_test_space TAP_SPACE TAP_SPACE} tom_r_tap)
                  ({rt_test_space 0 BIG_SPACE} tom_r_tap)
                  tom_r_hover
               }
            )
            (50
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE} floortom_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE} floortom)
                  ({rt_test_space TAP_SPACE TAP_SPACE} floortom_tap)
                  ({rt_test_space 0 BIG_SPACE} floortom_tap)
                  floortom_hover
               }
            )
            kDataUnhandled
         }
      }
   )
}
{new MidiParser
   drums_left_foot
   (track_name 'PART DRUMS')
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init)
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 25)
   (midi
      {$this add_message_se $mp.start {'+' $mp.start 0.33} hihat_open}
      {$this add_message_se {- $mp.end 0.2} $mp.end hihat_down}
   )
}
{new MidiParser
   drums_right_foot
   (inverted TRUE)
   (track_name 'PART DRUMS')
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 1}
   )
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 24)
   (midi
      {switch $mp.val
         (24 {$this add_message kick_big})
      }
   )
}
{new MidiParser
   drums_snare
   (inverted TRUE)
   (track_name 'PART DRUMS')
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 0.1}
      {set [use_realtime_gaps] TRUE}
   )
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 26 27)
   (midi
      {$this rt_compute_space}
      {$this add_message
         {cond
            ({rt_test_space BIG_SPACE BIG_SPACE} hit_big)
            ({rt_test_space NORM_SPACE NORM_SPACE} hit_norm)
            hit_tap
         }
      }
   )
}
{new MidiParser
   drums_left_tom
   (inverted TRUE)
   (track_name 'PART DRUMS')
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 0.1}
      {set [use_realtime_gaps] TRUE}
   )
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 46 47)
   (midi
      {$this rt_compute_space}
      {$this add_message
         {cond
            ({rt_test_space BIG_SPACE BIG_SPACE} hit_big)
            ({rt_test_space NORM_SPACE NORM_SPACE} hit_norm)
            hit_tap
         }
      }
   )
}
{new MidiParser
   drums_right_tom
   (inverted TRUE)
   (track_name 'PART DRUMS')
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 0.1}
      {set [use_realtime_gaps] TRUE}
   )
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 48 49)
   (midi
      {$this rt_compute_space}
      {$this add_message
         {cond
            ({rt_test_space BIG_SPACE BIG_SPACE} hit_big)
            ({rt_test_space NORM_SPACE NORM_SPACE} hit_norm)
            hit_tap
         }
      }
   )
}
{new MidiParser
   drums_floortom
   (inverted TRUE)
   (track_name 'PART DRUMS')
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 0.1}
      {set [use_realtime_gaps] TRUE}
   )
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 50 51)
   (midi
      {$this rt_compute_space}
      {$this add_message
         {cond
            ({rt_test_space BIG_SPACE BIG_SPACE} hit_big)
            ({rt_test_space NORM_SPACE NORM_SPACE} hit_norm)
            hit_tap
         }
      }
   )
}
{new MidiParser
   drums_left_floortom
   (inverted TRUE)
   (track_name 'PART DRUMS')
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 0.1}
      {set [use_realtime_gaps] TRUE}
   )
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 50 51)
   (midi
      {$this rt_compute_space}
      {$this add_message
         {cond
            ({rt_test_space BIG_SPACE BIG_SPACE} hit_big)
            ({rt_test_space NORM_SPACE NORM_SPACE} hit_norm)
            hit_tap
         }
      }
   )
}
{new MidiParser
   drums_left_crash
   (inverted TRUE)
   (track_name 'PART DRUMS')
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 0.1}
      {set [use_realtime_gaps] TRUE}
   )
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 34 35 36 37 38 41)
   (midi
      {$this rt_compute_space}
      {$this add_message
         {switch $mp.val
            (34 {cond ({rt_test_space NORM_SPACE NORM_SPACE} hit_big) hit_norm})
            (35
               {if_else {rt_test_space NORM_SPACE NORM_SPACE}
                  hit_norm
                  hit_tap
               }
            )
            (36
               {if_else {== {$this prev_val} 38}
                  {cond
                     ({&& {<= {$this delta} 1} {rt_test_space TAP_SPACE TAP_SPACE}} hit_side)
                     ({<= {$this delta} 1} hit_side_fast)
                     ({rt_test_space NORM_SPACE NORM_SPACE} hit_big)
                     hit_norm
                  }
                  {cond ({rt_test_space NORM_SPACE NORM_SPACE} hit_big) hit_norm}
               }
            )
            (37
               {if_else {rt_test_space NORM_SPACE NORM_SPACE}
                  hit_norm
                  hit_tap
               }
            )
            (41 hit_grab)
            kDataUnhandled
         }
      }
   )
}
{new MidiParser
   drums_right_crash
   (inverted TRUE)
   (track_name 'PART DRUMS')
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 0.1}
      {set [use_realtime_gaps] TRUE}
   )
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 36 38 39 40)
   (midi
      {$this rt_compute_space}
      {$this add_message
         {switch $mp.val
            (38
               {if_else {== {$this prev_val} 36}
                  {cond
                     ({&& {<= {$this delta} 1} {rt_test_space TAP_SPACE TAP_SPACE}} hit_side)
                     ({<= {$this delta} 1} hit_side_fast)
                     ({rt_test_space NORM_SPACE NORM_SPACE} hit_big)
                     hit_norm
                  }
                  {cond ({rt_test_space NORM_SPACE NORM_SPACE} hit_big) hit_norm}
               }
            )
            (39
               {cond
                  ({rt_test_space BIG_SPACE BIG_SPACE} hit_big)
                  ({rt_test_space NORM_SPACE NORM_SPACE} hit_norm)
                  hit_tap
               }
            )
            (40 hit_grab)
            kDataUnhandled
         }
      }
   )
}
{new MidiParser
   drums_crash
   (inverted TRUE)
   (track_name 'PART DRUMS')
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 0.1}
      {set [use_realtime_gaps] TRUE}
   )
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 0)
   (midi kDataUnhandled)
}
{new MidiParser
   drums_ride
   (inverted TRUE)
   (track_name 'PART DRUMS')
   (append_length TRUE)
   (compress TRUE)
   (message_type strum_no_flags)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 0.1}
      {set [use_realtime_gaps] TRUE}
   )
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 42)
   (midi
      {switch $mp.val
         (42 {$this add_message hit_tap})
      }
   )
}
{new MidiParser
   drums_kick
   (inverted TRUE)
   (track_name 'PART DRUMS')
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 0.1}
      {set [use_realtime_gaps] TRUE}
   )
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (allowed_notes 24)
   (midi
      {$this add_message
         {switch $mp.val
            (24 kick)
            kDataUnhandled
         }
      }
   )
}
{new MidiParser
   drums_hihat
   (inverted TRUE)
   (track_name 'PART DRUMS')
   (append_length TRUE)
   (compress TRUE)
   (message_type midi_parser)
   (init
      {set [zero_length] TRUE}
      {set [max_gap] 0.1}
      {set [use_realtime_gaps] TRUE}
   )
   (term {$this sec_offset_all WORLD_OFFSET_SEC})
   (hihat_open TRUE)
   (hihat_cache -999)
   (allowed_notes 25 30 31)
   (midi
      {$this add_message
         {switch $mp.val
            (25
               {set [hihat_open] TRUE}
               {set [hihat_cache] $mp.end}
               kDataUnhandled
            )
            (
               (30 31)
               {if_else {>= $mp.start [hihat_cache]}
                  {do
                     {set [hihat_open] FALSE}
                     hit_closed
                  }
                  hit_open
               }
            )
            kDataUnhandled
         }
      }
   )
}
{new MidiParser
   tambourine
   (track_name 'PART VOCALS')
   (compress TRUE)
   (message_type midi_parser)
   (init)
   (allowed_notes 96 97)
   (midi
      {$this add_message
         {switch $mp.val
            (96 tambourine_gem)
            (97 tambourine_implicit)
            kDataUnhandled
         }
      }
   )
}
{new MidiParser
   play_tambourine
   (track_name 'PART VOCALS')
   (compress TRUE)
   (message_type play_tambourine)
   (init)
   (term
      {$this sec_offset_all
         {'*'
            1.0e-3
            {-
               {if_else {exists profile_mgr}
                  {profile_mgr get_song_to_taskmgr_ms}
                  0
               }
               20
            }
         }
      }
   )
   (allowed_notes 96 97)
   (midi
      {unless $edit_mode
         {$this add_message
            {switch $mp.val
               (96 tambourine_gem)
               (97 tambourine_implicit)
               kDataUnhandled
            }
         }
      }
   )
}
{if
   {&&
      {exists gamemode}
      {'||' {gamemode in_mode practice} {gamemode in_mode drum_trainer}}
   }
   {new MidiParser
      practice_metronome
      (track_name EVENTS)
      (compress TRUE)
      (message_type practice_metronome)
      (init)
      (term
         {$this sec_offset_all
            {'*'
               1.0e-3
               {'+'
                  {if_else {exists profile_mgr}
                     {profile_mgr get_song_to_taskmgr_ms}
                     0
                  }
                  35
               }
            }
         }
      )
      (allowed_notes 24 25 26)
      (midi
         {unless $edit_mode
            {$this add_message
               {switch $mp.val
                  (24 metronome_kick)
                  (25 metronome_snare)
                  (26 metronome_hat)
                  kDataUnhandled
               }
            }
         }
      )
   }
}
{new MidiParser
   world_crowd_parser
   (track_name EVENTS)
   (compress TRUE)
   (text
      {if {has_substr $mp.val crowd_}
         {$this add_message $mp.val}
      }
   )
}
{new MidiParser
   world_drum_triggers
   (track_name 'PART DRUMS')
   (allowed_notes 96 97 100)
   (compress TRUE)
   (midi
      {$this add_message
         {switch $mp.val
            (96 kick_drum)
            (97 snare_drum)
            (100 crash_hit)
            kDataUnhandled
         }
      }
   )
}
{if {stagekit_present}
   {new MidiParser
      stagekit_fogstrobe_parser
      (fog_on {stagekit_set_fog TRUE})
      (fog_off {stagekit_set_fog FALSE})
      (track_name VENUE)
      (compress TRUE)
      (message_self TRUE)
      (text
         {if {has_substr $mp.val "FogOn"}
            {$this add_message fog_on}
         }
         {if {has_substr $mp.val "FogOff"}
            {$this add_message fog_off}
         }
      )
   }
   {new MidiParser
      stagekit_bass_parser
      (start_bass {stagekit_set_mode_state kStageBass TRUE})
      (end_bass {stagekit_set_mode_state kStageBass FALSE})
      (track_name 'PART BASS')
      (inverted TRUE)
      (compress TRUE)
      (message_self TRUE)
      (init
         {set [max_gap] 0.24}
         {set [min_gap] 0.2}
      )
      (gem
         {$this add_message start_bass}
         {set $mp.start $mp.end}
         {$this add_message end_bass}
      )
   }
   {new MidiParser
      stagekit_guitar_parser
      (start_guitar {stagekit_set_mode_state kStageGuitar TRUE})
      (end_guitar {stagekit_set_mode_state kStageGuitar FALSE})
      (track_name 'PART GUITAR')
      (inverted TRUE)
      (compress TRUE)
      (message_self TRUE)
      (init
         {set [max_gap] 0.24}
         {set [min_gap] 0.2}
      )
      (gem
         {$this add_message start_guitar}
         {set $mp.start $mp.end}
         {$this add_message end_guitar}
      )
   }
   {new MidiParser
      stagekit_drum_parser
      (start_drum_kick {stagekit_set_mode_state kStageDrumKick TRUE})
      (end_drum_kick {stagekit_set_mode_state kStageDrumKick FALSE})
      (start_drum_snare {stagekit_set_mode_state kStageDrumSnare TRUE})
      (end_drum_snare {stagekit_set_mode_state kStageDrumSnare FALSE})
      (start_drum_crash {stagekit_set_mode_state kStageDrumCrash TRUE})
      (end_drum_crash {stagekit_set_mode_state kStageDrumCrash FALSE})
      (track_name 'PART DRUMS')
      (inverted TRUE)
      (compress TRUE)
      (message_self TRUE)
      (init
         {set [max_gap] 0.24}
         {set [min_gap] 0.2}
      )
      (gem
         {switch $mp.val
            (kMPGem1
               {$this add_message start_drum_kick}
               {set $mp.start $mp.end}
               {$this add_message end_drum_kick}
            )
            (kMPGem2
               {$this add_message start_drum_snare}
               {set $mp.start $mp.end}
               {$this add_message end_drum_snare}
            )
            {$this add_message start_drum_crash}
            {set $mp.start $mp.end}
            {$this add_message end_drum_crash}
         }
      )
   }
   {new MidiParser
      stagekit_vocal_parser
      (start_vocal {stagekit_set_mode_state kStageVocal TRUE})
      (end_vocal {stagekit_set_mode_state kStageVocal FALSE})
      (track_name 'PART VOCALS')
      (inverted TRUE)
      (compress TRUE)
      (message_self TRUE)
      (init
         {set [max_gap] 0.24}
         {set [min_gap] 0.2}
      )
      (midi
         {$this add_message start_vocal}
         {set $mp.start $mp.end}
         {$this add_message end_vocal}
      )
   }
}
{new MidiParser
   tutorial_events_parser
   (track_name EVENTS)
   (compress FALSE)
   (text
      {if {has_substr $mp.val tut_}
         {guitar_tutorial_panel add_tutorial_event $this $mp}
      }
   )
}