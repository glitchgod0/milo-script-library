#define kNote_C_2 (0)
#define kNote_Cs_2 (1)
#define kNote_D_2 (2)
#define kNote_Ds_2 (3)
#define kNote_E_2 (4)
#define kNote_F_2 (5)
#define kNote_Fs_2 (6)
#define kNote_G_2 (7)
#define kNote_Gs_2 (8)
#define kNote_A_2 (9)
#define kNote_As_2 (10)
#define kNote_B_2 (11)
#define kNote_C_1 (12)
#define kNote_Cs_1 (13)
#define kNote_D_1 (14)
#define kNote_Ds_1 (15)
#define kNote_E_1 (16)
#define kNote_F_1 (17)
#define kNote_Fs_1 (18)
#define kNote_G_1 (19)
#define kNote_Gs_1 (20)
#define kNote_A_1 (21)
#define kNote_As_1 (22)
#define kNote_B_1 (23)
#define kNote_C0 (24)
#define kNote_Cs0 (25)
#define kNote_D0 (26)
#define kNote_Ds0 (27)
#define kNote_E0 (28)
#define kNote_F0 (29)
#define kNote_Fs0 (30)
#define kNote_G0 (31)
#define kNote_Gs0 (32)
#define kNote_A0 (33)
#define kNote_As0 (34)
#define kNote_B0 (35)
#define kNote_C1 (36)
#define kNote_Cs1 (37)
#define kNote_D1 (38)
#define kNote_Ds1 (39)
#define kNote_E1 (40)
#define kNote_F1 (41)
#define kNote_Fs1 (42)
#define kNote_G1 (43)
#define kNote_Gs1 (44)
#define kNote_A1 (45)
#define kNote_As1 (46)
#define kNote_B1 (47)
#define kNote_C2 (48)
#define kNote_Cs2 (49)
#define kNote_D2 (50)
#define kNote_Ds2 (51)
#define kNote_E2 (52)
#define kNote_F2 (53)
#define kNote_Fs2 (54)
#define kNote_G2 (55)
#define kNote_Gs2 (56)
#define kNote_A2 (57)
#define kNote_As2 (58)
#define kNote_B2 (59)
#define kNote_C3 (60)
#define kNote_Cs3 (61)
#define kNote_D3 (62)
#define kNote_Ds3 (63)
#define kNote_E3 (64)
#define kNote_F3 (65)
#define kNote_Fs3 (66)
#define kNote_G3 (67)
#define kNote_Gs3 (68)
#define kNote_A3 (69)
#define kNote_As3 (70)
#define kNote_B3 (71)
#define kNote_C4 (72)
#define kNote_Cs4 (73)
#define kNote_D4 (74)
#define kNote_Ds4 (75)
#define kNote_E4 (76)
#define kNote_F4 (77)
#define kNote_Fs4 (78)
#define kNote_G4 (79)
#define kNote_Gs4 (80)
#define kNote_A4 (81)
#define kNote_As4 (82)
#define kNote_B4 (83)
#define kNote_C5 (84)
#define kNote_Cs5 (85)
#define kNote_D5 (86)
#define kNote_Ds5 (87)
#define kNote_E5 (88)
#define kNote_F5 (89)
#define kNote_Fs5 (90)
#define kNote_G5 (91)
#define kNote_Gs5 (92)
#define kNote_A5 (93)
#define kNote_As5 (94)
#define kNote_B5 (95)
#define kNote_C6 (96)
#define kNote_Cs6 (97)
#define kNote_D6 (98)
#define kNote_Ds6 (99)
#define kNote_E6 (100)
#define kNote_F6 (101)
#define kNote_Fs6 (102)
#define kNote_G6 (103)
#define kNote_Gs6 (104)
#define kNote_A6 (105)
#define kNote_As6 (106)
#define kNote_B6 (107)
#define kNote_C7 (108)
#define kNote_Cs7 (109)
#define kNote_D7 (110)
#define kNote_Ds7 (111)
#define kNote_E7 (112)
#define kNote_F7 (113)
#define kNote_Fs7 (114)
#define kNote_G7 (115)
#define kNote_Gs7 (116)
#define kNote_A7 (117)
#define kNote_As7 (118)
#define kNote_B7 (119)
#define kNote_C8 (120)
#define kNote_Cs8 (121)
#define kNote_D8 (122)
#define kNote_Ds8 (123)
#define kNote_E8 (124)
#define kNote_F8 (125)
#define kNote_Fs8 (126)
#define kNote_G8 (127)
#define kPad1 (1)
#define kPad2 (2)
#define kPad3 (4)
#define kPad4 (8)
#define kPad1Pad2 (3)
#define kPad1Pad3 (5)
#define kPad1Pad4 (9)
#define kPad2Pad3 (6)
#define kPad2Pad4 (10)
#define kPad3Pad4 (12)
#define kRest (0)
#define kSnare (1)
#define kHat (2)
#define kRide (3)
#define kCrash (4)
#define kTom1 (5)
#define kTom2 (6)
#define kTom3 (7)
{set [working_track] "EVENTS"}
{set $end 0}
{$this foreach_textevent $text
   $tick
   {if {== $text "[end]"}
      {set $end $tick}
   }
}
{set $music_start $end}
{set $music_end 0}
{set $coda -1}
{$this foreach_textevent $text
   $tick
   {if {== $text "[music_start]"}
      {set $music_start $tick}
   }
   {if {== $text "[music_end]"}
      {set $music_end $tick}
   }
   {if {== $text "[coda]"}
      {set $coda $tick}
   }
}
{set [working_track] "PART DRUMS"}
{set $last_hand_kNote_tick -1}
{set $last_recorded_tick -1}
{set $modifiers 0}
{set $hits 0}
{set $kick 0}
{set $left_hand kRest}
{set $right_hand kRest}
{func add_drum_pad_notes
   ($tick)
   {do
      ($r kRest)
      ($l kRest)
      ($fast {< {- $last_hand_kNote_tick $tick} 240})
      {switch $hits
         (kPad1
            {if_else {&& $fast {!= $right_hand kRest} {== $left_hand kRest}}
               {set $l kSnare}
               {set $r kSnare}
            }
         )
         (kPad2
            {if_else {&& $fast {!= $right_hand kRest} {== $left_hand kRest}}
               {set $l
                  {if_else {& $modifiers kPad2}
                     kTom1
                     kHat
                  }
               }
               {set $r
                  {if_else {& $modifiers kPad2}
                     kTom1
                     kHat
                  }
               }
            }
         )
         (kPad3
            {if_else {&& $fast {!= $right_hand kRest} {== $left_hand kRest}}
               {set $l
                  {if_else {& $modifiers kPad2}
                     kTom2
                     kRide
                  }
               }
               {set $r
                  {if_else {& $modifiers kPad2}
                     kTom2
                     kRide
                  }
               }
            }
         )
         (kPad4
            {if_else {&& $fast {!= $right_hand kRest} {== $left_hand kRest}}
               {set $l
                  {if_else {& $modifiers kPad2}
                     kTom3
                     kCrash
                  }
               }
               {set $r
                  {if_else {& $modifiers kPad2}
                     kTom3
                     kCrash
                  }
               }
            }
         )
         (kPad1Pad2
            {set $l kSnare}
            {set $r
               {if_else {& $modifiers kPad2}
                  kTom1
                  kHat
               }
            }
         )
         (kPad1Pad3
            {set $l kSnare}
            {set $r
               {if_else {& $modifiers kPad3}
                  kTom2
                  kRide
               }
            }
         )
         (kPad1Pad4
            {set $l kSnare}
            {set $r
               {if_else {& $modifiers kPad4}
                  kTom3
                  kCrash
               }
            }
         )
         (kPad2Pad3
            {set $l
               {if_else {& $modifiers kPad2}
                  kTom1
                  kHat
               }
            }
            {set $r
               {if_else {& $modifiers kPad3}
                  kTom2
                  kRide
               }
            }
         )
         (kPad2Pad4
            {set $l
               {if_else {& $modifiers kPad2}
                  kTom1
                  kHat
               }
            }
            {set $r
               {if_else {& $modifiers kPad4}
                  kTom3
                  kCrash
               }
            }
         )
         (kPad3Pad4
            {set $l
               {if_else {& $modifiers kPad3}
                  kTom2
                  kRide
               }
            }
            {set $r
               {if_else {& $modifiers kPad4}
                  kTom3
                  kCrash
               }
            }
         )
      }
      {if_else {< $last_recorded_tick 0}
         {do
            {if {> $tick $music_start}
               {$this add_midi_text "[idle]" $music_start}
            }
            {$this add_midi_text "[play]" $tick}
            {$this add_midi_note kNote_Cs0 $tick 30}
         }
         {if {> {- $tick $last_recorded_tick} 3840}
            {$this add_midi_text "[idle]" {'+' $last_recorded_tick 120}}
            {$this add_midi_text "[play]" $tick}
         }
      }
      {set $last_recorded_tick $tick}
      {if $kick
         {$this add_midi_note kNote_C0 $tick 30}
      }
      {if {'||' $r $l}
         {set $left_hand $l}
         {set $right_hand $r}
         {set $last_hand_kNote_tick $tick}
         {switch $right_hand
            (kSnare {$this add_midi_note kNote_Ds0 $tick 30})
            (kHat {$this add_midi_note kNote_G0 $tick 30})
            (kRide {$this add_midi_note kNote_Fs1 $tick 30})
            (kCrash {$this add_midi_note kNote_C1 $tick 30})
            (kTom1 {$this add_midi_note kNote_B1 $tick 30})
            (kTom2 {$this add_midi_note kNote_Cs2 $tick 30})
            (kTom3 {$this add_midi_note kNote_Ds2 $tick 30})
         }
         {switch $left_hand
            (kSnare {$this add_midi_note kNote_D0 $tick 30})
            (kHat {$this add_midi_note kNote_Fs0 $tick 30})
            (kRide {$this add_midi_note kNote_B0 $tick 30})
            (kCrash {$this add_midi_note kNote_As0 $tick 30})
            (kTom1 {$this add_midi_note kNote_As1 $tick 30})
            (kTom2 {$this add_midi_note kNote_C2 $tick 30})
            (kTom3 {$this add_midi_note kNote_D2 $tick 30})
         }
      }
   }
}
{set $conflicting_text_events
   (
      "[play]"
      "[idle]"
      "[idle_realtime]"
      "[idle_intense]"
      "[mellow]"
      "[intense]"
      "[ride_side_true]"
      "[ride_side_false]"
   )
}
{if [force_autogen]
   {foreach_int $i kNote_C0 kNote_E2
      {$this remove_notes $i}
   }
   {foreach $text $conflicting_text_events
      {$this remove_text $text}
   }
}
{set $should_autogen 1}
{unless [force_autogen]
   {$this foreach_midievent kNote_C0
      kNote_E2
      $pitch
      $tick
      $state
      {set $should_autogen 0}
   }
   {if $should_autogen
      {$this foreach_textevent $text
         $tick
         {if {find_elem $conflicting_text_events $text}
            {set $should_autogen 0}
         }
      }
   }
}
{if $should_autogen
   {print "MIDI Compiler: Autogenerating PART DRUMS animations...\n"}
   {do
      ($last_tick -1)
      {$this foreach_midievent kNote_C6
         kNote_E7
         $pitch
         $tick
         $state
         {if {&& {!= $hits 0} {> $tick $last_tick}}
            {add_drum_pad_notes $last_tick}
            {set $hits 0}
            {set $kick FALSE}
         }
         {if_else $state
            {switch $pitch
               (kNote_C6
                  {set $kick TRUE}
                  {set $last_tick $tick}
               )
               (kNote_Cs6
                  {'|=' $hits kPad1}
                  {set $last_tick $tick}
               )
               (kNote_D6
                  {'|=' $hits kPad2}
                  {set $last_tick $tick}
               )
               (kNote_Ds6
                  {'|=' $hits kPad3}
                  {set $last_tick $tick}
               )
               (kNote_E6
                  {'|=' $hits kPad4}
                  {set $last_tick $tick}
               )
               (kNote_D7 {'|=' $modifiers kPad2})
               (kNote_Ds7 {'|=' $modifiers kPad3})
               (kNote_E7 {'|=' $modifiers kPad4})
            }
            {switch $pitch
               (kNote_D7 {&= $modifiers {'~' kPad2}})
               (kNote_Ds7 {&= $modifiers {'~' kPad3}})
               (kNote_E7 {&= $modifiers {'~' kPad4}})
            }
         }
      }
      {if {> $last_tick -1}
         {if {< {'+' $last_tick 120} $end}
            {if_else {>= {'+' $last_tick 120} $music_end}
               {$this add_midi_text "[idle_realtime]" {'+' $last_tick 120}}
               {do
                  {$this add_midi_text "[idle]" {'+' $last_tick 120}}
                  {$this add_midi_text "[idle_realtime]" $music_end}
               }
            }
         }
      }
   }
}
{set [working_track] "PART VOCALS"}
{set $conflicting_text_events
   (
      "[play]"
      "[idle]"
      "[idle_realtime]"
      "[idle_intense]"
      "[mellow]"
      "[intense]"
      "[tambourine_start]"
      "[tambourine_end]"
      "[clap_start]"
      "[clap_end]"
      "[cowbell_start]"
      "[cowbell_end]"
   )
}
{if [force_autogen]
   {foreach $text $conflicting_text_events
      {$this remove_text $text}
   }
}
{set $should_autogen 1}
{unless [force_autogen]
   {$this foreach_textevent $text
      $tick
      {if {find_elem $conflicting_text_events $text}
         {set $should_autogen 0}
      }
   }
}
{if $should_autogen
   {print "MIDI Compiler: Autogenerating PART VOCALS animations...\n"}
   {set $vocal_percussion_type {$this vocal_percussion_type}}
   {if {== $vocal_percussion_type "handclap"}
      {set $vocal_percussion_type "clap"}
   }
   {do
      ($last_tick -1)
      ($last_off -1)
      ($in_tambourine FALSE)
      {$this foreach_midievent kNote_C1
         kNote_Cs6
         $pitch
         $tick
         $state
         {if_else {'||' {== $pitch kNote_C6} {== $pitch kNote_Cs6}}
            {if {! $in_tambourine}
               {$this add_midi_text
                  {sprintf "[%s_start]" $vocal_percussion_type}
                  {- $tick 120}
               }
               {set $in_tambourine TRUE}
            }
            {if $in_tambourine
               {$this add_midi_text
                  {sprintf "[%s_end]" $vocal_percussion_type}
                  {'+' $last_off 120}
               }
               {set $in_tambourine FALSE}
            }
         }
         {if_else $state
            {if {'||' {< $last_off 0} {> {- $tick $last_off} 2880}}
               {if_else {>= $last_off 0}
                  {$this add_midi_text "[idle]" {'+' $last_off 120}}
                  {if {> {- $tick 120} $music_start}
                     {$this add_midi_text "[idle]" $music_start}
                  }
               }
               {$this add_midi_text "[play]" {- $tick 120}}
            }
            {set $last_off $tick}
         }
      }
      {if {> $last_off -1}
         {if {< {'+' $last_off 120} $end}
            {if_else {>= {'+' $last_off 120} $music_end}
               {$this add_midi_text "[idle_realtime]" {'+' $last_off 120}}
               {do
                  {$this add_midi_text "[idle]" {'+' $last_off 120}}
                  {$this add_midi_text "[idle_realtime]" $music_end}
               }
            }
         }
      }
   }
}
{set $conflicting_text_events
   (
      "[play]"
      "[idle]"
      "[idle_realtime]"
      "[idle_intense]"
      "[mellow]"
      "[intense]"
      "[play_solo]"
   )
}
{do
   ($track_names ("PART GUITAR" "PART BASS"))
   {foreach $track_name $track_names
      {set [working_track] $track_name}
      {if [force_autogen]
         {foreach $text $conflicting_text_events
            {$this remove_text $text}
         }
      }
      {set $should_autogen 1}
      {unless [force_autogen]
         {$this foreach_textevent $text
            $tick
            {if {find_elem $conflicting_text_events $text}
               {set $should_autogen 0}
            }
         }
      }
      {if $should_autogen
         {print "MIDI Compiler: Autogenerating " $track_name " animations...\n"}
         {set $last_off -1}
         {set $last_on -1}
         {$this foreach_midievent kNote_C6
            kNote_G6
            $pitch
            $tick
            $state
            {if_else {&& {>= $pitch kNote_C6} {<= $pitch kNote_E6}}
               {if_else $state
                  {if
                     {&&
                        {! {== $last_on $tick}}
                        {'||' {< $last_off 0} {> {- $tick $last_off} 2880}}
                     }
                     {if_else {>= $last_off 0}
                        {$this add_midi_text "[idle]" {'+' $last_off 120}}
                        {if {> {- $tick 120} $music_start}
                           {$this add_midi_text "[idle]" $music_start}
                        }
                     }
                     {$this add_midi_text "[play]" {- $tick 120}}
                     {set $last_on $tick}
                  }
                  {set $last_off $tick}
               }
               {if {== $pitch kNote_G6}
                  {if_else $state
                     {$this add_midi_text "[play_solo]" $tick}
                     {$this add_midi_text "[play]" $tick}
                  }
               }
            }
         }
         {if {> $last_off -1}
            {if {< {'+' $last_off 120} $end}
               {if_else {>= {'+' $last_off 120} $music_end}
                  {$this add_midi_text "[idle_realtime]" {'+' $last_off 120}}
                  {do
                     {$this add_midi_text "[idle]" {'+' $last_off 120}}
                     {$this add_midi_text "[idle_realtime]" $music_end}
                  }
               }
            }
         }
      }
   }
}
{if {> $end 0}
   {set [working_track] "VENUE"}
   {do
      ($count 0)
      ($tick 0)
      {set $should_autogen 1}
      {if [force_autogen]
         {foreach_int $i kNote_C3 kNote_D4
            {$this remove_notes $i}
         }
         {$this remove_text "[do_directed_cut " FALSE}
         {$this remove_text "[do_optional_cut " FALSE}
      }
      {unless [force_autogen]
         {$this foreach_midievent kNote_C3
            kNote_Cs4
            $pitch
            $tick
            $state
            {set $should_autogen 0}
         }
         {if $should_autogen
            {$this foreach_textevent $text
               $tick
               {if
                  {'||'
                     {has_substr $text "[do_directed_cut "}
                     {has_substr $text "[do_optional_cut "}
                  }
                  {set $should_autogen 0}
               }
            }
         }
      }
      {if $should_autogen
         {print "MIDI Compiler: Autogenerating camera changes...\n"}
         {$this add_venue_midi_note kNote_Cs3 0 1920}
         {$this add_venue_midi_note kNote_D3 0 1920}
         {$this add_venue_midi_note kNote_Ds3 0 1920}
         {$this add_venue_midi_note kNote_E3 0 1920}
         {$this add_venue_midi_note kNote_B3 0 1920}
         {set $track_names
            ("PART BASS" "PART DRUMS" "PART GUITAR" "PART VOCALS")
         }
         {set $focus_notes
            (kNote_Cs3 kNote_D3 kNote_Ds3 kNote_E3)
         }
         {foreach_int $i 0 {size $track_names}
            {set $track_name {elem $track_names $i}}
            {set $focus_note {elem $focus_notes $i}}
            {set [working_track] $track_name}
            {$this foreach_midievent kNote_G6
               kNote_G6
               $pitch
               $tick
               $state
               {if_else $state
                  {set $on_tick $tick}
                  {$this add_venue_midi_note $focus_note $on_tick {- $tick $on_tick}}
               }
            }
            {$this foreach_textevent $text
               $tick
               {if
                  {find_elem
                     (
                        "[play]"
                        "[intense]"
                        "[mellow]"
                        "[play_solo]"
                        "[tambourine_start]"
                        "[cowbell_start]"
                        "[clap_start]"
                     )
                     $text
                  }
                  {$this add_venue_midi_note $focus_note $tick 3840}
                  {$this add_venue_midi_note kNote_C4 $tick 1920}
                  {$this add_venue_midi_note kNote_C3 $tick 480}
               }
               {if {find_elem ("[idle]" "[idle_intense]" "[idle_realtime]") $text}
                  {$this add_venue_midi_note $focus_note {- $tick 3840} 3840}
                  {$this add_venue_midi_note kNote_C4 {- $tick 1920} 1920}
               }
               {if {find_elem ("[tambourine_end]" "[cowbell_end]" "[clap_end]") $text}
                  {$this add_venue_midi_note $focus_note {- $tick 3840} 3840}
                  {$this add_venue_midi_note kNote_C4 {- $tick 1920} 1920}
                  {$this add_venue_midi_note kNote_C3 $tick 480}
               }
            }
         }
         {set $tick 0}
         {while {< $tick $end}
            {$this add_venue_midi_note kNote_C3 $tick 480}
            {do
               ($val {random_int 0 719})
               ($i 0)
               ($arr (0 25 105 55 213 59 58 42 163))
               {while {>= $val {elem $arr $i}}
                  {-= $val {elem $arr $i}}
                  {'++' $i}
               }
               {'+=' $tick {'*' 480 $i}}
            }
         }
      }
   }
}
{set $autogen_lighting_types
   (
      ("" TRUE)
      ("dischord" TRUE)
      ("harmony" FALSE)
      ("manual_cool" TRUE)
      ("manual_warm" TRUE)
      ("searchlights" FALSE)
      ("silhouettes_spot" FALSE)
      ("sweep" FALSE)
      ("loop_cool" FALSE)
      ("loop_warm" FALSE)
   )
}
{do
   ($count 0)
   ($tick 0)
   {set [working_track] "VENUE"}
   {set $should_autogen 1}
   {if [force_autogen]
      {$this remove_text "[lighting (" FALSE}
      {$this remove_text "[verse]"}
      {$this remove_text "[chorus]"}
      {foreach_int $i kNote_Cs1 kNote_F1
         {$this remove_notes $i}
      }
      {foreach_int $i kNote_C2 kNote_Ds2
         {$this remove_notes $i}
      }
   }
   {unless [force_autogen]
      {unless $count
         {$this foreach_textevent $text
            $tick
            {if {has_substr $text "[lighting ("}
               {'++' $count}
            }
            {if {'||' {== $text "[verse]"} {== $text "[chorus]"}}
               {'++' $count}
            }
         }
      }
      {unless $count
         {$this foreach_midievent kNote_Cs1
            kNote_E1
            $pitch
            $tick
            $state
            {'++' $count}
         }
      }
      {unless $count
         {$this foreach_midievent kNote_C2
            kNote_D2
            $pitch
            $tick
            $state
            {'++' $count}
         }
      }
      {set $should_autogen {== $count 0}}
   }
}
{if $should_autogen
   {print "MIDI Compiler: Autogenerating lighting changes...\n"}
   {if {&& {< $music_start $music_end} {> $music_end 0}}
      {do
         ($tick 0)
         ($found_first_downbeat FALSE)
         ($lighting_name "N/A")
         ($last_used_lighting_name $lighting_name)
         ($required_change_measures {array 0})
         {$this foreach_timesignature $numer
            $denom
            $tick
            {set $change_measure {$this closest_measure $tick}}
            {unless
               {'||'
                  {== $change_measure 0}
                  {find_elem $required_change_measures $change_measure}
               }
               {push_back $required_change_measures $change_measure}
            }
         }
         {set $change_measure {$this closest_measure $music_start}}
         {unless
            {'||'
               {== $change_measure 0}
               {find_elem $required_change_measures $change_measure}
            }
            {push_back $required_change_measures $change_measure}
         }
         {set [working_track] "PART DRUMS"}
         {$this foreach_midievent kNote_E8
            kNote_E8
            $pitch
            $tick
            $state
            {set $change_measure {$this closest_measure $tick}}
            {unless
               {'||'
                  $state
                  {== $change_measure 0}
                  {find_elem $required_change_measures $change_measure}
                  {&& {!= $coda -1} {> $tick $coda}}
               }
               {push_back $required_change_measures $change_measure}
            }
         }
         {if_else {!= $coda -1}
            {set $final_change_tick $coda}
            {set $final_change_tick $music_end}
         }
         {set $change_measure {$this closest_measure $final_change_tick}}
         {unless
            {'||'
               {== $change_measure 0}
               {find_elem $required_change_measures $change_measure}
            }
            {push_back $required_change_measures $change_measure}
         }
         {sort $required_change_measures}
         {set $change_index 0}
         {while {< $change_index {- {size $required_change_measures} 1}}
            {set $current_change {elem $required_change_measures $change_index}}
            {set $next_change {elem $required_change_measures {'+' $change_index 1}}}
            {set $difference {- $next_change $current_change}}
            {if {'||' {> $difference 4} {&& {> $difference 1} {== {random_int 0 3} 0}}}
               {insert_elem
                  $required_change_measures
                  {'+' $change_index 1}
                  {int
                     {'+' $current_change {/ $difference 2} 0.5}
                  }
               }
            }
            {'++' $change_index}
         }
         {set [working_track] "VENUE"}
         {$this add_midi_text "[verse]" 0}
         {set $added_verse_last TRUE}
         {$this add_midi_text "[lighting ()]" 0}
         {if {!= $coda -1}
            {$this add_midi_text "[lighting (bre)]" $coda}
         }
         {$this add_midi_text
            {sprintf
               "[lighting (%s)]"
               {random_elem ("blackout_slow" "silhouettes" "flare_slow")}
            }
            {int {'+' $music_end {/ {- $end $music_end} 2}}}
         }
         {foreach_int $i 0 {- {size $required_change_measures} 1}
            {set $tick {$this measure_to_tick {elem $required_change_measures $i}}}
            {set $lighting_end_tick
               {$this measure_to_tick {elem $required_change_measures {'+' $i 1}}}
            }
            {while {== $lighting_name $last_used_lighting_name}
               {set $lighting_type {random_elem $autogen_lighting_types}}
               {set $lighting_name {elem $lighting_type 0}}
               {set $lighting_uses_keyframes {elem $lighting_type 1}}
            }
            {set $last_used_lighting_name $lighting_name}
            {if {== {random_int 0 6} 0}
               {if_else $added_verse_last
                  {$this add_midi_text "[chorus]" $tick}
                  {$this add_midi_text "[verse]" $tick}
               }
               {set $added_verse_last {! $added_verse_last}}
            }
            {$this add_midi_text {sprintf "[lighting (%s)]" $lighting_name} $tick}
            {if $lighting_uses_keyframes
               {set $keyframe_rate {random_elem (1 2)}}
               {while {< $tick $lighting_end_tick}
                  {$this add_midi_note kNote_C2 $tick}
                  {'+=' $tick {'*' $keyframe_rate 480}}
               }
            }
         }
      }
   }
   {do
      ($part_spotlight_info
         (
            ("PART DRUMS" kNote_D1)
            ("PART GUITAR" kNote_Ds1)
         )
      )
      ($spotlight_midievents {array 0})
      {foreach $info $part_spotlight_info
         {do
            ($pitch 0)
            ($tick 0)
            ($state 0)
            ($on_tick -1)
            {set [working_track] {elem $info 0}}
            {$this foreach_midievent kNote_G6
               kNote_G6
               $pitch
               $tick
               $state
               {if_else $state
                  {set $on_tick $tick}
                  {if {!= $on_tick -1}
                     {do
                        ($midievent {array 0})
                        {push_back $midievent {elem $info 1}}
                        {push_back $midievent $on_tick}
                        {push_back $midievent {- $tick $on_tick}}
                        {push_back $spotlight_midievents $midievent}
                        {set $on_tick -1}
                     }
                  }
               }
            }
         }
      }
      {set [working_track] "VENUE"}
      {foreach $midievent $spotlight_midievents
         {$this add_midi_note
            {elem $midievent 0}
            {elem $midievent 1}
            {elem $midievent 2}
         }
      }
   }
}
{set [working_track] "EVENTS"}
{if {> $end 0}
   {foreach_int $i kNote_C0 kNote_Ds0
      {$this remove_notes $i}
   }
   {do
      ($tick 0)
      {while {< $tick $end}
         {$this add_midi_note kNote_D0 $tick}
         {'+=' $tick 480}
      }
   }
}
{$this remove_text "[section " FALSE}
{if {> $end 0}
   {do
      ($song_length {$this tick_to_time $end})
      ($section_type 10)
      ($num_sections 0)
      ($current_section 0)
      ($measures_per_section 0)
      ($create_sections TRUE)
      ($num_measures {$this closest_measure $end})
      {if {<= $song_length 150000}
         {set $section_type 20}
      }
      {if {> $song_length 300000}
         {set $section_type 5}
      }
      {set $num_sections {int {/ 100 $section_type}}}
      {set $measures_per_section {/ $num_measures $num_sections}}
      {while {&& $create_sections {< $measures_per_section 1.0}}
         {if_else {== $num_sections 5}
            {set $create_sections FALSE}
            {do
               {set $section_type {'*' $section_type 2}}
               {set $num_sections {int {/ 100 $section_type}}}
               {set $measures_per_section {/ $num_measures $num_sections}}
            }
         }
      }
      {if $create_sections
         {foreach_int $section_index 0 $num_sections
            {$this add_midi_text
               {sprintf
                  "[section ugc_section_%d_%d]"
                  $section_type
                  {'*' $section_index $section_type}
               }
               {$this measure_to_tick {int {'*' $measures_per_section $section_index}}}
            }
         }
      }
   }
}