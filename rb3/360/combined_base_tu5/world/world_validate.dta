#define WORLD_OBJECT_VALIDATE
((custom_start_trigger '')
   (start_test_preset
      ($pst)
      {if
         $pst
         {if
            {exists test_light_preset_anim}
            {delete test_light_preset_anim}}
         {$pst
            animate
            (name test_light_preset_anim)
            (loop
               0
               {$pst end_frame})}
         {if
            {exists test_light_preset_task}
            {delete test_light_preset_task}}
         {if
            {$pst get manual}
            {$pst reset_events}
            {$pst first}
            {thread_task
               kTaskBeats
               (preserve $pst)
               (name test_light_preset_task)
               (script
                  {$pst next}
                  {$task sleep 4}
                  {$task loop})}}})
   (stop_test_preset
      {if
         {exists test_light_preset_anim}
         {delete test_light_preset_anim}}
      {if
         {exists test_light_preset_task}
         {delete test_light_preset_task}})
   (test_preset_blending
      ($pst1 $pst2 $time)
      {if_else
         {&& $pst1 $pst2}
         {$this force_two_presets $pst1 $pst2 $time}
         {notify
            "Both test presets must be entered before testing animation."}})
   (find_preset_type
      ($type $excite $adjective)
      {set $found FALSE}
      {$this
         iterate
         LightPreset
         $preset
         {if
            {==
               {$preset get category}
               $type}
            {if_else
               {!= $adjective ''}
               {foreach
                  $adj
                  {$preset get_array adjectives}
                  {if
                     {== $adj $adjective}
                     {set $found TRUE}}}
               {set $found TRUE}}}}
      $found)
   (translate_excite
      ($excite)
      {switch
         $excite
         (0
            "kExcitementBoot")
         (1
            "kExcitementBad")
         (2
            "kExcitementOkay")
         (3
            "kExcitementGreat")
         (4
            "kExcitementPeak")})
   (check_has_any_presets
      ($min_excite $max_excite $categories $adjective)
      {foreach_int
         $excitement
         $min_excite
         $max_excite
         {do
            ($found FALSE)
            {foreach
               $type
               $categories
               {if
                  {$this find_preset_type $type $excitement $adjective}
                  {set $found TRUE}}}
            {if
               {!= $found TRUE}
               {if_else
                  {== $adjective ''}
                  {notify
                     $path
                     " has no LightPreset for excitement level "
                     {$this translate_excite $excitement}
                     " from these categories: "
                     $categories}
                  {notify
                     $path
                     " has no LightPreset for adjective "
                     $adjective
                     ", excitement level "
                     {$this translate_excite $excitement}
                     " from these categories: "
                     $categories}}}}})
   (validate_cameras
      {set $cameras.validating TRUE}
      {$this
         iterate_self
         BandCamShot
         $shot
         {if
            {==
               {$shot get category}
               TEST_CAM}
            {notify
               {path_name $shot}
               " is category TEST_CAM, please delete or make into a real camera."}}
         {do
            ($next_shots
               {$shot list_all_next_shots})
            {foreach_int
               $i
               0
               {size $next_shots}
               {do
                  ($next
                     {elem $next_shots $i})
                  {if
                     {!
                        {has_substr
                           {$next get category}
                           NEXT_SHOT}}
                     {notify
                        {path_name $next}
                        " is a next shot of "
                        $shot
                        " and needs to be category NEXT_SHOT or WIN_FINALE_NEXT_SHOT"}}}}}
         {with
            $shot
            {if
               {find_elem
                  (DIRECTED_CAM_CATS)
                  [category]}
               {if
                  {==
                     [rate]
                     k30_fps}
                  {do
                     ($zt
                        [zero_time])
                     ($mt
                        [min_time])
                     ($dur
                        {-
                           [total_duration]
                           $zt})
                     ($arr
                        {find_exists
                           {$shot dircut_limits}
                           [category]})
                     {if_else
                        {== $arr kDataUnhandled}
                        {notify
                           "could not find shot category "
                           [category]
                           " in dircut_limits.dta, must add"}
                        {do
                           ($zt_max
                              {elem $arr 1})
                           ($mt_max
                              {elem $arr 2})
                           ($dur_min
                              {elem $arr 3})
                           ($dur_max
                              {elem $arr 4})
                           {if
                              {> $zt $zt_max}
                              {notify
                                 {path_name $this}
                                 " has zero_time "
                                 $zt
                                 " > category limit of "
                                 $zt_max}}
                           {if
                              {> $mt $mt_max}
                              {notify
                                 {path_name $this}
                                 " has min_time "
                                 $zt
                                 " > category limit of "
                                 $mit_max}}
                           {if
                              {< $dur $dur_min}
                              {notify
                                 {path_name $this}
                                 " has total_duration - zero_time "
                                 $dur
                                 " < category limit of "
                                 $dur_min}}
                           {if
                              {> $dur $dur_max}
                              {notify
                                 {path_name $this}
                                 " has total_duration - zero_time "
                                 $dur
                                 " > category limit of "
                                 $dur_max}}}}}}}}
         {do
            ($cat
               {$shot get category})
            {if
               {find_elem
                  (DIRECTED_CAM_CATS INTRO_VENUE LOSE WIN OUTRO_MULTI)
                  $cat}
               {if
                  {!=
                     {$shot get rate}
                     k30_fps}
                  {notify
                     {path_name $shot}
                     " category "
                     $cat
                     " must have units of seconds"}}}}
         {$bandwardrobe check_camera_genre_flags $shot}}
      {do
         ($err
            {sprint
               {path_name $this}
               " no BandCamShot:"})
         ($camera.cats
            {array
               (VENUE_CAM_CATS COOP_CAM_CATS DIRECTED_CAM_CATS)})
         {foreach
            $cat
            {cond
               ({has_any_substr
                     {path_name $this}
                     ("arena_"
                        "big_club_"
                        "festival_")}
                  (WIN_FINALE WIN_PRE_FINALE))
               {eval
                  ()}}
            {push_back $camera.cats $cat}}
         {$this check_categories $err}}
      {set $cameras.validating FALSE})
   (check_categories
      ($err)
      {do
         ($err2
            "")
         ($found FALSE)
         {foreach
            $check.cat
            $camera.cats
            {if_else
               {$this
                  check_facings
                  {sprint
                     $err
                     " "
                     $check.cat}}
               {set $found TRUE}
               {strcat
                  $err2
                  {if_else
                     $err2
                     {sprint
                        " + "
                        $check.cat}
                     $check.cat}}}}
         {if
            {&& $err2 $found}
            {notify
               $err
               " "
               $err2}}
         $found})
   (check_facings
      ($err)
      {do
         ($err2
            "")
         ($found FALSE)
         {foreach
            $check.facing
            {if_else
               {&&
                  {has_substr
                     $check.cat
                     "coop_"}
                  {!
                     {has_substr
                        $check.cat
                        "_behind"}}}
               ("kBCSBFacingLeft"
                  "kBCSBFacingRight")
               ("kBCSBAllFacing")}
            {if_else
               {$this
                  check_configs
                  {sprint
                     $err
                     " "
                     $check.facing}}
               {set $found TRUE}
               {strcat
                  $err2
                  {if_else
                     $err2
                     {sprint
                        " | "
                        $check.facing}
                     $check.facing}}}}
         {if
            {&& $err2 $found}
            {notify
               $err
               " "
               $err2}}
         $found})
   (check_configs
      ($err)
      {do
         ($err2
            "")
         ($found FALSE)
         {foreach
            $check.config
            ("kBCSBCoopBG"
               "kBCSBCoopBK"
               "kBCSBCoopGK")
            {if
               {==
                  kDataUnhandled
                  {switch
                     $check.config
                     ("kBCSBCoopBG"
                        {if_else
                           {find_elem
                              (WIN_KEYBOARD)
                              $check.cat}
                           TRUE
                           {find_exists
                              (COOP_BG_REMAP)
                              $check.cat}})
                     ("kBCSBCoopBK"
                        {if_else
                           {find_elem
                              (WIN_GUITAR)
                              $check.cat}
                           TRUE
                           {find_exists
                              (COOP_BK_REMAP)
                              $check.cat}})
                     ("kBCSBCoopGK"
                        {if_else
                           {find_elem
                              (WIN_BASS)
                              $check.cat}
                           TRUE
                           {find_exists
                              (COOP_GK_REMAP)
                              $check.cat}})
                     kDataUnhandled}}
               {if_else
                  {$this
                     check_valid
                     {sprint
                        $err
                        " "
                        $check.config}}
                  {set $found TRUE}
                  {strcat
                     $err2
                     {if_else
                        $err2
                        {sprint
                           " | "
                           $check.config}
                        $check.config}}}}}
         {if
            {&& $err2 $found}
            {notify
               $err
               " "
               $err2}}
         $found})
   (check_valid
      ($err)
      {if_else
         {has_substr
            $check.cat
            "directed"}
         {do
            ($err2
               "")
            ($found FALSE)
            {foreach
               $check.valid
               ("kValidMaleRocker"
                  "kValidMaleDramatic"
                  "kValidMaleBanger"
                  "kValidMaleSpazz"
                  "kValidFemaleRocker"
                  "kValidFemaleDramatic"
                  "kValidFemaleBanger"
                  "kValidFemaleSpazz")
               {if_else
                  {$this
                     check_platforms
                     {sprint
                        $err
                        " "
                        $check.valid}}
                  {set $found TRUE}
                  {strcat
                     $err2
                     {if_else
                        $err2
                        {sprint
                           " | "
                           $check.valid}
                        $check.valid}}}}
            {if
               {&& $err2 $found}
               {notify
                  $err
                  " "
                  $err2}}
            $found}
         {do
            {set
               $check.valid
               "kPlatformNone"}
            {$this check_platforms $err}}})
   (check_platforms
      ($err)
      {do
         ($err2
            "")
         ($found FALSE)
         {foreach
            $check.platform_name
            ("kPlatformXbox"
               "kPlatformPS3")
            {if_else
               {$this
                  check_camera
                  {sprint
                     $err
                     " "
                     $check.platform_name}}
               {set $found TRUE}
               {strcat
                  $err2
                  {if_else
                     $err2
                     {sprint
                        " | "
                        $check.platform_name}
                     $check.platform_name}}}}
         {if
            {&& $err2 $found}
            {notify
               $err
               " "
               $err2}}
         $found})
   (check_camera
      ($err)
      {do
         ($match
            {array
               ((flags_any
                     {macro_elem $check.facing})
                  (flags_any
                     {macro_elem $check.config})
                  (flags_exact
                     {macro_elem $check.valid}
                     {macro_elem $check.valid})
                  (platform_only
                     {if_else
                        {==
                           $check.platform_name
                           "kPlatformXbox"}
                        (kPlatformXbox kPlatformNone)
                        (kPlatformPS3 kPlatformNone)}))})
         {if
            {has_substr
               $check.cat
               "coop_"}
            {push_back
               $match
               (min_time 0)}
            {push_back
               $match
               (max_time 0)}}
         {do
            ($cam
               {$this find_shot $check.cat $match})
            $cam}}))