#define CHEAT_DISPLAY_S
(5)
{new
   Object
   cheat_display
   (prio 0)
   (show_prio
      ($msg $prio)
      {if_else
         {&&
            {<
               $prio
               [prio]}
            {rnd overlay_showing cheats}}
         {print
            $msg
            "\n"}
         {if_else
            $cheat.no_cheat_display
            {print
               $msg
               "\n"}
            {do
               {set
                  [prio]
                  $prio}
               {rnd show_overlay cheats TRUE CHEAT_DISPLAY_S}
               {rnd
                  reflect
                  cheats
                  {print
                     $msg
                     "\n"}}}}})
   (show
      ($msg)
      {$this show_prio $msg 10000})
   (show_bool
      ($label $val)
      {$this
         show
         {sprint
            $label
            ": "
            {if_else
               $val
               "ON"
               "OFF"}}})}
#define CHAR_OBJECTS
({find_obj
      {$bandwardrobe get_character 0}
      main.drv}
   {do
      ($char
         {$bandwardrobe get_character 0})
      ($inst
         {$char get instrument_type})
      {switch
         $inst
         ((guitar bass)
            {find_obj $char fret.dmidi})
         ((drum keyboard)
            {find_obj $char left_hand.dmidi})
         (mic
            "")}}
   {do
      ($char
         {$bandwardrobe get_character 0})
      ($inst
         {$char get instrument_type})
      {switch
         $inst
         ((guitar bass)
            {find_obj $char strum.dmidi})
         ((drum keyboard)
            {find_obj $char right_hand.dmidi})
         (mic
            "")}}
   {find_obj
      {$bandwardrobe get_character 1}
      main.drv}
   {do
      ($char
         {$bandwardrobe get_character 1})
      ($inst
         {$char get instrument_type})
      {switch
         $inst
         ((guitar bass)
            {find_obj $char fret.dmidi})
         ((drum keyboard)
            {find_obj $char left_hand.dmidi})
         (mic
            "")}}
   {do
      ($char
         {$bandwardrobe get_character 1})
      ($inst
         {$char get instrument_type})
      {switch
         $inst
         ((guitar bass)
            {find_obj $char strum.dmidi})
         ((drum keyboard)
            {find_obj $char right_hand.dmidi})
         (mic
            "")}}
   {find_obj
      {$bandwardrobe get_character 2}
      main.drv}
   {do
      ($char
         {$bandwardrobe get_character 2})
      ($inst
         {$char get instrument_type})
      {switch
         $inst
         ((guitar bass)
            {find_obj $char fret.dmidi})
         ((drum keyboard)
            {find_obj $char left_hand.dmidi})
         (mic
            "")}}
   {do
      ($char
         {$bandwardrobe get_character 2})
      ($inst
         {$char get instrument_type})
      {switch
         $inst
         ((guitar bass)
            {find_obj $char strum.dmidi})
         ((drum keyboard)
            {find_obj $char right_hand.dmidi})
         (mic
            "")}}
   {find_obj
      {$bandwardrobe get_character 3}
      main.drv}
   {do
      ($char
         {$bandwardrobe get_character 3})
      ($inst
         {$char get instrument_type})
      {switch
         $inst
         ((guitar bass)
            {find_obj $char fret.dmidi})
         ((drum keyboard)
            {find_obj $char left_hand.dmidi})
         (mic
            "")}}
   {do
      ($char
         {$bandwardrobe get_character 3})
      ($inst
         {$char get instrument_type})
      {switch
         $inst
         ((guitar bass)
            {find_obj $char strum.dmidi})
         ((drum keyboard)
            {find_obj $char right_hand.dmidi})
         (mic
            "")}})
{func
   next_character_driver
   {if
      $bandwardrobe
      {do
         ($index -1)
         {foreach
            $obj
            (CHAR_OBJECTS)
            {if
               {==
                  $char_debug_driver
                  {'++' $index}}
               {if_else
                  $obj
                  {char_debug $obj}
                  {'++' $char_debug_driver}}}}
         {'++' $char_debug_driver}
         {if
            {==
               $char_debug_driver
               {'++' $index}}
            {char_debug}
            {set $char_debug_driver 0}}}}}
{func
   cheat_toggle_playtest
   {if
      {meta is_up}
      {cheat_display
         show_bool
         "Toggle Playtest Flag"
         {toggle_playtest_flag}}}}
{func
   b_cheat
   {if
      {meta is_up}
      {cheat_display
         show_bool
         "Toggle Launched Goal Msgs Only"
         {toggle_launched_goal_msgs_only}}}}
{func
   A_cheat
   {if_else
      {meta is_up}
      {do
         {cheat_display
            show_bool
            "Unlock All"
            {toggle_unlock_all}}
         {update_tour_display}}
      {toggle_crowd_audio}}}
{func
   toggle_crowd_audio
   {if
      $world
      {$world
         iterate
         CrowdAudio
         $ca
         {do
            ($new
               {!
                  {$ca get enabled}})
            {$ca set enabled $new}
            {cheat_display
               show_bool
               "CrowdAudio"
               $new}}}}}
{func
   cycle_free_camera
   {do
      ($world $world.last_entered)
      {if
         $world
         {unless
            {$world has_free_cam}
            {set $free_cam.state 0}}
         {if_else
            {< $free_cam.state 14}
            {do
               ($free
                  {$world get_free_cam $cheat_pad})
               {switch
                  $free_cam.state
                  (0
                     {$free set_frozen FALSE}
                     {$free
                        set_parent
                        {object
                           ""}}
                     {cheat_display
                        show
                        "Free camera: world"})
                  (1
                     {$free set_frozen TRUE}
                     {$free
                        set_parent
                        {object
                           ""}}
                     {cheat_display
                        show
                        "Free camera: frozen"})
                  {$free set_frozen FALSE}
                  {do
                     ($name
                        {switch
                           $free_cam.state
                           ((2 3 4)
                              player0)
                           ((5 6 7)
                              player1)
                           ((8 9 10)
                              player2)
                           ((11 12 13)
                              player3)})
                     {$free
                        set_parent
                        {find_obj
                           {$bandwardrobe chars_dir}
                           $name
                           {switch
                              $free_cam.state
                              ((4 7 10)
                                 bone_guitar.mesh)
                              (13 bone_L-hand.mesh)
                              bone_head.mesh}}}
                     {if_else
                        {find_elem
                           (3 4 6 7 9 10 12 13)
                           $free_cam.state}
                        {$free set_parent_dof 1 1 1}
                        {$free set_parent_dof 0 0 1}}
                     {switch
                        $free_cam.state
                        ((4 7)
                           {$free set_pos 80 0 10}
                           {$free set_rot 0 -90 90})
                        (10
                           {$free set_pos 80 0 10}
                           {$free set_rot 0 90 90})
                        {$free set_pos 0 60 0}
                        {$free set_rot 0 -90 180}}
                     {cheat_display
                        show
                        {sprint
                           "Free camera: "
                           $name
                           {switch
                              $free_cam.state
                              ((3 6 9 12)
                                 " pinned")
                              ((4 7 10 13)
                                 " hand")
                              " floating"}}}}}
               {'++' $free_cam.state}}
            {do
               {$world delete_free_cam}
               {cheat_display
                  show
                  "Free camera: off"}}}}}}
{func
   audition_cycle_free_camera
   {do
      ($world $world.last_entered)
      ($changed_cam FALSE)
      {if
         $world
         {unless
            {$world has_free_cam}
            {set $free_cam.state 0}}
         {while
            {&&
               {< $free_cam.state 8}
               {! $changed_cam}}
            {do
               ($free
                  {$world get_free_cam $cheat_pad})
               ($name
                  {switch
                     $free_cam.state
                     ((0 1)
                        player0)
                     ((2 3)
                        player1)
                     ((4 5)
                        player2)
                     ((6 7)
                        player3)})
               ($player_number
                  {switch
                     $free_cam.state
                     ((0 1)
                        0)
                     ((2 3)
                        1)
                     ((4 5)
                        1)
                     ((6 7)
                        3)})
               ($inst
                  {{$bandwardrobe get_character $player_number}
                     get
                     instrument_type})
               {$free set_frozen TRUE}
               {$free enable_depth_of_field FALSE}
               {switch
                  $free_cam.state
                  ((0 2 4 6)
                     {$free
                        set_parent
                        {find_obj
                           {$bandwardrobe chars_dir}
                           $name
                           bone_head.mesh}}
                     {$free set_pos 2.5 25 0}
                     {$free set_rot 0 -90 180}
                     {set $changed_cam TRUE})
                  ((1 3 5 7)
                     {if
                        {'||'
                           {== $inst guitar}
                           {== $inst bass}}
                        {$free
                           set_parent
                           {find_obj
                              {$bandwardrobe chars_dir}
                              $name
                              bone_guitar.mesh}}
                        {$free set_pos 65 0 15}
                        {$free set_rot 0 -90 90}
                        {set $changed_cam TRUE}})}
               {'++' $free_cam.state}}}
         {if
            {&&
               {== $free_cam.state 8}
               {! $changed_cam}}
            {$world delete_free_cam}}}}}
{func
   toggle_crowd_meter
   {if
      {exists beatmatch}
      {do
         ($new
            {!
               {{beatmatch active_player 0}
                  crowd_rating_active}})
         {band_0 set_crowd_meter_active $new}
         {cheat_display
            show_bool
            "Crowd meter"
            $new}}}}
{func
   start_shuttle
   {if
      {exists beatmatch}
      {if_else
         {rnd overlay_showing time}
         {set $cheat.show_time FALSE}
         {do
            {rnd show_overlay time TRUE}
            {set $cheat.show_time TRUE}}}
      {beatmatch set_paused TRUE}
      {{beatmatch active_player 0}
         set_crowd_rating_active
         FALSE}
      {beatmatch set_shuttle TRUE $cheat_pad}}}
{func
   stop_shuttle
   {beatmatch set_shuttle FALSE}
   {beatmatch set_paused FALSE}
   {if
      $cheat.show_time
      {rnd show_overlay time FALSE}}}
{func
   toggle_shuttle
   {if_else
      {beatmatch shuttle_active}
      {stop_shuttle}
      {start_shuttle}}}
{set $mute_cheat FALSE}
{func
   toggle_mute_global
   {set
      $mute_cheat
      {! $mute_cheat}}
   {if_else
      $mute_cheat
      {do
         {synth set_master_vol kDbSilence}
         {cheat_display
            show
            "Mute all: TRUE"}}
      {do
         {synth set_master_vol 0}
         {cheat_display
            show
            "Mute all: FALSE"}}}}
{set $mute_shell_music FALSE}
{func
   toggle_mute_shell_music
   {set
      $mute_shell_music
      {! $mute_shell_music}}
   {if
      {meta}
      {if_else
         $mute_shell_music
         {{meta meta_music}
            mute}
         {{meta meta_music}
            unmute}}}}
{func
   toggle_forced_autocal
   {if_else
      {== 1 $force_autocal}
      {set $force_autocal 0}
      {set $force_autocal 1}}
   {cheat_display
      show
      {sprint
         "forced calbert: "
         $force_autocal}}}
{func
   rotate_singer_autoplay_part
   ($singer_num)
   {beatmatch
      foreach_active_player
      $player
      {if
         {==
            {$player instrument}
            vocals}
         {$player rotate_singer_autoplay_part $singer_num}
         {do
            ($part
               {$player get_singer_autoplay_part $singer_num})
            ($str
               {if_else
                  {== $part -1}
                  "OFF"
                  {sprintf
                     "vocal part %d"
                     {'+' $part 1}}})
            {cheat_display
               show
               {sprint
                  "Rotated singer "
                  {'+' $singer_num 1}
                  " autoplay to "
                  $str
                  "."}}
            {meta_performer set_cheating TRUE}}}}}
{func
   rotate_singer_autoplay_variation_magnitude
   ($singer_num)
   {beatmatch
      foreach_active_player
      $player
      {if
         {==
            {$player instrument}
            vocals}
         {$player rotate_singer_autoplay_variation_magnitude $singer_num}
         {do
            ($magnitude
               {$player get_singer_autoplay_variation_magnitude $singer_num})
            {cheat_display
               show
               {sprint
                  "Changed singer "
                  {'+' $singer_num 1}
                  " autoplay variation to +/-"
                  $magnitude
                  "."}}
            {meta_performer set_cheating TRUE}}}}}
{func
   increment_autoplay_offset
   ($amount)
   {beatmatch
      foreach_active_player
      $player
      {if
         {==
            {$player instrument}
            vocals}
         {$player
            set_autoplay_offset
            {'+'
               {$player get_autoplay_offset}
               $amount}}
         {do
            ($offset
               {$player get_autoplay_offset})
            {cheat_display
               show
               {sprint
                  "Changed autoplay offset to "
                  $offset
                  "."}}}}}}
{func
   increment_vocal_part_bias
   ($amount)
   {beatmatch
      foreach_active_player
      $player
      {if
         {==
            {$player instrument}
            vocals}
         {$player
            set_vocal_part_bias
            {'+'
               {$player get_vocal_part_bias}
               $amount}}
         {do
            ($offset
               {$player get_vocal_part_bias})
            {cheat_display
               show
               {sprint
                  "Changed vocal part tube bias to "
                  $offset
                  "."}}}}}}
{func
   toggle_vocalplayer_overlay
   {if
      {exists beatmatch}
      {beatmatch
         foreach_active_player
         $player
         {if
            {==
               {$player instrument}
               vocals}
            {$player toggle_overlay}}}}}
{func
   toggle_vocalplayer_frame_spew
   {beatmatch
      foreach_active_player
      $player
      {if
         {==
            {$player instrument}
            vocals}
         {if_else
            {$player toggle_frame_spew}
            {cheat_display
               show
               "Vocal player frame spew on!"}
            {cheat_display
               show
               "Vocal player frame spew off."}}}}}
{func
   cycle_multiplayer_auto_play
   {if
      {exists beatmatch}
      {cheat_display
         show
         {sprint
            "Autoplay: "
            {beatmatch debug_cycle_autoplay}}}
      {meta_performer set_cheating TRUE}}}
{func
   cycle_auto_play_accuracy
   {if
      {exists beatmatch}
      {cheat_display
         show
         {sprint
            "Gem-player Autoplay Accuracy: "
            {beatmatch debug_cycle_autoplay_accuracy}}}
      {meta_performer set_cheating TRUE}}}
{func
   adjust_crowd_rating
   ($delta)
   {if
      {exists beatmatch}
      {{beatmatch active_player 0}
         set_crowd_rating
         {'+'
            {{beatmatch active_player 0}
               crowd_rating}
            $delta}}}}
{func
   toggle_paused
   {unless
      {game_time_panel is_up}
      {do
         ($new
            {!
               {beatmatch get_paused}})
         {beatmatch set_paused $new TRUE FALSE}
         {if_else
            {beatmatch get_paused}
            {print
               "Game paused\n"}
            {print
               "Game unpaused\n"}}}}}
{func
   change_speed
   ($factor)
   {if
      {&&
         {!
            {meta is_up}}
         {exists beatmatch}}
      {beatmatch
         set_music_speed
         {'*'
            {beatmatch music_speed}
            $factor}}}}
{func
   cheat_win_meta
   {if
      {meta is_up}
      {cond
         ({&&
               {!
                  {ui in_transition}}
               {==
                  {ui current_screen}
                  tour_gigguide_screen}}
            {tour_gigguide_panel cheat_win_quest}
            {if_else
               {{tour progress}
                  are_all_tour_gigs_complete}
               {ui goto_screen tour_finished_screen}
               {ui
                  goto_screen
                  {get_tour_screen}}})
         ({&&
               {!
                  {ui in_transition}}
               {==
                  {ui current_screen}
                  tour_customize_post_screen}}
            {tour_customize_panel cheat_win_tour})
         ({&&
               {!
                  {ui in_transition}}
               {==
                  {ui current_screen}
                  accomplishment_screen}}
            {do
               ($msg
                  {sprintf
                     "Earned Achievement: %s"
                     {accomplishment_panel selected_accomplishment}})
               {accomplishment_panel fake_earn_selected}
               {cheat_display show $msg}})}}}
{func
   dump_tour_properties
   {if
      {&&
         tour
         {tour progress}}
      {{tour progress}
         dump_properties}}}
{func
   reload_tour_data
   {if
      tour
      {tour cheat_reload_data}
      {cheat_display
         show
         "Tour Data Reloaded."}}}
{func
   reload_campaign_data
   {if
      campaign
      {campaign cheat_reload_data}
      {cheat_display
         show
         "Campaign Data Reloaded."}}}
{func
   toggle_haq_printouts
   {if
      haq_mgr
      {haq_mgr toggle_enabled}
      {if_else
         {haq_mgr is_enabled}
         {cheat_display
            show
            "HAQ Printouts Enabled"}
         {cheat_display
            show
            "HAQ Printouts Disabled"}}}}
{func
   haq_display_all
   {if
      haq_mgr
      {haq_mgr display_all}}}
{func
   fake_event_win
   ($avg_stars)
   {if
      {song_select_panel is_up}
      {music_library fake_win $avg_stars}}}
{func
   fill_band_energy
   {unless
      {meta is_up}
      {beatmatch
         foreach_active_player
         $p
         {$p fill_band_energy}}}}
{func
   cheat_empty_band_energy
   {if
      {&&
         {exists beatmatch}
         {!
            {meta is_up}}}
      {beatmatch
         foreach_active_player
         $p
         {$p empty_band_energy}}}}
{set $remote_solo FALSE}
{func
   toggle_remote_solo
   {set
      $remote_solo
      {! $remote_solo}}
   {{beatmatch active_player 1}
      remote_solo
      $remote_solo}}
{func
   everyone_deploy
   {unless
      {meta is_up}
      {game
         foreach_local_player
         $p
         {handle
            ($p deploy_if_possible)}}}}
{func
   player_do_func
   ($pad_num $func)
   {unless
      {meta is_up}
      {if
         {exists beatmatch}
         {do
            ($user
               {user_mgr get_user_from_pad_num $pad_num})
            {if
               {&&
                  $user
                  {$user is_participating}}
               {do
                  ($player
                     {$user player})
                  {if
                     $player
                     {$player $func}}}}}}}}
{func
   player_deploy
   ($pad_num)
   {player_do_func $pad_num deploy_if_possible}}
{func
   player_fail
   ($pad_num)
   {player_do_func $pad_num fail}}
{func
   toggle_multiplier_active
   {if
      {exists beatmatch}
      {do
         ($new
            {!
               {band_0 get_multiplier_active}})
         {band_0 set_multiplier_active $new}
         {cheat_display
            show_bool
            "Multipliers "
            $new}}}}
#ifdef HX_XBOX
{func
   fake_signout
   ($pad_num)
   {cheat_display
      show
      {sprintf
         "Fake Signout on pad %d\n"
         {'+' 1 $pad_num}}}
   {print
      {sprintf
         "Fake Signout on pad %d\n"
         $pad_num}}
   {platform_mgr debug_fake_signin_change_msg $pad_num}}
#endif
{func
   cycle_instrument_override
   ($pad_num)
   {if_else
      {'||'
         {==
            {{user_mgr debug_get_user_from_pad $pad_num}
               get_controller_type}
            kControllerNone}}
      {do
         ($old
            {user_mgr debug_get_controller_type_override $pad_num})
         ($new
            {switch
               $old
               (kControllerGuitar kControllerDrum)
               (kControllerDrum kControllerVocals)
               (kControllerVocals kControllerKeys)
               (kControllerKeys kControllerRealGuitar)
               (kControllerRealGuitar kControllerNone)
               kControllerGuitar})
         {user_mgr debug_set_controller_type_override $pad_num $new}
         {cheat_display
            show
            {if_else
               {== $new kControllerNone}
               {sprint
                  "Controller "
                  {'+' $pad_num 1}
                  " instrument faking cleared."}
               {sprint
                  "Controller "
                  {'+' $pad_num 1}
                  " instrument faking to "
                  {switch
                     $new
                     (kControllerGuitar guitar)
                     (kControllerDrum drum)
                     (kControllerVocals vocals)
                     (kControllerKeys keys)
                     (kControllerRealGuitar real_guitar)
                     "error"}}}}
         {do
            ($user
               {user_mgr debug_get_user_from_pad $pad_num})
            {cond
               ({==
                     {ui current_screen}
                     tour_band_sel_screen}
                  {tour_band_sel_screen joypad_connect $user TRUE})}
            {overshell update_all}}}
      {cheat_display
         show
         {sprint
            "Can't change instrument: controller "
            {'+' $pad_num 1}
            " is in session."}}}}
{func
   cheat_next_campaign_level
   {if
      campaign
      {campaign cheat_next_campaign_level}
      {do
         ($msg
            {sprintf
               "Cheated Campaign Level: %s"
               {campaign get_cheat_meta_level}})
         {cheat_display show $msg}}
      {if
         {gamemode in_mode campaign}
         {accomplishments_status_panel refresh}}}}
{func
   fake_win
   ($num_stars)
   {if_else
      {game is_up}
      {do
         {if_else
            {band_0 band_performer}
            {{band_0 band_performer}
               win
               $num_stars}
            {{beatmatch active_player 0}
               win
               $num_stars}}
         {meta_performer set_cheating TRUE}}
      {fake_event_win $num_stars}}}
{func
   fake_win_multi
   ($num_stars)
   {if
      {game is_up}
      {fake_win $num_stars}
      {set $cheat.win_event TRUE}}}
{func
   tour_cycle_challenge
   {if
      {&&
         {!
            {ui in_transition}}
         {==
            {ui current_screen}
            tour_gigguide_screen}}
      {do
         ($msg
            {sprintf
               "Tour challenge cycled"})
         {tour_gigguide_panel cheat_cycle_challenge}
         {cheat_display show $msg}
         {ui
            goto_screen
            {get_tour_screen_no_announcements}}}}}
{func
   tour_cycle_setlist
   {if
      {&&
         {!
            {ui in_transition}}
         {==
            {ui current_screen}
            tour_gigguide_screen}}
      {do
         ($msg
            {sprintf
               "Tour setlist cycled"})
         {tour_gigguide_panel cheat_cycle_setlist}
         {cheat_display show $msg}
         {ui
            goto_screen
            {get_tour_screen_no_announcements}}}}}
{func
   toggle_no_drum_fills
   {game
      foreach_local_player
      $p
      {if
         {&&
            $p
            {==
               {$p instrument}
               drum}}
         {cheat_display
            show_bool
            "Drum Fills "
            {$p toggle_no_fills}}}}}
{set $send_fake_patches FALSE}
{func
   toggle_send_fake_patches
   {set
      $send_fake_patches
      {! $send_fake_patches}}
   {cheat_display
      show_bool
      "Send Junk Data "
      $send_fake_patches}}
{set $test_guitar_fx 4}
{func
   cycle_guitar_fx
   {'++' $test_guitar_fx}
   {if
      {== $test_guitar_fx 5}
      {set $test_guitar_fx 0}}
   {cheat_display
      show
      {sprint
         "guitar fx set to "
         {elem
            (wah flanger delay chorus none)
            $test_guitar_fx}}}
   {handle
      (beatmatch
         foreach_active_player
         $p
         {handle
            ($p update_guitar_fx)})}}
{func
   cheat_toggle_difficulty
   {do
      ($new_diff -1)
      {user_mgr
         foreach_local_user
         $user
         {if
            {== $new_diff -1}
            {set
               $new_diff
               {'+'
                  {$user get_difficulty}
                  1}}
            {set
               $new_diff
               {mod
                  $new_diff
                  {size
                     (DIFF_SYMBOLS)}}}
            {cheat_display
               show
               {sprint
                  "New Difficulty Set: "
                  {elem
                     (DIFF_SYMBOLS)
                     $new_diff}}}}
         {$user set_difficulty $new_diff}}}}
{set $drum_fill_type kFillsDeployGemAndInvisible}
{func
   cycle_drum_fills
   {set
      $drum_fill_type
      {'+' $drum_fill_type 1}}
   {if
      {== $drum_fill_type 3}
      {set $drum_fill_type 1}}
   {cheat_display
      show
      {sprint
         "drum deploy: "
         {switch
            $drum_fill_type
            (kFillsRegular
               "fills")
            (kFillsDeployGemAndDim
               "deploy gem + dim")
            (kFillsDeployGemAndInvisible
               "deploy gem + invisible")}}}}
{func
   display_postprocs
   {if
      $banddirector
      {$banddirector cur_postprocs $a $b $blend}
      {if_else
         {== $a $b}
         {cheat_display
            show
            {sprint
               "Current post-proc: "
               $a}}
         {do
            ($pct
               {int
                  {'*' $blend 100}})
            {cheat_display
               show
               {sprint
                  "Current post-proc: "
                  $a
                  " ("
                  $pct
                  "%) "
                  $b
                  " ("
                  {- 100 $pct}
                  "%)"}}}}}}
{set $no_pass_sounds FALSE}
{func
   toggle_pass_sounds
   {set
      $no_pass_sounds
      {! $no_pass_sounds}}
   {cheat_display
      show
      {sprint
         "pass sounds now "
         {if_else
            $no_pass_sounds
            "off"
            "on"}}}
   {if
      {exists beatmatch}
      {band_0 set_no_pass_sounds $no_pass_sounds}}}
{set $drop_all_packets FALSE}
{func
   toggle_drop_all_packets
   {set
      $drop_all_packets
      {! $drop_all_packets}}
   {cheat_display
      show
      {sprint
         "packets "
         {if_else
            $drop_all_packets
            "dropped"
            "back"}}}
   {if_else
      $drop_all_packets
      {emulator set_dropprob 100 100}
      {emulator set_dropprob 0 0}}}
{set $auto_hopos FALSE}
{func
   toggle_auto_hopos
   {set
      $auto_hopos
      {! $auto_hopos}}
   {cheat_display
      show
      {sprint
         "auto hopos "
         {if_else
            $auto_hopos
            "on"
            "off"}}}}
{set $click_track TRUE}
{func
   toggle_click_track
   {set
      $click_track
      {! $click_track}}
   {practice_panel click_cheat $click_track}
   {cheat_display
      show
      {sprint
         "click track "
         {if_else
            $click_track
            "on"
            "off"}}}}
{set $practice_mbt FALSE}
{func
   toggle_practice_mbt
   {set
      $practice_mbt
      {! $practice_mbt}}
   {cheat_display
      show
      {sprint
         "practice section MBTs "
         {if_else
            $practice_mbt
            "on"
            "off"}}}}
{set $no_background_atten FALSE}
{func
   toggle_background_atten
   {set
      $no_background_atten
      {! $no_background_atten}}
   {cheat_display
      show
      {sprint
         "background attenuation "
         {if_else
            $no_background_atten
            "off"
            "on"}}}}
{func
   cheat_debug_prefabs
   {prefab_mgr enable_debug_prefabs}
   {cheat_display
      show
      {sprint
         "Debug prefabs enabled."}}}
{func
   toggle_instrument_synth
   {game toggle_instrument_synth}
   {cheat_display
      show
      {sprint
         "instrument synth is "
         {if_else
            {game is_instrument_synth_on}
            "on"
            "off"}}}}
{set $instrument_synth_volume 10}
{func
   change_instrument_synth_volume
   ($delta)
   {set
      $instrument_synth_volume
      {clamp
         {'+' $instrument_synth_volume $delta}
         0
         127}}
   {game set_instrument_synth_volume $instrument_synth_volume}
   {cheat_display
      show
      {sprint
         "instrument synth volume now "
         $instrument_synth_volume}}}
{func
   toggle_show_shell_ui
   {main
      iterate_self
      Object
      $panel
      {if
         {has_substr
            {safe_name $panel}
            "_panel"}
         {unless
            {is_vignette $panel}
            {$panel
               set_showing
               {!
                  {$panel showing}}}}}}
   {overshell
      set_showing
      {!
         {overshell showing}}}}
{func
   cheat_prefab_toggle_customizable
   {prefab_toggle_customizable}
   {cheat_display
      show
      {sprint
         "Customize Prefabs "
         {if_else
            {prefab_is_customizable}
            "enabled."
            "disabled."}}}}
{func
   cheat_prefab_toggle_use_profile_patches
   {prefab_toggle_uses_profile_patches}
   {cheat_display
      show
      {if_else
         {prefab_uses_profile_patches}
         {sprint
            "Prefab uses profile patches"}
         {sprint
            "Prefab uses its own patches"}}}}
{func
   save_prefab
   ($name)
   {if
      {customize_panel is_up}
      {cheat_display
         show
         {sprint
            {customize_panel save_prefab $name}}}
      {customize_panel take_portrait}}}
{func
   cheat_prefab_save_from_closet
   {if
      {customize_panel is_up}
      {cheat_display
         show
         {sprint
            {customize_panel
               save_prefab
               ""}}}
      {customize_panel take_portrait}}}
{func
   cheat_prefab_take_portrait
   {if
      {&&
         {prefab_is_customizable}
         {customize_panel is_up}}
      {customize_panel take_portrait}
      {cheat_display
         show
         {sprint
            "Portrait Taken"}}}}
{func
   cheat_skip_membership_check
   {set
      $cheat_skip_ugc_membership_check
      {! $cheat_skip_ugc_membership_check}}
   {cheat_display
      show
      {if_else
         $cheat_skip_ugc_membership_check
         "UGC/Creator's Club Membership Check: Disabled"
         "UGC/Creator's Club Membership Check: Enabled"}}}
{func
   cheat_skip_audition_transfer
   {if_else
      {audition_transfer_panel is_up}
      {do
         {cheat_display
            show
            "Skipping from Audition transfer screen to session screen..."}
         {ui goto_screen audition_session_screen}}
      {cheat_display
         show
         "Must by on Audition Transfer screen to skip to Session Screen"}}}