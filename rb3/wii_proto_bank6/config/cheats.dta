(left
   (4
      "Cycle Free Camera"
      {if_else {== {ui current_screen} splash_screen}
         {ui goto_screen frame_rate_screen}
         {cycle_free_camera}
      }
   )
   (1 "HAQ display all" {haq_display_all})
)
(right
   (8 "Fake Win with 3 stars" {fake_win 3})
   (7 "Print Current Screen" {handle ({ui current_screen} print)})
)
(keyboard
   #ifndef _SHIP
   ('`' "Toggle fake file errors" {toggle_fake_file_errors})
   #endif
   #ifdef HX_XBOX

   #endif
   (402
      "Rotate part for singer 1 autoplay"
      {if {game is_up}
         {rotate_singer_autoplay_part 0}
      }
   )
   (403
      "Rotate part for singer 2 autoplay"
      {if {game is_up}
         {rotate_singer_autoplay_part 1}
      }
   )
   (404
      "Rotate part for singer 3 autoplay"
      {if {game is_up}
         {rotate_singer_autoplay_part 2}
      }
   )
   (405
      "Change autoplay pitch offset by -1"
      {if {game is_up}
         {increment_autoplay_offset -1.0}
      }
   )
   (406
      "Change autoplay pitch offset by +1"
      {if {game is_up}
         {increment_autoplay_offset 1.0}
      }
   )
   (407
      ctrl
      "Toggle vocal frame stats"
      (filters game harmony)
      {if {game is_up}
         {toggle_vocalplayer_frame_spew}
      }
   )
   (408
      "Toggle network overlay"
      (filters game)
      {rnd toggle_overlay network}
   )
   (409 "No Drum Fills" {toggle_no_drum_fills})
   (0 "Pause/unpause game" {toggle_paused})
   (5
      "Cycle through graphical character debugging in game"
      {next_character_driver}
   )
   (6
      "Cycle instrument faking for controller 1"
      {cycle_instrument_override 0}
   )
   (7
      "Cycle instrument faking for controller 2"
      {cycle_instrument_override 1}
   )
   (8
      "Cycle instrument faking for controller 3"
      {cycle_instrument_override 2}
   )
   (9
      "Cycle instrument faking for controller 4"
      {cycle_instrument_override 3}
   )
   (! "Game: Win w/ 3 stars, Meta: Win event w/ 1 Star Avg" {fake_win 1})
   ('@' "Game: Win w/ 3 stars, Meta: Win event w/ 2 Star Avg" {fake_win 2})
   (# "Game: Win w/ 3 stars, Meta: Win event w/ 3 Star Avg" {fake_win 3})
   ('$' "Game: Win w/ 4 stars, Meta: Win event w/ 4 Star Avg" {fake_win 4})
   ('%' "Game: Win w/ 5 stars, Meta: Win event w/ 5 Star Avg" {fake_win 5})
   (3
      alt
      "Toggle keyboard fingering numbers"
      {set $key_gem_fingering {! $key_gem_fingering}}
      {cheat_display show "Toggled keyboard fingering numbers"}
   )
   ('^' "Game: Win w/ 6 stars, Meta: Win event w/ 6 Star Avg" {fake_win 6})
   (& "Cycle to next challenge" {tour_cycle_challenge})
   ('*' "Game: Win a multisong event w/ 5 star avg" {fake_win_multi 5})
   ('[' "Toggle in-game timer stats" {rnd toggle_timers_verbose})
   (']' "Reload Campaign Data" {reload_campaign_data})
   ('{'
      "Show real guitar debug panel"
      {real_guitar_debug_panel set_showing 1}
   )
   ('}'
      "hide real guitar debug panel"
      {real_guitar_debug_panel set_showing 0}
   )
   (a
      alt
      "Game: Toggles auto-hopos"
      (filters game)
      {toggle_auto_hopos}
   )
   (a
      "Game: Cycles through combinations of Autoplay"
      {cycle_multiplayer_auto_play}
   )
   (a
      ctrl
      "Toggle AO"
      {do
         ($world {$banddirector get cur_world})
         {if $world
            {handle ({find_obj $world RB3_geom.env} toggle_ao)}
            {handle ({find_obj $world RB3_chars.env} toggle_ao)}
         }
      }
   )
   (A "Meta: unlock all; Game: toggle crowd audio" {A_cheat})
   (b "Meta: Cheat Finish Quest" {cheat_win_quest})
   (B
      "Game: Fire off bonus fx.  Woo!"
      {if {game is_up}
         {handle ($world bonusfx)}
      }
   )
   (b ctrl "Toggle background track attenuation" {toggle_background_atten})
   (c
      "Game: Cycle CamShots / Music Store: clear file cache"
      (filters store)
      {cond
         ({game is_up}
            {if $banddirector
               {$banddirector cycle_shot}
            }
         )
         ({&&
               {store_panel is_up}
               {store_filter_panel is_up}}
            {net_cache_mgr debug_clear_cache}
         )
      }
   )
   (C
      "Toggle Current CamShot Info"
      {rnd toggle_overlay camera}
      {if $banddirector
         {handle ({$banddirector get cur_shot} update_overlay)}
      }
   )
   (c ctrl "Toggle practice mode click track" {toggle_click_track})
   (d
      "Game: Toggle Camera Picking, Meta: Toggle Difficulty"
      {if_else {game is_up}
         {if $banddirector
            {do
               ($disable {! {$banddirector get disable_picking}})
               {$banddirector set disable_picking $disable}
               {cheat_display show_bool "Disable camera picking" $disable}
            }
         }
         {cheat_toggle_difficulty}
      }
   )
   (d
      ctrl
      "Cycle difficulty of player 0"
      {do
         ($player {beatmatch active_player 0})
         ($newdiff {'+' {$player difficulty} 1})
         {if {> $newdiff 3}
            {set $newdiff 0}
         }
         {{$player get_user} set_difficulty $newdiff}
      }
   )
   (d alt "Enable debug prefabs" {cheat_debug_prefabs})
   (D "Everyone Deploy Band Energy" {everyone_deploy})
   (e "Game: Adjust crowd excitement down" {adjust_crowd_rating -0.1})
   (E "Adjust crowd excitement up" {adjust_crowd_rating 0.1})
   (e
      ctrl
      "Game: cycles through each character visual debugging of their eyes"
      (filters game)
      {if {&& {game is_up} $banddirector}
         {$banddirector debug_char_interests}
         {cheat_display show
            "visual interest object debug: cycling to next character..."
         }
      }
   )
   (f "Dump Tour Properties for current Band" {dump_tour_properties})
   (F
      "Game: Cycle Free Camera / Meta: Toggle fake songs"
      {if_else {game is_up}
         {if_else {beatmatch get_paused}
            {{{get_track_panel} find vocals} cycle_font_style}
            {cycle_free_camera}
         }
         {do
            ($val {! {song_mgr get_fake_songs_allowed}})
            {song_mgr set_fake_songs_allowed $val}
            {cheat_display show_bool "Fake songs allowed" $val}
         }
      }
   )
   (g
      "Game: dump clip report"
      {if_else {beatmatch get_paused}
         {{{get_track_panel} find vocals} cycle_pitch_guides}
         {if {game is_up}
            {do
               ($grand_total 0)
               {$world iterate
                  CompositeCharacter
                  $char
                  {with $char
                     {do
                        ($total 0)
                        {print $this "\n"}
                        {$this iterate
                           CharClipSet
                           $clips
                           {do
                              ($sec 0)
                              ($size {$clips total_size})
                              {'+=' $total $size}
                              {$clips iterate CharClip $c {'+=' $sec {$c get length_seconds}}}
                           }
                           {print "   total size: " $total "\n"}
                           {'+=' $grand_total $total}
                        }
                     }
                  }
                  {print "grand total: " $grand_total "\n"}
               }
            }
         }
      }
   )
   (G "Print faders" {audio print_faders})
   (h
      "Game: Toggle HUD / Meta: toggle vocal harmony forcing"
      {if_else {game is_up}
         {do
            ($track {get_track_panel})
            {if $track
               {$track set_showing {! {$track showing}}}
            }
         }
         {do
            {if {exists meta_performer}
               {do
                  ($vhmode {meta_performer cheat_toggle_vocal_harmony})
                  {cheat_display show
                     {sprint "Toggled vocal harmony to " $vhmode "."}
                  }
               }
            }
         }
      }
   )
   (h
      ctrl
      "Display hit count"
      {cheat_display show "Hit stats written to console"}
      {game print_hit_stats}
   )
   (h
      alt
      "Clear hit count"
      {cheat_display show "Hit stats cleared"}
      {game clear_hit_stats}
   )
   (H
      "Toggle forced detection of calbert/Toggle harmony Lyrics"
      {if_else {beatmatch get_paused}
         {{{get_track_panel} find vocals} toggle_harmony_lyrics}
         {toggle_forced_autocal}
      }
   )
   (I "Toggle Light Preset overlay" {rnd toggle_overlay light_preset})
   (i
      "Game: Toggle lighting events"
      {if {game is_up}
         {do
            ($ignore {handle ($world toggle_lighting_events)})
            {cheat_display show {sprint "light preset frozen: " $ignore}}
         }
      }
   )
   (j "Toggle character overlay" {rnd toggle_overlay char_status 1})
   (J "Reload Tour Data" {reload_tour_data})
   (k "Meta: Komplete Achievement" {fake_achievement})
   (K "Toggle HAQ Printouts" {toggle_haq_printouts})
   (k ctrl "Force gamepads to be keyboards" {toggle_force_keyboards})
   (l
      "Game: Lose"
      {if_else {beatmatch get_paused}
         {{{get_track_panel} find vocals} cycle_layout}
         {{beatmatch active_player 0} lose}
      }
   )
   (L
      "Toggle audio levels"
      {if_else {beatmatch get_paused}
         {{{get_track_panel} find vocals} toggle_lead_lyrics}
         {synth toggle_hud}
      }
   )
   (m
      alt
      "Get latest strings from Magnu"
      (filters writer)
      {do
         ($num_strings {magnu_refresh_strings})
         {cheat_display show
            {sprintf "Found %i new strings from Magnu" $num_strings}
         }
      }
   )
   (m
      ctrl
      "Game: enable/disable multipliers"
      (filters game)
      {toggle_multiplier_active}
   )
   (m
      "Game: Toggle crowd meter/Meta: Mute shell music"
      (filters game meta)
      {if {game is_up}
         {toggle_crowd_meter}
      }
   )
   (M
      "Toggle mutes all"
      (value_bool $mute_cheat)
      {toggle_mute_global}
   )
   (n
      "Cycle notify level"
      (value {elem (disable overlay modal) $notify_level})
      {do
         ($names (disable overlay modal))
         {set $notify_level {mod {'++' $notify_level} {size $names}}}
         {cheat_display show {sprint "Notify level " {elem $names $notify_level}}}
      }
   )
   (N
      "Force Finale sequence at the end of the last song"
      {cheat_display show_bool "Finale" {meta_performer cheat_toggle_finale}}
   )
   (o
      "Push Network Channel selection screen"
      {unless {'||' {matchmaker is_finding} {== {ui current_screen} selchannel_screen}}
         {ui push_screen selchannel_screen}
      }
   )
   (O "Print the symbol table" {print_symbol_table syms})
   #ifdef HX_PS3
   (p
      "Toggle Store Service ID (PS3-only)"
      (value {store_panel service_id})
      (filters store)
      {cheat_display show
         {sprintf
            "PS3 In-Game Commerce Service ID: %s"
            {store_panel toggle_service_id}
         }
      }
   )
   #endif
   (p ctrl "Toggle MBT display for practice sections" {toggle_practice_mbt})
   (P
      "Shell: Toggle Random Song Debug / Game: Toggle Pitch Window"
      {if_else {game is_up}
         {if {beatmatch get_paused}
            {{{get_track_panel} find vocals} toggle_pitch_window}
         }
         {cheat_display show_bool
            "Random Song Debug"
            {song_mgr toggle_random_song_debug}
         }
      }
   )
   (p
      alt
      "Toggle all postprocess effects"
      (filters game meta)
      {cheat_display show
         {sprint
            "PostProcs: "
            {if_else {rnd toggle_all_postprocs}
               "off"
               "on"
            }
         }
      }
   )
   (q "Print Current Screen" {handle ({ui current_screen} print)})
   (Q "toggle phoneme feedback" {{get_track_panel} toggle_phoneme_feedback})
   (r
      "Toggle Shell Automation"
      {do
         (value {ui auto_script})
         {cheat_display show {sprint "Shell Automation: " {ui toggle_auto}}}
      }
   )
   (R
      "Toggle Shell Recording"
      (value {ui record_script})
      {cheat_display show {sprint "Shell Recording: " {ui toggle_record}}}
   )
   (s
      "Toggle scoring info"
      {if {game is_up}
         {rnd toggle_overlay score}
      }
   )
   (S
      "Fill up the band energy"
      (filters game)
      {fill_band_energy}
   )
   (t "Toggle time overlay" {rnd toggle_overlay time})
   (T
      "Toggle profiling timers"
      {rnd toggle_timers}
      {rnd toggle_overlay rate}
   )
   (u "Empty" {print "EMPTY\n"})
   (u ctrl "Toggle packet loss" {toggle_drop_all_packets})
   (U
      "Toggle UI load times"
      (filters meta)
      (value_bool {ui showing_load_times})
      {ui toggle_load_times}
   )
   (v
      "Toggle Vocalplayer overlay/Venue select: Toggle venue select modifier"
      {if_else {&& {! {game is_up}} {! {selvenue_panel is_up}}}
         {ui push_screen selvenue_screen}
         {toggle_vocalplayer_overlay}
      }
   )
   (v
      ctrl
      "Cycle Vignette Override"
      (filters meta)
      {ui cycle_vignette_override}
   )
   (v
      alt
      "Show Vignette Selection Info"
      (filters meta)
      {do
         {ui toggle_vignette_overlay}
         {cheat_display show
            {sprint
               "Show vignette selection info: "
               {if_else {ui vignette_overlay_showing}
                  "TRUE"
                  "FALSE"
               }
            }
         }
      }
   )
   (V "toggle vocal score info" {{get_track_panel} toggle_score_debug})
   (w
      "Game: Force a win"
      {if {exists beatmatch}
         {{beatmatch active_player 0} win 3}
      }
   )
   (W
      "Toggle showing test offers in Music Store"
      (value_bool {store_panel test_offers})
      (filters store)
      {cheat_display show_bool
         "Show Music Store test offers"
         {store_panel toggle_test_offers}
      }
   )
   (x "Cycle Guitar FX" {cycle_guitar_fx})
   (X "Toggle shuttle" {toggle_shuttle})
   (y "Toggle lyric display mode" {{get_track_panel} toggle_lyric_mode})
   (Y
      "Game: Toggle mute master fader"
      {if {game is_up}
         {audio toggle_mute_master}
      }
   )
   (z
      "Toggle showing world"
      (value_bool {world_panel showing})
      {world_panel set_showing {! {world_panel showing}}}
   )
   (Z "Hi-reZ screen shot" {rnd hi_res_screen 3})
   ('+'
      "Toggle Store Metadata Index"
      (value {net_cache_mgr server_type})
      (filters store)
      {cheat_display show
         {sprintf
            "Music Store now using %s metadata"
            {net_cache_mgr cheat_next_server}
         }
      }
   )
   (> "Meta: Next Campaign Level" {cheat_next_campaign_level})
   (<
      "Jump backward a bit in time"
      {beatmatch jump {- {beatmatch get_song_ms} 1000.0}}
   )
   (322
      "Double song speed"
      {if {exists beatmatch}
         {if_else {beatmatch get_paused}
            {{{get_track_panel} find vocals} nudge_pitch_window_size 0.1}
            {change_speed 2.0}
         }
      }
   )
   (323
      "Halve song speed"
      {if {exists beatmatch}
         {if_else {beatmatch get_paused}
            {{{get_track_panel} find vocals} nudge_pitch_window_size -0.1}
            {change_speed 0.5}
         }
      }
   )
   (320
      "decrease pitch arrow smoothing"
      {if {game is_up}
         {{{get_track_panel} find vocals} decrease_arrow_smoothing}
      }
   )
   (321
      "increase pitch arrow smoothing"
      {if {game is_up}
         {{{get_track_panel} find vocals} increase_arrow_smoothing}
      }
   )
   ('\\' "Cycle to next setlist" {tour_cycle_setlist})
   (',' "Deploy Overdrive Pad 1" {player_deploy 0})
   (. "Deploy Overdrive Pad 2" {player_deploy 1})
   (/ "Deploy Overdrive Pad 3" {player_deploy 2})
   ('?' "Deploy Overdrive Pad 4" {player_deploy 3})
)