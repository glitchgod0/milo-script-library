#include track_panel.dta
#include pause_mics_helper.dta
#define LOSE_MUSIC_SLOW_SEC (2)
{new GamePanel
   game
   (file "")
   (held_buttons (4 0.1))
   (disable_pause_ms 2000)
   (load {set_loader_period 14})
   (finish_load {set_loader_period 10})
   (reset {active_events_parser add_sink $this () 3})
   (coda
      {if_else {&& {game want_coda} {game is_playing}}
         {do
            {beatmatch foreach_active_player $p
               {handle ($p enter_coda)}
            }
            kDataUnhandled
         }
         0
      }
   )
   (pick_intro
      {if_else
         {'||'
            $skip_intro
            {gamemode in_mode frame_rate}
            {beatmatch resumed_no_score}
         }
         {handle ($this intro_skip)}
         {handle ($this intro_start)}
      }
   )
   (intro_start
      {{gamemode get game_screen} set_showing 1}
      {script_task
         0
         (delay {- 0 {taskmgr seconds}})
         (script {handle ($this on_extend)})
      }
      {script_task
         1
         (delay {- {taskmgr beat}})
         (script {handle ($this intro_end)})
      }
      kDataUnhandled
   )
   (intro_skip {{gamemode get game_screen} set_showing 1} kDataUnhandled)
   (music_start {ui music_start} kDataUnhandled)
   (beat
      {if $debug.beep
         {{get_track_panel} play_seq click}
      }
      kDataUnhandled
   )
   (excitement
      ($ex)
      {if {gamemode get crowd_reacts}
         {if {< $ex 5}
            {handle
               {elem
                  (
                     ($this excitement_boot)
                     ($this excitement_bad)
                     ($this excitement_okay)
                     ($this excitement_great)
                     ($this excitement_peak)
                  )
                  $ex
               }
            }
         }
      }
      kDataUnhandled
   )
   (game_over
      #ifndef HX_WII
      {stagekit_reset}
      #endif
      {beatmatch foreach_active_player $p
         {$p on_game_over}
      }
      {if
         {&&
            {== {ui current_screen} pause_controller_screen}
            {! {ui in_transition}}
         }
         {pause_controller_screen on_controllers_ok}
      }
      kDataUnhandled
   )
   (game_won_common
      {beatmatch set_realtime 1}
      {beatmatch set_paused 1}
      {{get_track_panel} play_seq track_end.cue}
   )
   (game_won {$this game_won_common} kDataUnhandled)
   (game_won_finale {$this game_won_common} kDataUnhandled)
   (game_lost
      {beatmatch set_realtime 1}
      {beatmatch foreach_active_player $p
         {$p on_game_lost}
      }
      {if {gamecfg multiplayer}
         {{beatmatch main_performer} on_game_lost}
         {game play_band_died_cue}
      }
      {script_task
         1
         (delay LOSE_MUSIC_SLOW_SEC)
         (script
            {do
               {beatmatch set_paused 1}
            }
         )
      }
      kDataUnhandled
   )
   (game_skip
      {beatmatch set_realtime 1}
      {beatmatch set_paused 1}
      {handle ($this game_outro)}
   )
   (game_outro
      {beatmatch foreach_active_player $p
         {$p disable_controller}
      }
      {synth stop_all_sfx}
      {ui sync_screen
         {if_else {$this lost}
            {gamemode get lose_screen}
            {gamemode get win_screen}
         }
         1
      }
      kDataUnhandled
   )
   (disable_all_controllers
      {beatmatch foreach_active_player $p
         {$p disable_controller}
      }
   )
   (on_button_held ($user $raw_button $action $pad_num))
   (resume_no_score
      {{{get_track_panel} my_track_panel_dir} hide_score}
      {foreach_int $i 0 {beatmatch num_active_players}
         {{beatmatch active_player $i} set_crowd_rating_active 0}
      }
   )
}
{new SyncGameStartPanel sync_audio_net_panel}
{new UIPanel
   world_panel
   (file "../world/world.milo")
   (unload_async 1)
   (unload
      {if $banddirector
         {$banddirector world_panel_unloaded}
      }
      {meta_performer clear_venues}
   )
}
#define GAME_SCREEN_HANDLERS (
   (disable_screen_saver 1)
   (JOYPAD_CONNECT_MSG {$this check_lost_controller})
   (check_lost_controller
      {if_else
         {&&
            {== {ui current_screen} {gamemode get game_screen}}
            {! {ui in_transition}}
            {! {game is_game_over}}
            {session is_in_game}
            {! {input_mgr check_controllers}}
         }
         {do
            {net_sync set_ui_state 13}
            {ui push_screen pause_controller_screen}
            1
         }
         0
      }
   )
   PAUSE_ON_MIC_DISCONNECT
   (enter
      {$this set_showing 1}
      {set [delayed_mic_check] 0}
      {rnd set_in_game 1}
      {platform_mgr add_sink $this (ui_changed)}
      {platform_mgr add_sink $this (microphones_changed)}
      {if {game get multi_event}
         {coop_track_panel set_paused 0}
         {{world_panel loaded_dir} enter}
         {game set multi_event 0}
      }
      {user_mgr foreach_local_user $user
         {profile_mgr update_vocal_volume $user}
      }
      {profile_mgr update_all_mic_gains}
      {overshell set_active_status 3}
      {net_sync set_ui_state 13}
      {handle ($this my_enter)}
   )
   (exit
      {platform_mgr remove_sink $this ui_changed}
      {platform_mgr remove_sink $this microphones_changed}
      {synth stop_playback_all_mics}
      {if {== {ui_event_mgr current_event} pad_lost}
         {ui_event_mgr dismiss_event}
      }
      {input_mgr check_controllers}
      {$this set_showing 0}
      {rnd reset_postproc}
   )
   (UI_CHANGED_MSG {$this on_guide_change})
   (TRANSITION_COMPLETE_MSG
      {if {== {ui_event_mgr current_event} pad_lost}
         {ui_event_mgr dismiss_event}
      }
      {if $game_unpause_on_enter
         {beatmatch set_paused 0}
         {set $game_unpause_on_enter 0}
      }
      {if {! {$this check_lost_controller}}
         {$this on_guide_change}
         {unless $fake_controllers
            {$this pause_for_mic_check}
         }
      }
   )
   (on_guide_change {overshell update_all} PAUSE_MICS_ON_GUIDE_CHANGE)
)
{new UIPanel
   real_guitar_debug_panel
   (file "./dev_only/real_guitar_debug.milo")
   (enter {$this set_showing 0})
   (update_fret
      ($string $fret)
      {{elem [labels] $string} set_int $fret}
   )
   (swing
      ($string)
      {{elem [anims] $string} animate}
   )
   (update_vel
      ($string $vel)
      {if {exists {elem [vel_labels] $string}}
         {{elem [vel_labels] $string} set_int $vel}
      }
   )
   (hit
      {if {exists hit.tnm}
         {hit.tnm animate}
      }
   )
   (miss
      {if {exists miss.tnm}
         {miss.tnm animate}
      }
   )
   (pass
      {if {exists pass.tnm}
         {pass.tnm animate}
      }
   )
   (not_matched
      {if {exists not_matched.tnm}
         {not_matched.tnm animate}
      }
   )
   (num_strums
      ($num)
      {if {exists num_strums.lbl}
         {num_strums.lbl set_int $num}
         {num_strums.tnm animate}
      }
   )
   (num_timed_strums
      ($num)
      {num_timed_strums.lbl set_int $num}
      {num_timed_strums.tnm animate}
   )
   (labels
      (string_0.lbl
         string_1.lbl
         string_2.lbl
         string_3.lbl
         string_4.lbl
         string_5.lbl
      )
   )
   (anims
      (string_0.tnm
         string_1.tnm
         string_2.tnm
         string_3.tnm
         string_4.tnm
         string_5.tnm
      )
   )
   (vel_labels (vel_0.lbl vel_1.lbl vel_2.lbl vel_3.lbl vel_4.lbl vel_5.lbl))
}
#define GAME_SCREEN_PANELS (
   game
   world_panel
   coop_track_panel
   sync_audio_net_panel
   real_guitar_debug_panel
)
{new BandScreen
   game_screen
   (panels GAME_SCREEN_PANELS)
   GAME_SCREEN_HANDLERS
}
{new BandScreen
   h2h_game_screen
   (panels game world_panel h2h_track_panel sync_audio_net_panel)
   GAME_SCREEN_HANDLERS
}
{new RetryAudioPanel
   sync_audio_net_screen_panel
   (my_is_loaded 0)
   (load
      {$this set_volume_offset_symbol voiceover_retry_volume_offset}
      {sync_audio_net_panel start_sync_with_external_block}
      {set [my_is_loaded] 0}
      {if_else {exists beatmatch}
         {beatmatch reset_audio}
         {notify "no beatmatch!"}
      }
   )
   (handle_audio_finished {sync_audio_net_panel clear_external_block})
   (is_loaded
      {unless [my_is_loaded]
         {do
            ($cur {ui current_screen})
            {if {'||' {! $cur} {! {$cur exiting}}}
               {if {sync_audio_net_panel check_is_synced}
                  {set [my_is_loaded] 1}
               }
            }
         }
      }
      [my_is_loaded]
   )
}
{new BandScreen
   restart_sync_audio_net_screen
   (panels)
   (enter
      {overshell set_active_status 0}
      {{gamemode get game_screen} set_showing 0}
      {ui goto_screen sync_audio_net_screen}
   )
}
{new BandScreen
   sync_audio_net_screen
   (panels sync_audio_net_screen_panel)
   (TRANSITION_COMPLETE_MSG
      {{gamemode get game_screen} reenter_screen}
      {overshell set_active_status 3}
      {ui pop_screen {gamemode get game_screen}}
   )
}
{new BandScreen
   vocal_test_screen
   (panels)
   (enter
      {content_mgr start_refresh}
      {set [waiting] 1}
   )
   (poll
      {if {&& [waiting] {content_mgr refresh_done}}
         {set [waiting] 0}
         {ui goto_screen vocal_test_game_screen}
      }
   )
   (waiting 1)
}
{new BandScreen
   vocal_test_game_screen
   (panels game coop_track_panel)
   GAME_SCREEN_HANDLERS
}
{func set_wavdata_song
   ($sym)
   {if_else {has_substr $sym "_short"}
      {do
         ($song)
         {search_replace $sym "_short" "" $song}
         {set $song {symbol $song}}
         {set $force_song_block song_vocals}
         {meta_performer set_song $song}
      }
      {do
         {set $force_song_block song}
         {meta_performer set_song $sym}
      }
   }
}
{new BandScreen
   gen_wavdata_start_screen
   (panels)
   (enter
      {content_mgr start_refresh}
      {set [waiting] 1}
   )
   (poll
      {if {&& [waiting] {content_mgr refresh_done}}
         {set [waiting] 0}
         {set $gen_wavdata_idx 0}
         {set_wavdata_song {elem (GEN_WAVDATA_SONGS) $gen_wavdata_idx}}
         {print
            "GENERATING WAV DATA FOR "
            {elem (GEN_WAVDATA_SONGS) $gen_wavdata_idx}
            "\n"
         }
         {ui goto_screen gen_wavdata_game_screen}
      }
   )
   (waiting 1)
}
{new BandScreen
   gen_wavdata_advance_screen
   (panels coop_track_panel)
   (enter
      {coop_track_panel exit}
      {coop_track_panel set_paused 1}
      {set_wavdata_song {elem (GEN_WAVDATA_SONGS) $gen_wavdata_idx}}
      {print
         "GENERATING WAV DATA FOR "
         {elem (GEN_WAVDATA_SONGS) $gen_wavdata_idx}
         "\n"
      }
      {ui goto_screen gen_wavdata_game_screen}
   )
}
{new BandScreen
   gen_wavdata_game_screen
   (panels game coop_track_panel)
   GAME_SCREEN_HANDLERS
   (gen_wavdata_done
      {'++' $gen_wavdata_idx}
      {if_else {== $gen_wavdata_idx {size (GEN_WAVDATA_SONGS)}}
         {ui goto_screen gen_wavdata_done_screen}
         {ui goto_screen gen_wavdata_advance_screen}
      }
   )
}
{new BandScreen
   gen_wavdata_done_screen
   (panels)
   (enter
      {print "\n\nWAV DATA GENERATION DONE!\n"}
      {exit}
   )
}
{new BandScreen
   vocal_score_song_start_screen
   (panels)
   (enter
      {content_mgr start_refresh}
      {set [waiting] 1}
   )
   (poll
      {if {&& [waiting] {content_mgr refresh_done}}
         {set [waiting] 0}
         {print "VOCAL SCORE SONG FOR " {meta_performer song} "\n"}
         {ui goto_screen vocal_score_song_game_screen}
      }
   )
   (waiting 1)
}
{new BandScreen
   vocal_score_song_game_screen
   (panels game coop_track_panel)
   GAME_SCREEN_HANDLERS
   (vocal_score_song_done {ui goto_screen vocal_score_song_done_screen})
}
{new BandScreen
   vocal_score_song_done_screen
   (panels)
   (enter
      {print "\n\nVOCAL SCORE SONG DONE!\n"}
      {exit}
   )
}
{new UIPanel
   mydta_start_in_game_panel
   (load {content_mgr start_refresh})
   (is_loaded {content_mgr refresh_done})
}
{new BandScreen
   mydta_start_in_game_screen
   (panels mydta_start_in_game_panel)
   (TRANSITION_COMPLETE_MSG {ui goto_screen preloading_screen})
}
{new BandScreen
   mydta_start_practice_in_game_screen
   (panels mydta_start_in_game_panel)
   (TRANSITION_COMPLETE_MSG {ui goto_screen practice_game_screen})
}