#include ../config/macros.dta
#include crowd_audio.dta
#define LIGHTING_CATEGORIES
(intro intro_venue intro_quick win lose verse chorus versechorus freeze blackout_fast blackout_slow dischord flare_fast flare_slow frenzy harmony manual_cool manual_warm searchlights silhouettes silhouettes_spot stomp strobe_fast strobe_slow sweep loop_cool loop_warm win_bre bre)
#define CAMSHOT_CATEGORIES
((#include camera_cats.dta))
#include worldbase.dta
(Tex
   (types
      (sticker
         (editor
            (sizex
               float
               (help
                  "scaling in x"))
            (sizey
               float
               (help
                  "scaling in y"))
            (display_name
               symbol
               (help
                  "display name"))
            (palette_index
               int
               (help
                  "default palette index in the colors list for this sticker"))
            (allow_color
               bool
               (help
                  "can the user apply color to this image?")))
         (sizex 1)
         (sizey 1)
         (display_name '')
         (palette_index 0)
         (allow_color 1))))
(TexRenderer
   (types
      (snapshot
         (editor
            (camshot
               symbol
               (list
                  {do
                     ($array
                        {array
                           (none)})
                     {if
                        [proxy]
                        {[proxy]
                           iterate
                           BandCamShot
                           $obj
                           {push_back
                              $array
                              {symbol
                                 {$obj name}}}}}
                     {sort $array}
                     $array})
               (help
                  "camshot to use for this render to texture")))
         (camshot none)
         (pre_render
            {if
               [camshot]
               {if
                  {!=
                     [camshot]
                     none}
                  {[proxy]
                     force_shot
                     {[proxy]
                        find
                        [camshot]}}}}))))
(CamShot
   (allowed_dirs PanelDir)
   (init
      {$this set category NORMAL})
   (editor
      (category
         symbol
         (list CAMSHOT_CATEGORIES)
         (help
            "Category of the shot"))))
(EventTrigger
   (supported_events
      (start p0_hit p1_hit p2_hit p3_hit cam_cut cam_cut_intro cam_cut_verse cam_cut_chorus cam_cut_solo excitement_boot excitement_bad excitement_okay excitement_great excitement_peak intro_start intro_end kick_drum snare_drum crash_hit bass_hit post_switch_cam music_start game_lost game_won game_won_finale verse chorus bre_success bonus_fx spotlight_bass_on spotlight_bass_off spotlight_drums_on spotlight_drums_off spotlight_guitar_on spotlight_guitar_off spotlight_keyboard_on spotlight_keyboard_off spotlight_vocal_on spotlight_vocal_off lighting_intro lighting_win lighting_lose lighting_verse lighting_chorus lighting_blackout_fast lighting_blackout_slow lighting_dischord lighting_flare_fast lighting_flare_slow lighting_frenzy lighting_harmony lighting_manual_cool lighting_manual_warm lighting_searchlights lighting_silhouettes lighting_stomp lighting_strobe_fast lighting_strobe_slow lighting_sweep lighting_loop_cool lighting_loop_warm lighting_win_bre lighting_bre mode_coop mode_h2hb mode_h2hd mode_h2hg mode_h2hv vignette_start vignette_end))
   (types
      (toggler
         (editor
            (disable
               object
               (class EventTrigger)
               (help
                  "disable this event trigger when I'm triggered"))
            (enable
               object
               (class EventTrigger)
               (help
                  "enable this event trigger when I'm triggered")))
         (disable '')
         (enable '')
         (reset)
         (trigger
            {if
               [disable]
               {script_task
                  1
                  (delay 1.0e-2)
                  (script
                     {[disable]
                        disable})}}
            {if
               [enable]
               {script_task
                  1
                  (delay 1.0e-2)
                  (script
                     {[enable]
                        enable})}}))
      (endgame_action
         (supported_events
            (endgame_swing_drum_0 endgame_swing_drum_1 endgame_swing_drum_2 endgame_swing_drum_3 endgame_swing_drum_4 endgame_swing_bass_0 endgame_swing_bass_1 endgame_swing_bass_2 endgame_swing_bass_3 endgame_swing_bass_4 endgame_swing_guitar_0 endgame_swing_guitar_1 endgame_swing_guitar_2 endgame_swing_guitar_3 endgame_swing_guitar_4 endgame_vocals_none endgame_vocals_low endgame_vocals_medium endgame_vocals_high)))
      (backlight
         (editor
            (tex1
               object
               (class Tex)
               (help
                  "texture for first moving layer"))
            (tex2
               object
               (class Tex)
               (help
                  "texture for second moving layer"))
            (part_tex1
               object
               (class Tex)
               (help
                  "texture for first particle system"))
            (part_tex2
               object
               (class Tex)
               (help
                  "texture for second particle system")))
         (tex1 '')
         (tex2 '')
         (part_tex1 '')
         (part_tex2 '')
         (reset)
         (trigger
            {if
               {exists mat02.mat}
               {mat02.mat
                  set
                  diffuse_tex
                  [tex1]}}
            {if
               {exists mat03.mat}
               {mat03.mat
                  set
                  diffuse_tex
                  [tex2]}}
            {if
               {exists part_mat02.mat}
               {part_mat02.mat
                  set
                  diffuse_tex
                  [part_tex1]}}
            {if
               {exists part_mat03.mat}
               {part_mat03.mat
                  set
                  diffuse_tex
                  [part_tex2]}}))))
(LightPreset
   (init
      {$this set category verse})
   (editor
      (category
         symbol
         (list
            (LIGHTING_CATEGORIES))
         (help
            "Category of the preset")))
   (views
      (flags
         ("category"
            [category])
         ("looping"
            [looping])
         ("manual"
            [manual])
         ("platform_only"
            [platform_only])))
   (types
      (target_animator
         (editor
            (backlight
               object
               (class RndDir)
               (help
                  "backlight object to animate"))
            (backlight_event
               symbol
               (list
                  {do
                     ($array
                        {array
                           (none)})
                     {if
                        [backlight]
                        {[backlight]
                           iterate
                           EventTrigger
                           $obj
                           {push_back
                              $array
                              {symbol
                                 {$obj name}}}}}
                     {sort $array}
                     $array})
               (help
                  "event trigger to fire for this keyframe"))
            (target_1
               (indent
                  (target1
                     object
                     (class Character)
                     (help
                        "target object to animate"))
                  (base1_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (base1_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (base1_speed
                     float
                     (help
                        "speed multiplier"))
                  (base1_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))
                  (add1_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (add1_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (add1_speed
                     float
                     (help
                        "speed multiplier"))
                  (add1_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))))
            (target_2
               (indent
                  (target2
                     object
                     (class Character)
                     (help
                        "target object to animate"))
                  (base2_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (base2_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (base2_speed
                     float
                     (help
                        "speed multiplier"))
                  (base2_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))
                  (add2_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (add2_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (add2_speed
                     float
                     (help
                        "speed multiplier"))
                  (add2_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))))
            (target_3
               (indent
                  (target3
                     object
                     (class Character)
                     (help
                        "target object to animate"))
                  (base3_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (base3_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (base3_speed
                     float
                     (help
                        "speed multiplier"))
                  (base3_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))
                  (add3_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (add3_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (add3_speed
                     float
                     (help
                        "speed multiplier"))
                  (add3_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))))
            (target_4
               (indent
                  (target4
                     object
                     (class Character)
                     (help
                        "target object to animate"))
                  (base4_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (base4_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (base4_speed
                     float
                     (help
                        "speed multiplier"))
                  (base4_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))
                  (add4_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (add4_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (add4_speed
                     float
                     (help
                        "speed multiplier"))
                  (add4_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))))
            (target_5
               (indent
                  (target5
                     object
                     (class Character)
                     (help
                        "target object to animate"))
                  (base5_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (base5_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (base5_speed
                     float
                     (help
                        "speed multiplier"))
                  (base5_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))
                  (add5_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (add5_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (add5_speed
                     float
                     (help
                        "speed multiplier"))
                  (add5_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))))
            (target_6
               (indent
                  (target6
                     object
                     (class Character)
                     (help
                        "target object to animate"))
                  (base6_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (base6_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (base6_speed
                     float
                     (help
                        "speed multiplier"))
                  (base6_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))
                  (add6_anim
                     symbol
                     (list
                        {$this get_clip_names}))
                  (add6_amplitude
                     float
                     (range 0 1)
                     (help
                        "physical scale of animation loop"))
                  (add6_speed
                     float
                     (help
                        "speed multiplier"))
                  (add6_phase
                     float
                     (range 0 1)
                     (help
                        "0 to 1, 0.5 would start the loop half way through"))))
            (test
               script
               (script
                  {$this start_anim})))
         (backlight
            {object ''})
         (backlight_event none)
         (target1
            {object ''})
         (base1_anim still)
         (base1_amplitude 1)
         (base1_speed 1)
         (base1_phase 0)
         (add1_anim still)
         (add1_amplitude 1)
         (add1_speed 1)
         (add1_phase 0)
         (target2
            {object ''})
         (base2_anim still)
         (base2_amplitude 1)
         (base2_speed 1)
         (base2_phase 0)
         (add2_anim still)
         (add2_amplitude 1)
         (add2_speed 1)
         (add2_phase 0)
         (target3
            {object ''})
         (base3_anim still)
         (base3_amplitude 1)
         (base3_speed 1)
         (base3_phase 0)
         (add3_anim still)
         (add3_amplitude 1)
         (add3_speed 1)
         (add3_phase 0)
         (target4
            {object ''})
         (base4_anim still)
         (base4_amplitude 1)
         (base4_speed 1)
         (base4_phase 0)
         (add4_anim still)
         (add4_amplitude 1)
         (add4_speed 1)
         (add4_phase 0)
         (target5
            {object ''})
         (base5_anim still)
         (base5_amplitude 1)
         (base5_speed 1)
         (base5_phase 0)
         (add5_anim still)
         (add5_amplitude 1)
         (add5_speed 1)
         (add5_phase 0)
         (target6
            {object ''})
         (base6_anim still)
         (base6_amplitude 1)
         (base6_speed 1)
         (base6_phase 0)
         (add6_anim still)
         (add6_amplitude 1)
         (add6_speed 1)
         (add6_phase 0)
         (get_clip_names
            {if_else
               [target1]
               {[target1]
                  get_clip_names}
               (still)})
         (enter
            {if
               [backlight]
               {if
                  {!=
                     [backlight_event]
                     none}
                  {unless
                     {[backlight]
                        exists
                        [backlight_event]}
                     {set
                        [backlight_event]
                        none}
                     {notify
                        "invalid backlight event on "
                        {$this name}
                        ", clearing!"}}}})
         (start_anim
            {if
               {&&
                  [backlight]
                  {!=
                     [backlight_event]
                     none}}
               {[backlight]
                  trigger
                  [backlight_event]}}
            {if
               [target1]
               {[target1]
                  play_anim
                  [base1_anim]
                  [base1_amplitude]
                  [base1_speed]
                  [base1_phase]
                  [add1_anim]
                  [add1_amplitude]
                  [add1_speed]
                  [add1_phase]}}
            {if
               [target2]
               {[target2]
                  play_anim
                  [base2_anim]
                  [base2_amplitude]
                  [base2_speed]
                  [base2_phase]
                  [add2_anim]
                  [add2_amplitude]
                  [add2_speed]
                  [add2_phase]}}
            {if
               [target3]
               {[target3]
                  play_anim
                  [base3_anim]
                  [base3_amplitude]
                  [base3_speed]
                  [base3_phase]
                  [add3_anim]
                  [add3_amplitude]
                  [add3_speed]
                  [add3_phase]}}
            {if
               [target4]
               {[target4]
                  play_anim
                  [base4_anim]
                  [base4_amplitude]
                  [base4_speed]
                  [base4_phase]
                  [add4_anim]
                  [add4_amplitude]
                  [add4_speed]
                  [add4_phase]}}
            {if
               [target5]
               {[target5]
                  play_anim
                  [base5_anim]
                  [base5_amplitude]
                  [base5_speed]
                  [base5_phase]
                  [add5_anim]
                  [add5_amplitude]
                  [add5_speed]
                  [add5_phase]}}
            {if
               [target6]
               {[target6]
                  play_anim
                  [base6_anim]
                  [base6_amplitude]
                  [base6_speed]
                  [base6_phase]
                  [add6_anim]
                  [add6_amplitude]
                  [add6_speed]
                  [add6_phase]}})
         (on_set_frame
            {if
               [backlight]
               {if
                  {exists backlight_color1.env}
                  {[backlight]
                     set
                     color1
                     {backlight_color1.env get ambient_color}}}
               {if
                  {exists backlight_color2.env}
                  {[backlight]
                     set
                     color2
                     {backlight_color2.env get ambient_color}}}
               {if
                  {exists backlight_color3.env}
                  {[backlight]
                     set
                     color3
                     {backlight_color3.env get ambient_color}}}
               {[backlight]
                  update}}))))
(Object
   (types
      (vignette_hints
         (player0_hint '')
         (player1_hint '')
         (player2_hint '')
         (player3_hint '')
         (editor
            (player0_hint
               symbol
               (list VIGNETTE_HINT_LIST)
               (help
                  "player0 hint, if player0 taps the mic, you set it to 'mic' to make player0 be the human (or ai) on mic.  importance1 is most important, and will get the human, in decreasing order to importance4, who will be the ai, if any"))
            (player1_hint
               symbol
               (list VIGNETTE_HINT_LIST)
               (help
                  "player1 hint, if player1 taps the mic, you set it to 'mic' to make player1 be the human (or ai) on mic.  importance1 is most important, and will get the human, in decreasing order to importance4, who will be the ai, if any"))
            (player2_hint
               symbol
               (list VIGNETTE_HINT_LIST)
               (help
                  "player2 hint, if player2 taps the mic, you set it to 'mic' to make player2 be the human (or ai) on mic.  importance1 is most important, and will get the human, in decreasing order to importance4, who will be the ai, if any"))
            (player3_hint
               symbol
               (list VIGNETTE_HINT_LIST)
               (help
                  "player3 hint, if player3 taps the mic, you set it to 'mic' to make player3 be the human (or ai) on mic.  importance1 is most important, and will get the human, in decreasing order to importance4, who will be the ai, if any"))))))
(ObjectDir
   (types
      (song
         #ifdef HX_PC
         #else
         (change_subdir
            ($file)
            {if_else
               {&&
                  {exists game}
                  {has_substr
                     $file
                     ":"}}
               {cond
                  ({has_substr
                        $file
                        "/world/shared/director.milo"}
                     "world/shared/director.milo")
                  "stream_cache"}
               kDataUnhandled})
         #endif)))
(RndDir
   (types
      (chars VENUE_SETUP_CHARACTERS)
      (lighting VENUE_SETUP_CHARACTERS)
      (band_name_label
         (enter
            {if
               {exists game}
               {$this
                  iterate
                  BandLabel
                  $lbl
                  {if
                     {has_substr
                        {$lbl name}
                        "bandname"}
                     {if
                        {&&
                           {exists tour}
                           {tour band}}
                        {$lbl
                           set_localized
                           {gamemode get band_name}}}}}
               {if
                  {&&
                     {exists tour}
                     {tour band}}
                  {set
                     $logopatch
                     {gamemode get band_logo}}
                  {unless
                     $logopatch
                     {if
                        {&&
                           {exists bandlogo_default.tex}
                           {exists bandlogo_target.tex}}
                        {bandlogo_target.tex
                           iterate_refs
                           $ref
                           {$ref set diffuse_tex bandlogo_default.tex}}}}}}))
      (color_passthrough
         (editor
            (color1 color)
            (color2 color)
            (color3 color)
            (update
               script
               (script
                  {$this update})))
         (color1
            {pack_color 1 1 1}
            proxy_save)
         (color2
            {pack_color 1 1 1}
            proxy_save)
         (color3
            {pack_color 1 1 1}
            proxy_save)
         (enter
            {$this update})
         (update
            {if
               {exists mat01.mat}
               {mat01.mat
                  set
                  color
                  [color1]}}
            {if
               {exists mat02.mat}
               {mat02.mat
                  set
                  color
                  [color2]}}
            {if
               {exists mat03.mat}
               {mat03.mat
                  set
                  color
                  [color3]}}
            {if
               {exists part_mat02.mat}
               {part_mat02.mat
                  set
                  color
                  [color2]}}
            {if
               {exists part_mat03.mat}
               {part_mat03.mat
                  set
                  color
                  [color3]}})
         (trigger
            ($event)
            {handle
               ($event trigger)}))))
(Fur
   (init
      {do
         ($ww
            {find_obj
               {$this dir}
               world.wind})
         {if
            $ww
            {set
               [wind]
               $ww}}}))
(WorldCrowd
   (init
      {$this set_type band})
   (types
      (band
         #include crowd.dta)))
#define SIMULATE_BUTTONS
((simulate
      script
      (script
         {set $world_simulate 1}
         {$this enter})
      (help
         "simulate the world or not, remember to set Milo camera view to world.cam to see it properly"))
   (unsimulate
      script
      (script
         {set $world_simulate 0}
         {$this enter})
      (help
         "simulate the world or not")))
#define SET_VIGNETTE_TARGET_DEFAULTS
({$shot
      set
      (targets 0 to pitch)
      0.0}
   {$shot
      set
      (targets 0 to roll)
      0.0}
   {$shot
      set
      (targets 0 to yaw)
      0.0}
   {$shot
      set
      (targets 0 to x_scale)
      1.0}
   {$shot
      set
      (targets 0 to y_scale)
      1.0}
   {$shot
      set
      (targets 0 to z_scale)
      1.0}
   {$shot
      set
      (targets 0 to x)
      0.0}
   {$shot
      set
      (targets 0 to y)
      0.0}
   {$shot
      set
      (targets 0 to z)
      0.0}
   {$shot
      set
      (targets 0 teleport)
      1})
#define SHELL_WORLD_DIR
((editor
      (postprocess
         object
         (class PostProc)
         (help
            "Post process object to use when this panel is on screen")
         (post_sync
            {$this update_postproc}))
      (refresh_postproc
         script
         (script
            {$this update_postproc})
         (help
            "Refresh postprocessor selection on the tool")))
   (postprocess '')
   (update_postproc
      {if
         $edit_mode
         {if_else
            [postprocess]
            {[postprocess]
               select}
            {rnd reset_postproc}}}))
(WorldDir
   (types
      (world
         (venue arena_01)
         (song '')
         (editor
            (venue
               symbol
               (list
                  {file_list
                     "world/venue/*/*/*.milo"
                     1
                     $path
                     {do
                        ($v
                           {file_get_base $path})
                        {has_substr
                           $path
                           {sprint
                              $v
                              "/"
                              $v
                              ".milo"}}}})
               (help
                  "Venue to load, set before hitting load_song"))
            (song
               symbol
               (list
                  {if_else
                     {exists fake_songmgr}
                     {fake_songmgr get_song_list}
                     ('')})
               (help
                  "choose a song to preview"))
            (edit_song_anim
               script
               (script
                  {if_else
                     {exists song.anim}
                     {milo edit song.anim PropAnim}
                     {notify
                        "Could not edit song.anim, no song loaded"}})
               (help
                  "Pop open the song.anim editor"))
            (load_song
               script
               (script
                  {$this load_and_play_song})
               (help
                  "Load up the the venue(s)+scene(s)+song authoring as dictated by the currently selected milo song"))
            (save_song
               script
               (script
                  {$banddirector save_song})
               (help
                  "Save the song authoring back into its song file!"))
            (change_play_mode
               script
               (script
                  {if_else
                     $bandwardrobe
                     {milo edit $bandwardrobe BandWardrobe}
                     {notify
                        "Can not change play_mode, no song loaded"}})
               (help
                  "Change the play_mode by editing bandwardrobe"))
            (copy_to_bg
               script
               (script
                  {if_else
                     $banddirector
                     {$banddirector copy_cats coop_bg}
                     {notify
                        "Can not copy to bg, no song loaded"}})
               (help
                  "Copies shot_5 track to shot_bg track, remapping invalid shot categories"))
            (copy_to_bk
               script
               (script
                  {if_else
                     $banddirector
                     {$banddirector copy_cats coop_bk}
                     {notify
                        "Can not copy to bg, no song loaded"}})
               (help
                  "Copies shot_5 track to shot_bk track, remapping invalid shot categories"))
            (copy_to_gk
               script
               (script
                  {if_else
                     $banddirector
                     {$banddirector copy_cats coop_gk}
                     {notify
                        "Can not copy to bg, no song loaded"}})
               (help
                  "Copies shot_5 track to shot_gk track, remapping invalid shot categories"))
            (edit_bandwardrobe
               script
               (script
                  {if_else
                     $bandwardrobe
                     {milo edit $bandwardrobe}
                     {notify
                        "Could not edit bandwardobe, no venue loaded"}})
               (help
                  "Pop open the BandWardrobe editor")))
         (load_and_play_song
            {$banddirector
               load_venue
               [venue]}
            {$banddirector
               load_song
               {fake_songmgr
                  get_path
                  [song]
                  ".milo"}
               {fake_songmgr
                  get_data
                  [song]
                  genre}
               {fake_songmgr
                  get_data
                  [song]
                  anim_tempo}
               1}
            {do
               ($song_obj
                  {milo song_object})
               {if
                  $song_obj
                  {$song_obj
                     set
                     song
                     [song]}
                  {milo
                     set
                     anim
                     {milo song_object}}}}
            {{{$banddirector get merger}
                  dir}
               enter})
         (on_milo_loaded
            {milo
               edit
               $this
               "Object Type"})
         WORLD_OBJECT_BASE
         (autosave 0)
         (select_camera
            {if
               $banddirector
               {handle
                  ($banddirector select_camera)}})
         (sync_objects
            {if
               {exists session_mgr}
               {$this
                  camera_random_seed
                  {session_mgr get_net_random_seed}}})
         (post_tool_sync
            {$this enter}))
      (venue
         VENUE_SETUP_CHARACTERS
         (editor WORLD_EDITOR_COMMON)
         WORLD_OBJECT_VALIDATE
         (setup_midi_parsers
            {{$banddirector get_world}
               add_sink
               $this
               ()
               3}
            {foreach
               $parser
               WORLD_MIDI_PARSERS
               {handle
                  ({elem $parser 0}
                     add_sink
                     $this
                     ()
                     {elem $parser 1})}})
         (remove_midi_parsers
            {{$banddirector get_world}
               remove_sink
               $this}
            {foreach
               $parser
               WORLD_MIDI_PARSERS
               {handle
                  ({elem $parser 0}
                     remove_sink
                     $this)}}))
      (scene
         VENUE_SETUP_CHARACTERS
         (editor))
      (shell SHELL_WORLD_DIR)
      (closet
         (enter
            {if
               $bandwardrobe
               {$bandwardrobe
                  enter_closet
                  $this
                  {if_else
                     {exists closet_panel}
                     {{closet_panel get_user}
                        get_slot_num}
                     0}}})
         (exit
            {handle
               ($bandwardrobe exit_closet $this)})
         SHELL_WORLD_DIR)
      (vignette_shell
         (scene0 '')
         (postprocess
            {object ''})
         (editor
            SIMULATE_BUTTONS
            (scene0
               object
               (class WorldDir)
               (help
                  "the vignette scene to loop"))
            (edit_lipsync
               script
               (script
                  {do
                     ($clips
                        {find_obj
                           [scene0]
                           clips})
                     {if_else
                        $clips
                        {milo
                           edit
                           $clips
                           "Object List"}
                        {notify
                           "No clips to edit"}}})
               (help
                  "pop open directory with lipsync objects"))
            (save_and_preview_lipsync
               script
               (script
                  {if_else
                     [scene0]
                     {[scene0]
                        preview_lipsync
                        1}
                     {notify
                        "No scene to preview!"}})
               (help
                  "save and preview lipsync PropAnim changes")))
         (enter
            {if
               {exists game}
               {set $world_simulate 1}}
            {if
               $world_simulate
               {if_else
                  {exists world.cam}
                  {set
                     [cam]
                     world.cam}
                  {notify
                     "can not find world.cam!"}}
               {if
                  {== $this $world}
                  {$this kick_scene}}})
         (exit
            {handle
               ([scene0]
                  vignette_end)})
         (kick_scene
            {if
               [scene0]
               {$bandwardrobe
                  enter_vignette
                  [scene0]}
               {handle_type
                  ($this next_camera)}
               {handle
                  ([scene0]
                     vignette_start)}})
         (next_camera
            {handle_type
               ([scene0]
                  force_camera
                  $this)}))
      (vignette_transition
         (trans0 '')
         (trans1 '')
         (trans2 '')
         (trans3 '')
         (trans4 '')
         (trans5 '')
         (trans6 '')
         (trans7 '')
         (trans8 '')
         (trans9 '')
         (trans10 '')
         (trans11 '')
         (trans12 '')
         (trans13 '')
         (trans14 '')
         (trans15 '')
         (trans16 '')
         (trans17 '')
         (trans18 '')
         (trans19 '')
         (trans_index -1)
         (postprocess
            {object ''})
         (editor
            SIMULATE_BUTTONS
            (trans0
               object
               (class WorldDir)
               (help
                  "transition 0"))
            (trans1
               object
               (class WorldDir)
               (help
                  "transition 1"))
            (trans2
               object
               (class WorldDir)
               (help
                  "transition 2"))
            (trans3
               object
               (class WorldDir)
               (help
                  "transition 3"))
            (trans4
               object
               (class WorldDir)
               (help
                  "transition 4"))
            (trans5
               object
               (class WorldDir)
               (help
                  "transition 5"))
            (trans6
               object
               (class WorldDir)
               (help
                  "transition 6"))
            (trans7
               object
               (class WorldDir)
               (help
                  "transition 7"))
            (trans8
               object
               (class WorldDir)
               (help
                  "transition 8"))
            (trans9
               object
               (class WorldDir)
               (help
                  "transition 9"))
            (trans10
               object
               (class WorldDir)
               (help
                  "transition 10"))
            (trans11
               object
               (class WorldDir)
               (help
                  "transition 11"))
            (trans12
               object
               (class WorldDir)
               (help
                  "transition 12"))
            (trans13
               object
               (class WorldDir)
               (help
                  "transition 13"))
            (trans14
               object
               (class WorldDir)
               (help
                  "transition 14"))
            (trans15
               object
               (class WorldDir)
               (help
                  "transition 15"))
            (trans16
               object
               (class WorldDir)
               (help
                  "transition 16"))
            (trans17
               object
               (class WorldDir)
               (help
                  "transition 17"))
            (trans18
               object
               (class WorldDir)
               (help
                  "transition 18"))
            (trans19
               object
               (class WorldDir)
               (help
                  "transition 19"))
            (trans_index
               int
               (help
                  "which one I'm on right now")))
         (enter
            {if
               {exists game}
               {set $world_simulate 1}}
            {if
               $world_simulate
               {if_else
                  {exists world.cam}
                  {set
                     [cam]
                     world.cam}
                  {notify
                     "can not find world.cam!"}}}
            {$this
               do_transition
               {if_else
                  {&&
                     {== $this $world}
                     $world_simulate}
                  0
                  -1}})
         (get_trans
            ($which)
            {if_else
               {&&
                  {<= $which 19}
                  {>= $which 0}}
               {do
                  ($prop
                     {symbol
                        {sprint
                           "trans"
                           $which}})
                  [$prop]}
               {object ''}})
         (next_camera
            {do
               ($which
                  {'+'
                     [trans_index]
                     1})
               ($trans
                  {$this get_trans $which})
               ($last_trans
                  {$this
                     get_trans
                     {- $which 1}})
               {handle
                  ($last_trans vignette_end)}
               {if_else
                  $trans
                  {$this do_transition $which}
                  {if_else
                     {exists game}
                     {ui transition_camshot_done}
                     {do
                        {set
                           [trans_index]
                           -1}
                        {set $world_simulate 0}
                        {$this enter}}}}})
         (do_transition
            ($which)
            {set
               [trans_index]
               $which}
            {foreach_int
               $i
               0
               20
               {do
                  ($trans
                     {$this get_trans $i})
                  {if
                     $trans
                     {$trans set showing 0}}}}
            {do
               ($scene
                  {$this get_trans $which})
               ($cam '')
               {if
                  $scene
                  {$bandwardrobe enter_vignette $scene}
                  {handle_type
                     ($scene force_camera $this)}
                  {handle
                     ($scene vignette_start)}}}))
      (vignette_scene
         (on_milo_loaded
            {milo
               edit
               $this
               "Object Type"})
         (validate
            {unless
               {find_obj $this player_hints.obj}
               {notify
                  {path_name $this}
                  "vignette_scene needs player_hints set, use the set_player_hints button"}})
         (vignette_start
            {set
               [cam]
               world.cam}
            {set
               [showing]
               1}
            kDataUnhandled)
         (force_camera
            ($wrld)
            {do
               ($cam
                  {$this find_shot vignette})
               {if_else
                  $cam
                  {do
                     {if
                        {==
                           {$wrld get_type}
                           vignette_transition}
                        {$cam set looping 0}}
                     {$wrld force_shot $cam}
                     {$wrld
                        set
                        postprocess
                        {$cam get postprocess}}}
                  {notify
                     {path_name $this}
                     " scene could not find camshot!\n"}}})
         (enter
            {unless
               {$this is_proxy}
               {if_else
                  $bandwardrobe
                  {$bandwardrobe enter_vignette $this}
                  {notify
                     {path_name $this}
                     " does not subdir vignette_chars, it must!"}}
               {if_else
                  $world_simulate
                  {do
                     {handle_type
                        ($this force_camera $this)}
                     {handle
                        ($this vignette_start)}}
                  {handle
                     ($this vignette_end)}}})
         (exit)
         (add_shot_target
            ($shot $char)
            {if
               {exists $char}
               {set
                  $charGrp
                  {find_obj $this clips $char}}
               {if_else
                  $charGrp
                  {do
                     {$shot
                        insert
                        (targets 0)
                        ()}
                     {$shot
                        set
                        (targets 0 target)
                        $char}
                     SET_VIGNETTE_TARGET_DEFAULTS
                     {$shot
                        set
                        (targets 0 teleport)
                        1}
                     {$shot
                        set
                        (targets 0 anim_group)
                        {sprint $char}}}
                  {do
                     {$shot
                        insert
                        (hide_list 0)
                        $char}}}})
         (auto_setup_vignette
            {do
               ($shot
                  "")
               {if_else
                  {==
                     {$this get_path_name}
                     ""}
                  {notify
                     "This is a new file - please save it and reload in milo before running this!"}
                  {do
                     {unless
                        {exists player0}
                        {$this
                           insert
                           (subdirs 0)
                           "world/shared/vignette_chars.milo"}}
                     {set
                        $clipsPath
                        {sprint
                           {file_get_path
                              {$this get_path_name}}
                           "/"
                           {file_get_base
                              {$this get_path_name}}
                           "_clips.milo"}}
                     {unless
                        {exists clips}
                        {if_else
                           {file_exists $clipsPath}
                           {do
                              {set
                                 $clipsDir
                                 {new CharClipSet}}
                              {$clipsDir
                                 set_name
                                 "clips"
                                 $this}
                              {$clipsDir set proxy_file $clipsPath}
                              {milo invalidate_listers_and_trees}
                              {milo update_objects}}
                           {do
                              {set
                                 $newDir
                                 {new CharClipSet}}
                              {$newDir
                                 set_name
                                 "clips"
                                 $this}
                              {$newDir perforce_save $clipsPath}
                              {print
                                 "creating new clipset in P4: "
                                 $clipsPath
                                 "\n"}
                              {$newDir set proxy_file $clipsPath}
                              {milo invalidate_listers_and_trees}
                              {milo update_objects}}}}
                     {set
                        $shot
                        ""}
                     {set $num_shots 0}
                     {$this
                        iterate_self
                        BandCamShot
                        $s
                        {set $shot $s}
                        {set
                           $num_shots
                           {'+' $num_shots 1}}}
                     {if
                        {==
                           $shot
                           ""}
                        {set
                           $shot
                           {new BandCamShot}}
                        {$shot
                           set_name
                           "BandCamShot.shot"
                           $this}
                        {$shot
                           insert
                           (keyframes 0)
                           ()}
                        {$shot
                           set
                           (keyframes 0 duration)
                           80.0}
                        {milo invalidate_listers_and_trees}
                        {milo update_objects}}
                     {set
                        $spotDrawer
                        ""}
                     {$this
                        iterate_self
                        SpotlightDrawer
                        $d
                        {set $spotDrawer $d}}
                     {unless
                        {==
                           $spotDrawer
                           ""}
                        {set
                           [spotlight_drawer]
                           $spotDrawer}}
                     {set
                        $windObj
                        ""}
                     {$this
                        iterate_self
                        Wind
                        $w
                        {set $windObj $w}}
                     {if
                        {==
                           $windObj
                           ""}
                        {set
                           $windObj
                           {new Wind}}
                        {$windObj
                           set_name
                           "Wind.wind"
                           $this}}
                     {set
                        $postProc
                        ""}
                     {$this
                        iterate_self
                        PostProc
                        $p
                        {set $postProc $p}}
                     {$this
                        iterate_self
                        BandCamShot
                        $shot
                        {$shot
                           set
                           category
                           "vignette"}
                        {$shot set_type band3}
                        {if
                           {&&
                              {exists clips}
                              {==
                                 {$shot
                                    size
                                    (keyframes)}
                                 1}}
                           {set $clipLength 80}
                           {clips
                              iterate_self
                              CharClip
                              $clip
                              {set
                                 $clipLength
                                 {$clip get length_beats}}}
                           {$shot
                              set
                              (keyframes 0 duration)
                              $clipLength}}
                        {unless
                           {==
                              $postProc
                              ""}
                           {$shot set postprocess $postProc}}
                        {while
                           {$shot
                              size
                              (targets)}
                           {$shot
                              remove
                              (targets 0)}}
                        {while
                           {$shot
                              size
                              (hide_list)}
                           {$shot
                              remove
                              (hide_list 0)}}
                        {foreach_int
                           $i
                           0
                           4
                           {$this
                              add_shot_target
                              $shot
                              {symbol
                                 {sprint
                                    "player"
                                    $i}}}}
                        {foreach_int
                           $i
                           0
                           16
                           {$this
                              add_shot_target
                              $shot
                              {symbol
                                 {sprint
                                    "crowd"
                                    $i}}}}}}}})
         (preview_lipsync
            ($save)
            {if
               {exists clips}
               {$bandwardrobe enter_vignette $this}
               {if
                  $save
                  {clips perforce_resave}}})
         (editor
            SIMULATE_BUTTONS
            (setup_vignette
               script
               (script
                  {$this auto_setup_vignette})
               (help
                  "makes sure this milo file meets vignette requirements (sets up BandCamShot, etc.)"))
            (setup_ao
               script
               (script
                  {set
                     $log
                     ""}
                  {unless
                     {==
                        {$this get inline_subdir}
                        kInlineAlways}
                     {$this set inline_subdir kInlineAlways}
                     {milo save}
                     {set
                        $log
                        {sprint
                           $log
                           "setup inlining!\n"}}}
                  {if_else
                     {has_substr
                        {$this get_path_name}
                        "_ao.milo"}
                     {notify
                        "This IS the AO file, only run this on scene file itself"}
                     {do
                        {set
                           $aoFile
                           {$this get_path_name}}
                        {search_replace
                           $aoFile
                           ".milo"
                           "_ao.milo"
                           $aoFile}
                        {unless
                           {file_exists $aoFile}
                           {set
                              $subdirPath
                              {$this get_path_name}}
                           {set
                              $aoName
                              {sprint
                                 {file_get_base
                                    {$this get_path_name}}
                                 "_ao"}}
                           {milo_recurse_pattern
                              $dir
                              "test/world/vignette/ao_template.milo"
                              {with
                                 $dir
                                 {$this set_name $aoName $this}
                                 {$this
                                    insert
                                    (subdirs 0)
                                    $subdirPath}
                                 {$this set cam world.cam}
                                 {$this perforce_save $aoFile}}}
                           {set
                              $log
                              {sprint
                                 $log
                                 "created ao file: "
                                 $aoFile
                                 "\n"}}}
                        {if_else
                           {==
                              $log
                              ""}
                           {notify
                              "AO was already setup correctly!"}
                           {notify
                              {sprint
                                 "AO setup complete.  Did the following:\n"
                                 $log}}}}})
               (help
                  "Sets up inlines, creates _ao file if necessary, and fixes up any top-level files still referencing the non-AO file"))
            (edit_lipsync
               script
               (script
                  {if
                     {exists clips}
                     {milo
                        edit
                        clips
                        "Object List"}})
               (help
                  "pop open directory with lipsync objects"))
            (save_lipsync
               script
               (script
                  {$this preview_lipsync 1})
               (help
                  "save and preview lipsync PropAnim changes"))
            (preview_lipsync
               script
               (script
                  {$this preview_lipsync 0})
               (help
                  "Just preview lipsync PropAnim changes"))
            (create_face_cams
               script
               (script
                  {foreach
                     $p
                     (player0 player1 player2 player3)
                     {if
                        {exists $p}
                        {set
                           $tpName
                           {sprint
                              {$p name}
                              "_head.tp"}}
                        {if_else
                           {!
                              {exists $tpName}}
                           {do
                              {set
                                 $tp
                                 {new TransProxy}}
                              {$tp set_name $tpName $this}
                              {$tp set proxy $p}
                              {$tp
                                 set
                                 part
                                 "bone_head.mesh"}
                              {set
                                 $newCam
                                 {new Cam}}
                              {set
                                 $camName
                                 {sprint
                                    {$p name}
                                    "_head.cam"}}
                              {$newCam set_name $camName $this}
                              {$newCam set_trans_parent $tp}
                              {$newCam set_local_pos 0 40 0}
                              {$newCam set_local_rot 0 -90 180}
                              {milo update_objects}}
                           {do
                              {set
                                 $camName
                                 {sprint
                                    {$p name}
                                    "_head.cam"}}
                              {if
                                 {exists $camName}
                                 {$camName set_local_pos 0 40 0}
                                 {$camName set_local_rot 0 -90 180}}}}}}))
            (set_player_hints
               script
               (help
                  "Set hints for which user/instrument should be assigned to each player, importance1 is MOST important, importance4 is least.  Humans are more important than AIs")
               (script
                  {unless
                     {exists player_hints.obj}
                     {do
                        ($obj
                           {new Object})
                        {$obj set_name player_hints.obj $this}
                        {$obj set_type vignette_hints}}}
                  {print
                     "obj is now player_hints.obj and dir is "
                     {player_hints.obj dir}
                     "\n"}
                  {milo
                     edit
                     player_hints.obj
                     "Object Type"})))
         (postprocess
            {object ''}))))
#define HIDE_DIRCUT
((hide
      {has_substr
         [category]
         "directed_"}))
#define SHOW_DIRCUT
((hide
      {!
         {has_substr
            [category]
            "directed_"}}))
#define SHOW_COOP
((hide
      {has_substr
         [category]
         "h2h"}))
(BandCamShot
   (init
      {do
         ($pn
            {if_else
               {$this dir}
               {{$this dir}
                  get_path_name}
               ""})
         {cond
            ({has_substr
                  $pn
                  "/vignette/"}
               {$this set_type band3}
               {set
                  [category]
                  TEST_CAM}
               {do
                  ($count 0)
                  {foreach
                     $char
                     (player0 player1 player2 player3)
                     {if
                        {exists $char}
                        {$this
                           add_target
                           {object $char}}
                        {set
                           [targets $count teleport]
                           0}
                        {set
                           [targets $count return]
                           1}
                        {'++' $count}}}})
            ({has_substr
                  $pn
                  "/world/meta/closet"}
               {$this set_type closet}
               {set
                  [category]
                  TEST_CAM})
            ({has_substr
                  $pn
                  "/ui/"}
               {set
                  [category]
                  TEST_CAM}
               {eval 0})
            ({has_substr
                  $pn
                  "/venue/"}
               {$this set_type band}
               {set
                  [category]
                  TEST_CAM}
               {set
                  [flags]
                  {'|' 3843 4096 1048576 2097152 4194304}})}})
   (editor
      (store
         script
         (script
            {if_else
               {&&
                  $bandwardrobe
                  {==
                     {$this get_type}
                     band}}
               {do
                  ($old
                     {$bandwardrobe get shot_set_play_mode})
                  {$bandwardrobe set shot_set_play_mode 0}
                  {$this store}
                  {$bandwardrobe set shot_set_play_mode $old}}
               {$this store}})))
   (types
      (band
         (editor
            (flags
               (struct
                  (BIT_kBCSBFacingNull
                     bool
                     (post_sync
                        {$this radio 4096 28672})
                     (help
                        "no facing, center facing, or behind")
                     (refresh flags)
                     (alias facing_null))
                  (BIT_kBCSBFacingLeft
                     bool
                     (post_sync
                        {$this radio 8192 28672})
                     (help
                        "shot from the left")
                     (refresh flags)
                     (alias facing_left))
                  (BIT_kBCSBFacingRight
                     bool
                     (post_sync
                        {$this radio 16384 28672})
                     (help
                        "shot from the right")
                     (refresh flags)
                     (alias facing_right))
                  (BIT_kValidMale
                     bool
                     (help
                        "valid shot for male")
                     (alias valid_male)
                     SHOW_DIRCUT)
                  (BIT_kValidFemale
                     bool
                     (help
                        "valid shot for female")
                     (alias valid_female)
                     SHOW_DIRCUT)
                  (BIT_kValidBanger
                     bool
                     (help
                        "valid shot for banger")
                     (alias valid_banger)
                     SHOW_DIRCUT)
                  (BIT_kValidDramatic
                     bool
                     (help
                        "valid shot for dramatic")
                     (alias valid_dramatic)
                     SHOW_DIRCUT)
                  (BIT_kValidRocker
                     bool
                     (help
                        "valid shot for rocker")
                     (alias valid_rocker)
                     SHOW_DIRCUT)
                  (BIT_kValidSpazz
                     bool
                     (help
                        "valid shot for spazz")
                     (alias valid_spazz)
                     SHOW_DIRCUT)
                  (BIT_kBCSBBassFocus
                     bool
                     (help
                        "does this shot focus on bass")
                     (alias bass_focus)
                     SHOW_DIRCUT)
                  (BIT_kBCSBDrumFocus
                     bool
                     (help
                        "does this shot focus on drums")
                     (alias drum_focus)
                     SHOW_DIRCUT)
                  (BIT_kBCSBGuitarFocus
                     bool
                     (help
                        "does this shot focus on guitar")
                     (alias guitar_focus)
                     SHOW_DIRCUT)
                  (BIT_kBCSBMicFocus
                     bool
                     (help
                        "does this shot focus on vocals")
                     (alias vocal_focus)
                     SHOW_DIRCUT)
                  (BIT_kBCSBKeyboardFocus
                     bool
                     (help
                        "does this shot focus on keyboard")
                     (alias keyboard_focus)
                     SHOW_DIRCUT)
                  (BIT_kBCSBCoopBG
                     bool
                     (help
                        "valid for coop_bg")
                     (alias valid_bg)
                     SHOW_COOP)
                  (BIT_kBCSBCoopBK
                     bool
                     (help
                        "valid for coop_bk")
                     (alias valid_bk)
                     SHOW_COOP)
                  (BIT_kBCSBCoopGK
                     bool
                     (help
                        "valid for coop_gk")
                     (alias valid_gk)
                     SHOW_COOP)))
            (crowd_density
               float
               (range 0 1)
               (help
                  "density of crowd"))
            (crowd_lod
               int
               (range 0 2)
               (help
                  "LOD of crowd texture (0 =  256x512) (1 = 128x256) (2 = 64x128)"))
            (crowd_face_camera
               bool
               (help
                  "Whether the crowd should face the camera"))
            (crowd_anim
               symbol
               (list
                  ('' bad great idle ok carry_surfer crowd_reaching crowdlove headbang realtime_idle intro_specific))
               (help
                  "Crowd animation to play, overrides normal excitement level"))
            (postprocess
               object
               (class PostProc)
               (help
                  "Post process object to use for this shot"))
            (lighting_preset
               object
               (class LightPreset)
               (help
                  "light preset to fire for this camera only, only use in special cases, lighting override must be on, goes back to normal lighting when the shot is done!"))
            (lighting_category
               symbol
               (list
                  ('' LIGHTING_CATEGORIES))
               (help
                  "Permanently change the lighting category, lighting override must be on with no preset selected."))
            (worst
               bool
               (help
                  "When using -worst_only with venuetest, only looks at these shots")))
         (start_shot
            {if
               $banddirector
               {$banddirector
                  set
                  cam_postproc
                  [postprocess]}}
            {if
               $bandwardrobe
               {$bandwardrobe start_venue_shot $this}}
            {foreach_int
               $idx
               0
               {size
                  [crowds]}
               {do
                  ($crowd
                     [crowds $idx crowd])
                  {if
                     $crowd
                     {$crowd
                        override_anim
                        [crowd_anim]}
                     {$crowd crowd_update}
                     {$crowd
                        set
                        rotate
                        [crowd_face_camera]}
                     {$crowd
                        set_fullness
                        [crowd_density]
                        [crowd_density]}
                     {$crowd
                        set
                        lod
                        [crowd_lod]}}}}
            #ifndef _SHIP
            {$this update_overlay}
            #endif)
         (update_overlay
            #ifndef _SHIP
            {rnd
               reflect
               camera
               {print
                  "BandCamShot:"
                  {$this name}
                  " category:"
                  [category]
                  "\n"}}
            #endif)
         (play_group
            ($char $grp $fwd $units $event)
            {if_else
               {'||'
                  {==
                     {$char get_type}
                     extras}
                  {==
                     {$char get_type}
                     crowd}}
               {if
                  $grp
                  {{$char find main.drv}
                     play_group
                     $grp
                     {'|' 2 64}}}
               {$char play_group $grp 1 0 $fwd $units $event}})
         (shot_over
            {if
               $banddirector
               {$banddirector shot_over $this}
               {if
                  {exists game}
                  {switch
                     [category]
                     ((LOSE WIN WIN_QUICK)
                        {handle
                           (game game_outro)})
                     ((INTRO INTRO_VENUE INTRO_QUICK INTRO_MULTI)
                        {$banddirector pick_new_shot})
                     ((OUTRO_MULTI OUTRO)
                        {$banddirector
                           set_dircut
                           [category]})}}})
         (stop_shot
            {if
               $banddirector
               {$banddirector
                  set
                  cam_postproc
                  {object
                     ""}}})
         (teleport_char
            ($char $ret)
            {unless
               {'||'
                  {==
                     {$char get_type}
                     extras}
                  {==
                     {$char get_type}
                     crowd}}
               {$char cam_teleport $ret}})
         (find_target
            ($targ $anonymous)
            {if_else
               $bandwardrobe
               {if_else
                  $anonymous
                  {$bandwardrobe find_target $targ}
                  {$bandwardrobe find_target $targ $this}}
               kDataUnhandled})
         (list_targets
            {do
               ($list
                  {object_list
                     {$this dir}
                     Trans
                     1})
               {if
                  $bandwardrobe
                  {$bandwardrobe sort_targets $list}}
               {foreach
                  $p
                  (player0 player1 player2 player3)
                  {remove_elem $list $p}}
               {insert_elems
                  $list
                  1
                  (player_bass0 player_drum0 player_guitar0 player_vocals0 player_keyboard0)}
               $list})
         (list_anim_groups
            ($targ)
            {if_else
               $bandwardrobe
               {$bandwardrobe list_venue_anim_groups $targ $this}
               kDataUnhandled})
         (worst 0)
         (postprocess
            {object ''})
         (crowd_density 1)
         (crowd_lod 0)
         (crowd_face_camera 0)
         (crowd_anim '')
         (lighting_preset
            {object ''})
         (lighting_category ''))
      (band3
         (editor
            (postprocess
               object
               (class PostProc)
               (help
                  "Post process object to use for this shot"))
            (crowd_density
               float
               (range 0 1)
               (help
                  "density of crowd"))
            (crowd_lod
               int
               (range 0 2)
               (help
                  "LOD of crowd texture (0 =  256x512) (1 = 128x256) (2 = 64x128)"))
            (crowd_face_camera
               bool
               (help
                  "Whether the crowd should face the camera"))
            (crowd_anim
               symbol
               (list
                  ('' bad great pepperwave win))
               (help
                  "Crowd animation to play, overrides normal excitement level"))
            (lighting_preset
               object
               (class LightPreset)
               (help
                  "light preset to fire for this camera only, only use in special cases, lighting override must be on, goes back to normal lighting when the shot is done!"))
            (worst
               bool
               (help
                  "When using -worst_only with venuetest, only looks at these shots"))
            (start_movie
               object
               (class TexMovie)
               (help
                  "start movie render-to-texture"))
            (stop_movie
               object
               (class TexMovie)
               (help
                  "stop movie render-to-texture"))
            (first
               bool
               (help
                  "hack for vignettes - will prefer playing this shot first if checked")))
         (worst 0)
         (postprocess
            {object
               ""})
         (crowd_density 1)
         (crowd_lod 0)
         (crowd_face_camera 0)
         (crowd_anim '')
         (lighting_preset '')
         (start_movie '')
         (stop_movie '')
         (first 0)
         (shot_over
            {if
               $world_simulate
               {if
                  {&&
                     $world
                     {==
                        [category]
                        vignette}}
                  {if_else
                     {find_elem
                        (vignette_transition vignette_shell)
                        {$world get_type}}
                     {$world next_camera}
                     {$world pick_shot vignette}}}})
         (play_group
            ($char $grp $fwd $units $event)
            {if_else
               {'||'
                  {==
                     {$char get_type}
                     extras}
                  {==
                     {$char get_type}
                     crowd}}
               {if
                  $grp
                  {{$char find main.drv}
                     play_group
                     $grp
                     {'|' 2 64}}}
               {$char play_group $grp 1 0 $fwd $units $event}})
         (teleport_char
            ($char $ret)
            {unless
               {'||'
                  {==
                     {$char get_type}
                     extras}
                  {==
                     {$char get_type}
                     crowd}}
               {$char cam_teleport $ret}})
         (update_overlay
            #ifndef _SHIP
            {rnd
               reflect
               camera
               {print
                  "BandCamShot:"
                  {$this name}
                  " category:"
                  [category]
                  "\n"}}
            #endif)
         (play_movie
            ($texmovie $start)
            {$texmovie set showing $start}
            {$texmovie play_movie $start})
         (start_shot
            {if
               [postprocess]
               {[postprocess]
                  select}}
            #ifndef _SHIP
            {$this update_overlay}
            #endif
            {if
               [start_movie]
               {$this
                  play_movie
                  [start_movie]
                  1}}
            {foreach_int
               $idx
               0
               {size
                  [crowds]}
               {do
                  ($crowd
                     [crowds $idx crowd])
                  {if
                     $crowd
                     {$crowd
                        override_anim
                        [crowd_anim]}
                     {$crowd crowd_update}
                     {$crowd
                        set
                        rotate
                        [crowd_face_camera]}
                     {$crowd
                        set_fullness
                        [crowd_density]
                        [crowd_density]}
                     {$crowd
                        set
                        lod
                        [crowd_lod]}}}})
         (stop_shot
            {if
               [postprocess]
               {rnd reset_postproc}}
            {if
               [stop_movie]
               {$this
                  play_movie
                  [stop_movie]
                  0}}
            {if
               $world
               {foreach_int
                  $idx
                  0
                  {size
                     [crowds]}
                  {do
                     ($crowd
                        [crowds $idx crowd])
                     {if
                        $crowd
                        {$crowd override_anim ''}}}}})
         (list_targets
            {do
               ($list
                  {object_list
                     {$this dir}
                     Trans
                     1})
               {if
                  $bandwardrobe
                  {$bandwardrobe sort_targets $list}}
               {foreach
                  $p
                  (player0 player1 player2 player3)
                  {remove_elem $list $p}}
               {insert_elems
                  $list
                  1
                  (player0 player1 player2 player3)}
               $list})
         (find_target
            ($targ $anonymous)
            {if_else
               $bandwardrobe
               {$bandwardrobe find_target $targ}
               kDataUnhandled})
         (shot_ok
            ($prev_shot)
            1))
      (closet
         (editor)
         (shot_over)
         (play_group
            ($char $grp $fwd $units $event)
            {$char play_group $grp 1 0 $fwd $units $event})
         (teleport_char
            ($char $ret)
            {$char cam_teleport $ret})
         (update_overlay
            #ifndef _SHIP
            {rnd
               reflect
               camera
               {print
                  "BandCamShot:"
                  {$this name}
                  " category:"
                  [category]
                  "\n"}}
            #endif)
         (start_shot
            #ifndef _SHIP
            {$this update_overlay}
            #endif)
         (stop_shot)
         (shot_ok
            ($prev_shot)
            1)
         (find_target
            ($targ $anonymous)
            {if_else
               $bandwardrobe
               {$bandwardrobe find_target $targ}
               kDataUnhandled})
         (list_targets
            {do
               ($list
                  {object_list
                     {$this dir}
                     Trans
                     1})
               {insert_elems
                  $list
                  1
                  ("closet_character")}
               $list}))))
(BandDirector
   (test_singleton)
   (types
      (band
         (enter
            {if
               $world
               {$world
                  add_sink
                  $this
                  (excitement game_won game_won_finale game_lost game_over game_outro playing_final_cam)
                  2}
               {if
                  {exists events_parser}
                  {events_parser
                     add_sink
                     $this
                     (section)}}}
            {set $crowd.game_excitement 2}
            {set $crowd.authored_excitement -1}
            {set $crowd.authored_action ''}
            {set
               $crowd.idle_flags
               {'|' 2 48 512}}
            {set
               $crowd.play_flags
               {'|' 2 48}})
         (exit
            {if
               $world
               {$world remove_sink $this}})
         (excitement
            ($level)
            {unless
               [disabled]
               {set
                  [excitement]
                  $level}
               {set $crowd.game_excitement $level}}
            kDataUnhandled)
         (section
            ($secName)
            {set
               [song_section]
               $secName})
         (player_failed
            ($inst)
            {'++'
               [num_players_failed]}
            {$this
               set_dircut
               {switch
                  $inst
                  ((bass real_bass)
                     BFTB_B_FAIL)
                  (drum BFTB_D_FAIL)
                  ((guitar real_guitar)
                     BFTB_G_FAIL)
                  (vocals BFTB_V_FAIL)
                  ((keys real_keys)
                     BFTB_K_FAIL)
                  {notify
                     "unknown player "
                     $inst}
                  ''}})
         (player_saved
            ($savior)
            {--
               [num_players_failed]}
            {script_task
               0
               (delay 0.35)
               (script
                  {$this
                     set_dircut
                     {switch
                        $savior
                        ((bass real_bass)
                           BFTB_B_REVIVE)
                        (drum BFTB_D_REVIVE)
                        ((guitar real_guitar)
                           BFTB_G_REVIVE)
                        (vocals BFTB_V_REVIVE)
                        ((keys real_keys)
                           BFTB_K_REVIVE)
                        {notify
                           "bad activate inst"
                           $inst}
                        ''}})})
         (set_final_shot
            ($cat)
            {set
               $crowd.game_excitement
               {if_else
                  {== $cat LOSE}
                  -3
                  -2}}
            {unless
               {$this set_dircut $cat}
               {handle
                  (game game_outro)}})
         (append_shot
            ($first_cam $cat $notify)
            {do
               ($shot
                  {$this set_dircut $cat})
               {if_else
                  $shot
                  {$first_cam
                     append
                     (next_shots)
                     $shot}
                  {if
                     $notify
                     {notify
                        "could not find "
                        $cat
                        " shot"}}}
               $shot})
         (make_win_shot
            {do
               ($win
                  {$this set_dircut WIN})
               ($shottime
                  {elem
                     (0 60 50 40 30)
                     {beatmatch num_active_players}})
               {if
                  $win
                  {$win
                     clear
                     (next_shots)}
                  {$this append_shot $win WIN_PRE 0}
                  {beatmatch
                     foreach_active_player
                     $p
                     {do
                        ($shot
                           {$this
                              append_shot
                              $win
                              {switch
                                 {$p instrument}
                                 ((bass real_bass)
                                    WIN_BASS)
                                 (drum WIN_DRUM)
                                 ((guitar real_guitar)
                                    WIN_GUITAR)
                                 ((keys real_keys)
                                    WIN_KEYBOARD)
                                 (vocals WIN_VOCAL)
                                 {notify
                                    "hey bad instrument "
                                    {$p instrument}}}
                              1})
                        {if
                           $shot
                           {$shot
                              set
                              (keyframes 0 duration)
                              $shottime}
                           {$shot
                              set
                              (keyframes 0 blend)
                              0}}}}
                  {$this append_shot $win WIN_POST 1}}})
         (playing_final_cam
            {set
               $crowd.play_flags
               {'|' 2 48 512}})
         (game_won
            {$this
               set_final_shot
               {if_else
                  {meta_performer is_last_song}
                  {do
                     {$this make_win_shot}
                     WIN}
                  WIN_QUICK}})
         (game_won_finale
            {$this set_final_shot WIN}
            kDataUnhandled)
         (game_lost
            {$this set_final_shot LOSE})
         (game_over
            {handle
               ({$this get_curworld}
                  remove_midi_parsers)}
            {set
               [disabled]
               1})
         (game_outro
            {$this
               set_dircut
               {if_else
                  {'||'
                     {meta_performer is_set_complete}
                     {meta_performer is_last_song}}
                  OUTRO
                  OUTRO_MULTI}})
         (crowd_realtime
            {set $crowd.authored_excitement -1})
         (crowd_mellow
            {set $crowd.authored_excitement 1})
         (crowd_normal
            {set $crowd.authored_excitement 2})
         (crowd_intense
            {set $crowd.authored_excitement 3})
         (crowd_lighters_on
            {set $crowd.authored_action lighters})
         (crowd_lighters_off
            {set $crowd.authored_action ''})
         (crowd_horns_on
            {set $crowd.authored_action horns})
         (crowd_horns_off
            {set $crowd.authored_action ''})
         (crowd_fists_on
            {set $crowd.authored_action fists})
         (crowd_fists_off
            {set $crowd.authored_action ''})
         (make_intro_shot
            {do
               ($intro
                  {$this set_dircut INTRO})
               {if
                  $intro
                  {$intro
                     clear
                     (next_shots)}
                  {switch
                     $band.play_mode
                     {if
                        {exists beatmatch}
                        {beatmatch
                           foreach_active_player
                           $p
                           {$this
                              append_shot
                              $intro
                              {switch
                                 {$p instrument}
                                 ((bass real_bass)
                                    INTRO_BASS)
                                 (drum INTRO_DRUM)
                                 ((guitar real_guitar)
                                    INTRO_GUITAR)
                                 ((keys real_keys)
                                    INTRO_KEYBOARD)
                                 (vocals INTRO_VOCAL)
                                 {notify
                                    "hey bad instrument "
                                    {$p instrument}}}
                              1}}}}}})
         (get_intro_category
            {cond
               ({!
                     {exists game}}
                  INTRO)
               ({!= $cheat.intro 0}
                  $cheat.intro)
               ({$this is_music_video}
                  INTRO_VENUE)
               ({game get replay}
                  INTRO_QUICK)
               ({!
                     {meta_performer is_first_song}}
                  INTRO_MULTI)
               INTRO})
         (pick_intro_shot
            {do
               ($cat
                  {$this get_intro_category})
               {if
                  {== $cat INTRO}
                  {$this make_intro_shot}}
               {$this set_dircut $cat}})
         (set_intro_shot
            ($shot)
            {if
               {exists beatmatch}
               {beatmatch
                  set_intro_real_time
                  {if_else
                     $shot
                     {-
                        {$shot duration_seconds}}
                     0}}})
         (load_game_song
            ($load)
            {do
               ($song
                  {meta_performer song})
               ($data
                  {song_mgr get_meta_data $song})
               {$this
                  load_song
                  {song_mgr
                     song_file_path
                     $song
                     ".milo"}
                  {$data genre}
                  {$data anim_tempo}
                  $load}})
         (anim_genres
            #include ../char/anim_genres.dta))))
(ColorPalette
   (description
      "List of primary/secondary colors for OutfitConfig")
   (allowed_dirs RndDir)
   (types)
   (ext pal)
   (editor
      (colors
         (array
            color
            (help
               "Color for materials"))
         (post_sync
            {palette_sync $this}))))