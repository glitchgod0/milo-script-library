#include band_macros.dta
(BandLabel
   (description "Label with color presets")
   (allowed_dirs PanelDir)
   (superclasses UILabel)
   (ext lbl)
   (init {set [resource_name] "default"})
   (editor
      (in_anim
         object
         (class Anim)
         (help "anim used before label change")
      )
      (out_anim
         object
         (class Anim)
         (help "anim used after label change")
      )
   )
   (types
      (dev
         (resource_file "../ui/label.milo")
         (allow_edit_text 1)
      )
   )
   (resources_path "../ui/resource/fonts/")
)
(BandButton
   (description "Button with app-specific features")
   (allowed_dirs)
   (superclasses UIButton)
   (init {set [resource_name] "default"})
   (types (default (resource_file "../ui/button.milo")))
   (focus_anim_duration 0.1)
   (ext btn)
   (editor)
   (resources_path "../ui/resource/fonts/")
)
(BandHighlight
   (description "Special highlight bar that chases the focus component")
   (allowed_dirs PanelDir)
   (superclasses UIComponent)
   (ext hlit)
   (init {$this set_type default})
   (types
      (default
         (resource_file "highlight.milo")
         (anim_duration 0.1)
         (meshes
            ("highlight.mesh"
               (normal "normal.mat")
               (focused "normal.mat")
               (disabled "disabled.mat")
            )
         )
      )
   )
)
(PlayerDiffIcon
   (description "Overloaded player/difficulty display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext pdiff)
   (editor
      (num_players
         int
         (range 0 4)
         (help "Number of players")
      )
      (diff
         int
         (range 0 3)
         (help "Difficulty")
      )
   )
   (types)
)
(InstrumentDifficultyDisplay
   (description "Song Instrument Difficulty Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext idd)
   (editor
      (has_part bool (help "whether or not instrument has a part to play"))
      (instrument_state
         int
         (list (IDD_INSTRUMENT_STATES))
         (help "how the instrument should be shown")
      )
      (difficulty
         int
         (range 0 6)
         (help "Difficulty")
      )
      (num_vocal_parts
         int
         (range 0 3)
         (help "Number of vocal parts")
      )
      (instrument_type
         symbol
         (list (drum bass guitar vocals keys real_guitar real_bass real_keys band))
         (help "Type of instrument")
      )
      (instrument_color_override
         object
         (class UIColor)
         (help "Instrument color override for this instance")
      )
   )
   (types)
)
(StarDisplay
   (description "Star Display (used for showing stars in different formats)")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext sd)
   (editor
      (force_mixed_mode bool (help "whether or not to force mixed mode (X/Y *)"))
      (show_empty_stars bool (help "whether or not to show empty stars"))
      (show_denominator
         bool
         (help "whether or not to denominator (when applicable)")
      )
      (stars int (help "Current Stars"))
      (total_stars int (help "Total Stars"))
      (gold_stars int (help "Gold Stars (optional)"))
      (alignment
         int
         (list (TEXT_ALIGNMENTS))
         (help "star alignment")
      )
   )
   (anim_props (float_stars float (help "Float Total Stars")))
   (types)
)
(ScoreDisplay
   (description "Score Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext scr)
   (editor
      (score int (help "Score"))
      (rank int (help "Rank"))
      (globally bool (help "Globally? (vs Friends)"))
      (text_color object (class UIColor))
   )
   (types)
)
(RankDisplay
   (description "Rank Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext rnk)
   (editor
      (among_friends bool (help "Among Friends (vs global)"))
      (text_color object (class UIColor))
   )
   (types)
)
(ReviewDisplay
   (description "Review Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext rvw)
   (editor (score int (help "Score")))
   (types)
)
(ScrollbarDisplay
   (description
      "Scrollbar Display (used for showing a scrollbar associated with a list)"
   )
   (allowed_dirs)
   (superclasses UIComponent)
   (ext sbd)
   (editor
      (scrollbar_list
         object
         (class UIList)
         (help "list used to control scrollbar")
         (refresh scrollbar_height)
      )
      (scrollbar_height
         float
         (help "Height of scrollbar (ignored if list attached)")
         (read_only [list_attached])
      )
      (always_show
         bool
         (help "whether or not to show when there is no scrolling")
      )
      (list_attached
         bool
         (help "whether or not to attach to the list")
         (no_test)
         (refresh scrollbar_height list_x_offset list_y_offset)
      )
      (list_x_offset
         float
         (help "X Offset from list (ignored if list not attached)")
         (read_only {! [list_attached]})
      )
      (list_y_offset
         float
         (help "Y Offset from list (ignored if list not attached)")
         (read_only {! [list_attached]})
      )
   )
   (types)
)
(DialogDisplay
   (description "Dialog Display (controls bones associated with a label)")
   (allowed_dirs RndDir)
   (superclasses Poll)
   (ext dd)
   (editor
      (dialog_label
         object
         (class UILabel)
         (help "label used to control dialog bones")
      )
      (top_bone
         object
         (class Mesh)
         (help "top bone used to adjust dialog size")
      )
      (bottom_bone
         object
         (class Mesh)
         (help "bottom bone used to adjust dialog size")
      )
   )
   (types)
)
(CheckboxDisplay
   (description "Checkbox Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext chk)
   (editor (checked bool (help "If box is checked or not")))
   (types)
)
(MeterDisplay
   (description "Meter Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext md)
   (editor
      (show_text bool (help "whether or not to show text"))
      (percentage_text
         bool
         (help "whether or not to show text in percentage form")
      )
      (current_value int (help "current value of meter"))
      (max_value int (help "max value of meter"))
      (anim_period float (help "length of value change animation, in seconds"))
   )
   (types)
)
(MiniLeaderboardDisplay
   (description "Mini Leaderboard Display")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext mld)
   (editor
      (allow_solo_scores
         bool
         (help "whether or not solo scores should be displayed when appropriate")
      )
   )
   (types)
)
(P9TexMesh
   (description "Dynamic Texture Mesh")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext ptm)
   (editor
      (tex_file
         file
         (help "The default tex, and the one for previewing in Milo.")
      )
   )
   (types)
)
(MicInputArrow
   (description "Mic Input Arrow")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext mia)
   (editor
      (arrow_num
         int
         (range 0 2)
         (help "Arrow Number")
      )
      (test_connect script (script {$this set_mic_connected 1}))
      (test_discconnect script (script {$this set_mic_connected 0}))
   )
   (types)
)
#define JOYPAD_ACTIONS (
   "kAction_None"
   "kAction_Confirm"
   "kAction_Cancel"
   "kAction_Option"
   "kAction_Start"
   "kAction_ViewModify"
   "kAction_Up"
   "kAction_Right"
   "kAction_Down"
   "kAction_Left"
   "kAction_PageUp"
   "kAction_PageDown"
   "kAction_ExtendedOption1"
   "kAction_ExtendedOption2"
   "kAction_ShellOption"
   "kAction_WiiHomeMenu"
)
(InlineHelp
   (description "Inline Help")
   (allowed_dirs)
   (superclasses UIComponent)
   (ext ihp)
   (editor
      (horizontal bool)
      (spacing float)
      (config
         (array
            (struct
               (action int (list (JOYPAD_ACTIONS)))
               (text_token symbol)
            )
         )
      )
      (text_color object (class UIColor))
   )
   (types)
)
(BandList
   (description "Band specific UIList")
   (allowed_dirs)
   (superclasses UIList)
   (init {$this set_type default})
   (ext lst)
   (editor
      (focus_anim
         object
         (class TransAnim)
         (help
            "Animation to play on a selected entry to transition into and out of focus"
         )
      )
      (pulse_anim
         object
         (class TransAnim)
         (help
            "Animation to play on a selected entry after focus is played - focus anim must exist"
         )
      )
      (reveal_anim
         object
         (class TransAnim)
         (help "animation to play on each entry when list is revealed")
      )
      (reveal_start_delay float (help "delay before playing reveal animation"))
      (reveal_entry_delay
         float
         (help "delay between list entries playing reveal animation")
      )
      (reveal_scale float (help "amount to scale reveal animation"))
      (conceal_anim
         object
         (class TransAnim)
         (help "animation to play on each entry when list is concealed")
      )
      (conceal_start_delay float (help "delay before playing conceal animation"))
      (conceal_entry_delay
         float
         (help "delay between list entries playing conceal animation")
      )
      (conceal_scale float (help "amount to scale conceal animation"))
      (reveal script (script {$this reveal}))
      (conceal script (script {$this conceal}))
      (auto_reveal bool (help "Whether or not to start revealed"))
   )
   (types (default (resource_file "../ui/list.milo")))
)
(BandSwatch
   (description "Special list for selecting colors")
   (allowed_dirs PanelDir)
   (superclasses UIList)
   (init {$this set_type default})
   (ext lst)
   (editor
      (color_palette
         object
         (class ColorPalette)
         (help "Palette containing our color options")
      )
   )
   (types (default (resource_file "swatch.milo")))
)
(Label3d
   (description "3d label")
   (superclasses Trans Draw)
   (ext lbl3d)
   (editor
      (text string (help "string to turn into 3d text"))
      (localize bool (help "Try to localize text"))
      (resource file (help "milo file with letter objects"))
      (max_width
         float
         (help "when length is greater than this value, start scaling the phrase")
      )
      (all_caps bool (help "You know you make me want to SHOUT!"))
      (jitter
         (indent
            (jitter_depth float (help "jitter each letter in depth"))
            (jitter_height float (help "jitter each letter in height"))
         )
      )
   )
   (types)
)
(BandCamShot
   (description "Band specific camera shot")
   (superclasses CamShot)
   (allowed_dirs WorldDir)
   (ext shot)
   (editor
      (targets
         (array
            (struct
               (target
                  symbol
                  (list {$this list_targets})
                  (refresh targets)
                  (help "Symbolic name of target")
               )
               (target_ptr
                  object
                  (class Trans)
                  (read_only 1)
                  (help "pointer to target")
               )
               (anim_group
                  symbol
                  (list {$this list_anim_groups [targets {elem $milo_prop_path 1} target]})
                  (help "CharClipGroup to play on character")
                  (no_test)
               )
               (teleport bool (help "do we teleport this character?"))
               (to TRANSFORM (help "the transform to teleport the character to"))
               (return bool (help "return to original position after shot?"))
               (force_lod
                  int
                  (list ("kLODPerFrame" "kLOD0" "kLOD1" "kLOD2"))
                  (help
                     "Forces LOD, kLODPerFrame is normal behavior of picking per frame, the others force the lod (0 is highest res lod, 2 is lowest res lod)"
                  )
               )
               (self_shadow bool (help "should character cast a self shadow"))
               (spot_cutout bool (help "should character create spotlight cutouts"))
               (floor_shadow bool (help "should character cast a shadow on floor"))
               (fast_forward
                  float
                  (help "Fast forward chosen animation by this time, in camera units")
               )
               (forward_event
                  symbol
                  (help "Event to fastforward relative to")
                  (list ('' freeze))
               )
               (env_override
                  object
                  (class Environ)
                  (help "environment override for this target during this shot")
               )
            )
            (header
               {sprint
                  [targets {elem $milo_prop_path 1} target]
                  " - "
                  [targets {elem $milo_prop_path 1} anim_group]
               }
            )
         )
      )
      (zero_time float (help "synchronization time for this camshot"))
      (min_time
         int
         (help
            "30fps reg: minimum time this shot can last, DCuts: time past zero time in which the shot can be interupted"
         )
      )
      (max_time int (help "30fps maximum duration for this shot, 0 is infinite"))
      (next_shots
         (array object (list {$this allowable_next_shots}))
         (help "Next camshots, in order")
      )
      (store script (script {$this store}))
   )
   (types)
   (views
      (flags
         ("Category" [category])
         ("Platform Only" [platform_only])
         ("DoF" [use_depth_of_field])
         ("Target 0" [keyframes 0 targets 0])
         ("Target 1" [keyframes 1 targets 0])
         ("Total Duration" {$this duration_seconds})
         ("Blur Depth" [keyframes 0 blur_depth])
         ("Max Blur" [keyframes 0 max_blur])
         ("Focus Blur Mult" [keyframes 0 focus_blur_multiplier])
         ("Shake Freq" [keyframes 0 shake_noisefreq])
         ("Shake Amp" [keyframes 0 shake_noiseamp])
         ("Shake Max x" [keyframes 0 shake_maxangle x])
         ("Shake Max y" [keyframes 0 shake_maxangle y])
         ("PS3 Per Pixel" [ps3_per_pixel])
      )
      (Shadows
         ("Category" [category])
         ("Bass Shadow" [targets 0 self_shadow])
         ("Bass Cutout" [targets 0 spot_cutout])
         ("Bass Floorspot" [targets 0 floor_shadow])
         ("Drum Shadow" [targets 1 self_shadow])
         ("Drum Cutout" [targets 1 spot_cutout])
         ("Drum Floorspot" [targets 1 floor_shadow])
         ("Guitar Shadow" [targets 2 self_shadow])
         ("Guitar Cutout" [targets 2 spot_cutout])
         ("Guitar Floorspot" [targets 2 floor_shadow])
         ("Vocal Shadow" [targets 3 self_shadow])
         ("Vocal Cutout" [targets 3 spot_cutout])
         ("Vocal Floorspot" [targets 3 floor_shadow])
      )
   )
)
#define PLAYER_SETTINGS (("kPlayer1" "kPlayer2" "kPlayerNone" "kPlayerShared"))
(BandCrowdMeterDir
   (description "Crowd meter hud element, has a needle")
   (superclasses RndDir)
   (types)
   (editor
      (peak_value float (help "Peak state value"))
      (value
         float
         (range 0 1)
         (help "Band health. Animates crowd_meter.grp")
         (no_test)
      )
      (icon_0_val
         float
         (range -1 1)
         (no_test)
      )
      (icon_1_val
         float
         (range -1 1)
         (no_test)
      )
      (icon_2_val
         float
         (range -1 1)
         (no_test)
      )
      (icon_3_val
         float
         (range -1 1)
         (no_test)
      )
      (icon_4_val
         float
         (range -1 1)
         (no_test)
      )
      (reset script (script {$this reset}))
      (level_colors (array color))
      (maxed
         bool
         (help "Turned on when in the 'meter maxed' state. Animates maxed.tnm")
         (no_test)
      )
      (worst_case script (script {$this worst_case}))
   )
)
(CrowdMeterIcon
   (description "Individual player icon for crowd meter")
   (superclasses RndDir)
   (types)
   (editor
      (reset script (script {$this reset}))
      (arrow_hide script (script {$this arrow_hide}))
      (arrow_show script (script {$this arrow_show}))
      (deploy script (script {$this deploy}))
      (stop_deploy script (script {$this stop_deploy}))
      (glow script (script {$this set_glowing 1}))
      (glow_stop script (script {$this set_glowing 0}))
      (state_normal script (script {$this set_state 0}))
      (state_warning script (script {$this set_state 1}))
      (state_failed script (script {$this set_state 2}))
   )
)
(BandFaceDeform
   (description
      "Band Face Deformation object for face creator, basically a compact MeshAnim"
   )
   (ext fdm)
   (editor
      (frames
         int
         (help "How many keyframes")
         (read_only 1)
      )
      (size
         int
         (help "Total size in RAM")
         (read_only 1)
      )
   )
   (types)
)
(BandStarMeterDir
   (description "Star meter hud element")
   (superclasses RndDir)
   (types)
   (editor
      (main_group
         object
         (class Group)
         (help "animated from 0 to 100 as the meter fills")
         HIDE_IN_PROXY
      )
      (ready_group
         object
         (class Group)
         (help "drawn and animated only when star power is ready")
         HIDE_IN_PROXY
      )
      (fill_group
         object
         (class Group)
         (help "drawn and animated only when star power is filling up")
         HIDE_IN_PROXY
      )
      (anim_group
         object
         (class Group)
         (help "always animated")
         HIDE_IN_PROXY
      )
      (engage_anim_1
         object
         (class Anim)
         (help "anim to drive when player 1 is trying to engage")
         HIDE_IN_PROXY
      )
      (engage_anim_2
         object
         (class Anim)
         (help "anim to drive when player 2 is trying to engage")
         HIDE_IN_PROXY
      )
      (value
         float
         (range 0 1)
         (help "test value between 0 and 1")
      )
      (using_star_power
         bool
         (help "for testing; whether we're using star power or not.")
         (no_test)
      )
      (engaging_1
         bool
         (help "whether player 1 is trying to engage, for testing.")
      )
      (engaging_2
         bool
         (help "whether player 2 is trying to engage, for testing.")
      )
      (player
         int
         (list PLAYER_SETTINGS)
         (help "which player to track")
      )
   )
)
(BandScoreDisplay
   (description "Score displaying hud element")
   (superclasses RndDir)
   (types)
   (editor
      (display_meshs
         (array object (class Mesh))
         (help "mesh for each displayed digit")
         HIDE_IN_PROXY
      )
      (digit_mats
         (array object (class Mat))
         (help "material for each digit (0-9)")
         HIDE_IN_PROXY
      )
      (blank_mat
         object
         (class Mat)
         (help "material for a blank space")
         HIDE_IN_PROXY
      )
      (score int (help "enter the score for testing"))
      (player
         int
         (list PLAYER_SETTINGS)
         (help "which player to track")
      )
   )
)
(BandStreakDisplay
   (description "Streak displaying hud element")
   (superclasses RndDir)
   (types)
   (editor
      (color_anim
         object
         (class MatAnim)
         (help "mat anim specifying the color for each state")
         HIDE_IN_PROXY
      )
      (shake_anim
         object
         (class Anim)
         (help "anim that is fired when achieving a new streak")
         HIDE_IN_PROXY
      )
      (frame_mat
         object
         (class Mat)
         (help "material for the frame (has color applied to it)")
         HIDE_IN_PROXY
      )
      (mult_glow_mesh
         object
         (class Mesh)
         (help
            "glow mesh; hidden when no streak, color of its material is changed to match the streak color"
         )
         HIDE_IN_PROXY
      )
      (mult_frame_mat
         object
         (class Mat)
         (help "material for multiplier frame")
         HIDE_IN_PROXY
      )
      (led_mats
         (array object (class Mat))
         (help "material for LED's; one material per color.")
         HIDE_IN_PROXY
      )
      (led_meshs
         (array object (class Mesh))
         (help "meshes for the LED streak indicators")
         HIDE_IN_PROXY
      )
      (digit_mats
         (array object (class Mat))
         (help "one material per digit")
         HIDE_IN_PROXY
      )
      (mult_digit_mesh
         object
         (class Mesh)
         (help "mesh for the multiplier digit")
         HIDE_IN_PROXY
      )
      (x_digit_mesh
         object
         (class Mesh)
         (help "mesh for the X")
         HIDE_IN_PROXY
      )
      (blank_digit_mat
         object
         (class Mat)
         (help "material for a blank digit")
         HIDE_IN_PROXY
      )
      (x_digit_mat
         object
         (class Mat)
         (help "material for the X")
         HIDE_IN_PROXY
      )
      (blown_mesh_1
         object
         (class Mesh)
         (help "mesh to indicate when player 1 blows a streak")
         HIDE_IN_PROXY
      )
      (blown_mesh_2
         object
         (class Mesh)
         (help "mesh to indicate when player 2 blows a streak")
         HIDE_IN_PROXY
      )
      (blown_mat
         object
         (class Mat)
         (help "material used for the indicators when the streak is blown")
         HIDE_IN_PROXY
      )
      (blown_display_time
         float
         (range 0 5)
         (no_test serialize)
         (help "length of time the blown streak indicator should light up for")
         HIDE_IN_PROXY
      )
      (player_1_blows script (script {$this blow_streak 0}))
      (player_2_blows script (script {$this blow_streak 1}))
      (multiplier
         int
         (range 1 9)
         (help "multiplier value for testing")
      )
      (star_mode bool (help "toggle star power for testing"))
      (partial_streak
         int
         (range 0 20)
         (help "partial streak for testing")
      )
      (player
         int
         (list PLAYER_SETTINGS)
         (help "which player to track")
      )
      (refresh script (script {$this refresh}))
   )
)
(BandLeadMeter
   (description
      "Multiplayer lead meter hud element, shows which player is in the lead"
   )
   (superclasses RndDir)
   (types)
   (editor
      (needle_anim
         object
         (class Anim)
         (help "anim to drive the needle")
         HIDE_IN_PROXY
      )
      (logo_glow_anim
         object
         (class Anim)
         (help "anim to make the logo glow different colors")
         HIDE_IN_PROXY
      )
      (glow_mesh_1
         object
         (class Mesh)
         (help "mesh that is shown when player 1 is ahead")
         HIDE_IN_PROXY
      )
      (glow_mesh_2
         object
         (class Mesh)
         (help "mesh that is shown when player 2 is ahead")
         HIDE_IN_PROXY
      )
      (pegged_anim_1
         object
         (class Anim)
         (help "animation to play when player 1 has a huge lead")
         HIDE_IN_PROXY
      )
      (pegged_anim_2
         object
         (class Anim)
         (help "animation to play when player 2 has a huge lead")
         HIDE_IN_PROXY
      )
      (lens_mesh
         object
         (class Mesh)
         (help "lens mesh")
         HIDE_IN_PROXY
      )
      (lens_mat_neutral
         object
         (class Mat)
         (help "lens mat to use when the score is tied")
         HIDE_IN_PROXY
      )
      (lens_mat_1
         object
         (class Mat)
         (help "lens mat to use when player 1 is winning")
         HIDE_IN_PROXY
      )
      (lens_mat_2
         object
         (class Mat)
         (help "lens mat to use when player 2 is winning")
         HIDE_IN_PROXY
      )
      (score_diff
         int
         (help
            "difference in scores for testing. a positive number means the first player is ahead."
         )
      )
      (refresh script (script {$this refresh}))
   )
)
(BandMeshLauncher
   (description "A MeshLauncher object emits meshes along a path.")
   (superclasses Poll)
   (ext ml)
   (types
      (basic_launcher
         (editor
            (launch_mesh script (script {$this launch_mesh}))
            (trans_anim object (class TransAnim))
            (parent_trans object (class Trans))
         )
         (trans_anim "")
         (parent_trans "")
         (launch_mesh
            {if {!= [trans_anim] ""}
               {$this launch [trans_anim] [parent_trans]}
            }
         )
      )
      (particle_launcher
         (editor
            (launch script (script {$this launch_particles}))
            (part object (class ParticleSys))
            (trans object (class Trans))
            (num_parts int (range 0 1000))
            (use_life
               bool
               (refresh life)
               (post_sync
                  {if {! [use_life]}
                     {set [life] 0}
                  }
               )
            )
            (life float (read_only {! [use_life]}))
            (use_speed
               bool
               (refresh speed)
               (post_sync
                  {if {! [use_speed]}
                     {set [speed] 0}
                  }
               )
            )
            (speed float (read_only {! [use_speed]}))
            (use_size
               bool
               (refresh size)
               (post_sync
                  {if {! [use_size]}
                     {set [size] 0}
                  }
               )
            )
            (size float (read_only {! [use_size]}))
            (use_delta_size
               bool
               (refresh delta_size)
               (post_sync
                  {if {! [use_delta_size]}
                     {set [delta_size] 0}
                  }
               )
            )
            (delta_size float (read_only {! [use_delta_size]}))
            (use_start_color
               bool
               (refresh start_color start_alpha)
               (post_sync
                  {if {! [use_start_color]}
                     {set [start_color] 0}
                     {set [start_alpha] 0}
                  }
               )
            )
            (start_color color (read_only {! [use_start_color]}))
            (start_alpha
               float
               (read_only {! [use_start_color]})
               (range 0 1)
            )
            (use_mid_color
               bool
               (refresh mid_color mid_alpha)
               (post_sync
                  {if {! [use_mid_color]}
                     {set [mid_color] 0}
                     {set [mid_alpha] 0}
                  }
               )
            )
            (mid_color color (read_only {! [use_mid_color]}))
            (mid_alpha
               float
               (read_only {! [use_mid_color]})
               (range 0 1)
            )
            (use_end_color
               bool
               (refresh end_color end_alpha)
               (post_sync
                  {if {! [use_end_color]}
                     {set [end_color] 0}
                     {set [end_alpha] 0}
                  }
               )
            )
            (end_color color (read_only {! [use_end_color]}))
            (end_alpha
               float
               (read_only {! [use_end_color]})
               (range 0 1)
            )
            (use_emit_direction
               bool
               (refresh pitch_low pitch_high yaw_low yaw_high)
               (post_sync
                  {if {! [use_end_color]}
                     {set [pitch_low] 0}
                     {set [pitch_high] 0}
                     {set [yaw_low] 0}
                     {set [yaw_high] 0}
                  }
               )
            )
            (pitch_low float (read_only {! [use_emit_direction]}))
            (pitch_high float (read_only {! [use_emit_direction]}))
            (yaw_low float (read_only {! [use_emit_direction]}))
            (yaw_high float (read_only {! [use_emit_direction]}))
         )
      )
   )
   (editor
      (multi_mesh
         object
         (class MultiMesh)
         (help "Controlled MultiMesh to emit from.")
      )
   )
)
(LayerDir
   (description "Draws configurable layer planes from an orthographic camera")
   (types)
   (superclasses RndDir)
   (editor
      (layers
         (array
            (struct
               (name
                  string
                  (hide {$this is_proxy})
                  (refresh layers)
               )
               (active
                  bool
                  (help "is this layer active?")
                  (hide {! [layers {elem $milo_prop_path 1} layer_optional]})
               )
               (color
                  color
                  (help
                     {if_else {$this is_proxy}
                        "layers preview color value to apply (not saved)"
                        "layers default color value to apply (saved)"
                     }
                  )
                  (hide {! [layers {elem $milo_prop_path 1} allow_color]})
               )
               (color_idx
                  int
                  (help
                     {if_else {$this is_proxy}
                        "layers preview color value to apply from palette (not saved)"
                        "layers default color value to apply from palette (saved)"
                     }
                  )
                  (hide
                     {'||'
                        {! [layers {elem $milo_prop_path 1} allow_color]}
                        {! [layers {elem $milo_prop_path 1} color_palette]}
                     }
                  )
               )
               (alpha
                  float
                  (help
                     {if_else {$this is_proxy}
                        "layers preview alpha value to apply (not saved)"
                        "layers default alpha value to apply (saved)"
                     }
                  )
                  (range 0 1)
                  (hide {! [layers {elem $milo_prop_path 1} allow_alpha]})
               )
               (bitmap
                  string
                  (list {$this get_bitmap_list})
                  (help
                     {if_else {$this is_proxy}
                        "preview bitmap to apply (not saved)"
                        "default bitmap to apply (saved)"
                     }
                  )
                  (hide {< {size [layers {elem $milo_prop_path 1} bitmap_list]} 2})
               )
               (setup
                  (indent
                     (mat
                        object
                        (class Mat)
                        (help "Material this layer controls")
                     )
                     (proxy
                        object
                        (class RndDir)
                        (help "set the proxy file to use if this is a user-created patch layer")
                     )
                     (layer_optional
                        bool
                        (help "can this layer can be turned off?")
                        (refresh layers)
                     )
                     (bitmap_list
                        (array file)
                        (help "list of available bitmaps")
                        (refresh layers)
                     )
                     (allow_color
                        bool
                        (help "allow users to change color")
                        (refresh layers)
                     )
                     (color_palette
                        object
                        (class Object color_palette)
                        (help "select a palette object to get colors from")
                        (hide
                           {'||' {! [layers {elem $milo_prop_path 1} allow_color]} {$this is_proxy}}
                        )
                     )
                     (allow_alpha
                        bool
                        (help "allow users to change alpha as slider")
                        (refresh layers)
                     )
                     (alpha_min
                        float
                        (read_only {! [layers {elem $milo_prop_path 1} allow_alpha]})
                        (refresh layers)
                        (help "minimum alpha value allowed")
                     )
                     (alpha_max
                        float
                        (read_only {! [layers {elem $milo_prop_path 1} allow_alpha]})
                        (refresh layers)
                        (help "maximum alpha value allowed")
                     )
                  )
                  (hide {$this is_proxy})
               )
            )
            (header [layers {elem $milo_prop_path 1} name])
         )
      )
      (randomize_colors script (script {$this randomize_colors}))
      (use_free_cam
         bool
         (help
            "allows dir to have it's own camera instead of using the preset fixed camera"
         )
         (hide {$this is_proxy})
      )
   )
)
#define kPrimaryColor (0)
#define kSecondaryColor (1)
(OutfitConfig
   (description "Configurable options for outfits")
   (superclasses)
   (allowed_dirs Character)
   (types)
   (ext cfg)
   (editor
      (primary_color
         int
         (help "Index of primary color option")
         (hide {< {$this num_color_options} 1})
      )
      (secondary_color
         int
         (help "Index of secondary color option")
         (hide {< {$this num_color_options} 2})
      )
      (mats
         (array
            (struct
               (mat
                  object
                  (class Mat)
                  (help "Material, must be set")
               )
               (target
                  object
                  (class Mat)
                  (help
                     "optional target material, lives in resource, will be swapped out for mat"
                  )
               )
               (two_color_diffuse
                  object
                  (class Tex)
                  (help "Diffuse texture for two color, mat must have render to texture")
               )
               (two_color_interp
                  object
                  (class Tex)
                  (help
                     "Two color interpolation, transparent means use color1, opaque means color2, blends"
                  )
               )
               (two_color_mask
                  object
                  (class Tex)
                  (help
                     "Two color mask, transparent means do no color modulation, opaque means do full color modulation"
                  )
               )
               (color1_palette
                  object
                  (class ColorPalette)
                  (help "Palette to use for mat color1")
               )
               (color1_option
                  int
                  (list ("kPrimaryColor" "kSecondaryColor"))
                  (help "which color option to use in palette1")
               )
               (color2_palette
                  object
                  (class ColorPalette)
                  (help "Palette to use for mat color2, if NULL, assumes white")
               )
               (color2_option
                  int
                  (list ("kPrimaryColor" "kSecondaryColor"))
                  (help "which color option to use in palette2")
               )
               (textures
                  (array object (class Tex))
                  (help "Textures to use instead of colors, uses color1_option")
               )
            )
         )
         (help "Material swaps from resource file, and two color information")
      )
      (meshao
         (array
            (struct
               (meshname string (help "name of the mesh"))
               (coeffs
                  (array int)
                  (help "old colors, packed")
               )
               (seams
                  (array
                     (struct
                        (index int (help "vertex index of a seam"))
                        (coeff int (help "cached ao value before seam blend"))
                     )
                  )
               )
            )
            (help "Array of mesh ao objects")
         )
         (read_only 1)
      )
      (randomize_colors
         script
         (script {$this randomize_colors})
         (help "Set random color indices")
         (refresh)
      )
      (recompose
         script
         (script {$this recompose})
         (help "Apply color choices to the outfit and recompose the textures")
      )
      (compress_textures
         script
         (script {$this compress_textures})
         (help
            "Compress all the textures and delete superflous textures, will be no longer modifyable after that, so don't do it."
         )
         (refresh)
      )
      (calculate_ao
         script
         (script {$this calculate_ao})
         (help "calculates AO for this file, remember to save afterwards!")
      )
   )
)
(PatchRenderer
   (description "Special texture renderer for character patches")
   (allowed_dirs)
   (superclasses TexRenderer)
   (types)
   (ext patch)
   (editor
      (test_mode
         symbol
         (list (blank test))
         (help "Blank/test modes for milo")
      )
      (position
         symbol
         (list (front back left right))
         (help "Position of patch, controls which cam shot we use")
      )
      (back_mat
         object
         (class Mat)
         (help "background material for patch")
      )
      (overlay_mat
         object
         (class Mat)
         (help "Overlay material for patch")
      )
   )
)
(WorldMapDir
   (description "A panel dir for the world tour map.")
   (allowed_dirs)
   (superclasses PanelDir)
   (editor
      SHELL_EDITOR
      (focal_distance float (help "Focal distance."))
      (blur_depth float (help "Blur depth."))
      (min_blur float (help "The min blur."))
      (max_blur float (help "The max blur."))
      (do_culling bool (help "Should hidden towns be culled?"))
      (town
         symbol
         (list {$this get_town_list})
         (help "Select a town to rotate the world to it.")
         (no_test)
      )
      (zoom_in
         script
         (script {$this zoom_in_impl})
         (help "Zoom in to a town.")
      )
      (zoom_out
         script
         (script {$this zoom_out_impl})
         (help "Zoom out from a town.")
      )
   )
   SHELL_TYPE
   (types)
)
#define COMMON_BANDTRACK_EDITOR (
   (instrument
      symbol
      (list ('' bass drum guitar vocals real_keys real_guitar))
      (post_sync {$this setup_instrument})
   )
   (player_intro object (class RndDir))
   (star_power_meter object (class RndDir))
   (streak_meter object (class StreakMeterDir))
   (popup_object object (class RndDir))
   (player_feedback object (class RndDir))
   (failed_feedback object (class RndDir))
   (retract_trig object (class EventTrigger))
   (reset_trig object (class EventTrigger))
   (deploy_trig object (class EventTrigger))
   (stop_deploy_trig object (class EventTrigger))
   (intro_trig object (class EventTrigger))
   (disable_player script (script {$this disable_player 1}))
   (save_player
      script
      (script
         {$this save_player}
         {script_task 0 (delay 1.5) (script {$this enable_player})}
      )
   )
)
#define COMMON_BANDTRACK_DATA ((min_finale_help_time 5.0))
(GemTrackDir
   (description "band 2 TrackDir for gem tracks")
   (superclasses TrackDir)
   (editor
      (reset script (script {$this reset}))
      (deploy script (script {$this deploy}))
      (stop_deploy script (script {$this stop_deploy}))
      (mash script (script {$this mash 0}))
      (effect_selector object (class RndDir))
      (practice_reset script (script {$this practice_reset}))
      (streak_meter_offset
         float
         (help "The projected distance between the now bar and the streak meter")
         (post_sync {$this set_pitch [track_pitch]})
      )
      (streak_meter_tilt
         float
         (help "The tilt of the streak meter relative to game.cam, in degrees")
         (post_sync {$this set_pitch [track_pitch]})
      )
      COMMON_BANDTRACK_EDITOR
      (rotater object (class Group))
      (surface_objects
         (indent
            (surface_mesh object (class Mesh))
            (surface_texture object (class Tex))
            (surface_mat object (class Mat))
         )
      )
      (track_env object (class Environ))
      (game_cam object (class Cam))
      (track_overlay_triggers
         (indent
            (track_overlay_on_trig object (class EventTrigger))
            (track_overlay_off_trig object (class EventTrigger))
         )
         (help
            "Triggers to show or hide the peak state / overdrive track overlay surface"
         )
      )
      (peak_state_triggers
         (indent
            (peak_state_on_trig object (class EventTrigger))
            (peak_state_off_trig object (class EventTrigger))
         )
         (help "Peak state on/off triggers for all instrument types")
      )
      (bass_super_streak_triggers
         (indent
            (bass_super_streak_on_trig object (class EventTrigger))
            (bass_super_streak_off_trig object (class EventTrigger))
         )
         (help "Bass super streak on/off triggers")
      )
      (spotlight_phrase_success_trig object (class EventTrigger))
      (solo_hit_trig object (class EventTrigger))
      (gem_mash_anims
         (indent
            (gem_mash_0_anim object (class PropAnim))
            (gem_mash_1_anim object (class PropAnim))
            (gem_mash_2_anim object (class PropAnim))
            (gem_mash_3_anim object (class PropAnim))
            (gem_mash_4_anim object (class PropAnim))
            (gem_mash_5_anim object (class PropAnim))
         )
      )
      (drum_mash_anims
         (indent
            (drum_mash_1_anim object (class PropAnim))
            (drum_mash_2_anim object (class PropAnim))
            (drum_mash_3_anim object (class PropAnim))
            (drum_mash_4_anim object (class PropAnim))
         )
      )
      (fill_hit_trigs
         (indent
            (fill_hit_1_trig object (class EventTrigger))
            (fill_hit_2_trig object (class EventTrigger))
            (fill_hit_3_trig object (class EventTrigger))
         )
      )
      (drummer_objects
         (indent
            (kick_drummer_trig object (class EventTrigger))
            (kick_drummer_reset_trig object (class EventTrigger))
            (drum_fill_reset_trig object (class EventTrigger))
            (drum_mash_2nd_pass_activate_anim object (class PropAnim))
            (drum_mash_hit_anim_grp object (class Group))
         )
      )
      (fill_colors_grp object (class Group))
      (lod_anim object (class PropAnim))
      (glow_widgets (array object (class TrackWidget)))
      (smasher_plate
         object
         (class RndDir)
         (hide 1)
         (no_test)
      )
      (fret_number_positioning
         (indent
            (fret_pos_offset_0 float)
            (fret_pos_offset_1 float)
            (fret_pos_offset_2 float)
            (fret_pos_offset_3 float)
         )
         (help
            "the x offset from the center of an RG gem mesh where the fret number should go"
         )
      )
      (chord_label_pos_offset
         float
         (help
            "the x offset from the center of the track where the chord label should go"
         )
      )
   )
   (types
      (test
         (editor
            (spew_gems script (script {$this spew_gems}))
            (clear_gems script (script {$this clear_gems}))
            (fit_meshes
               (array object (class Mesh))
               (help
                  "Meshes which need to be fit to the cross section of the track surface."
               )
            )
            (dump script (script {$this dump}))
         )
         (black_key_style 0)
         (screen_aspect regular)
         (total_slots 1)
         (track_slot 0)
         (in_use 0)
         (fit_meshes ())
         (object_type_list
            ($obj_type)
            {do
               ($array {array 0})
               {push_back $array none}
               {$this iterate $obj_type $obj {push_back $array {symbol {$obj name}}}}
               {sort $array}
               $array
            }
         )
         (spew_gems
            {if {! {exists spew_gems_test}}
               {$this toggle_running}
               {thread_task
                  1
                  (name spew_gems_test)
                  (script
                     {set $lane 0}
                     {switch $beat
                        (0
                           {$this add_test_widget "bar_measure.wid" 2}
                           {set $beat 1}
                        )
                        (1
                           {$this add_test_widget "bar_half_beat.wid" 2}
                           {set $beat 2}
                        )
                        (2
                           {$this add_test_widget "bar_beat.wid" 2}
                           {set $beat 3}
                        )
                        (3
                           {$this add_test_widget "bar_half_beat.wid" 2}
                           {set $beat 4}
                        )
                        (4
                           {$this add_test_widget "bar_beat.wid" 2}
                           {set $beat 5}
                        )
                        (5
                           {$this add_test_widget "bar_half_beat.wid" 2}
                           {set $beat 6}
                        )
                        (6
                           {$this add_test_widget "bar_beat.wid" 2}
                           {set $beat 7}
                        )
                        (7
                           {$this add_test_widget "bar_half_beat.wid" 2}
                           {set $beat 0}
                        )
                     }
                     {set $num_gems {random_int 3 4}}
                     {if {== $num_gems 1}
                        {set $hopo {random_int 0 2}}
                     }
                     {foreach_int $gem 0 $num_gems
                        {set $lane {random_int 0 5}}
                        {if_else {== [instrument] drum}
                           {switch $lane
                              (0 {$this add_test_widget "drum_red.wid" $lane})
                              (1 {$this add_test_widget "drum_yellow.wid" $lane})
                              (2 {$this add_test_widget "gem_kick.wid" $lane})
                              (3 {$this add_test_widget "drum_blue.wid" $lane})
                              (4 {$this add_test_widget "drum_green.wid" $lane})
                           }
                           {switch $lane
                              (0
                                 {if_else $hopo
                                    {$this add_test_widget "gem_green_hopo.wid" $lane}
                                    {$this add_test_widget "gem_green.wid" $lane}
                                 }
                              )
                              (1
                                 {if_else $hopo
                                    {$this add_test_widget "gem_red_hopo.wid" $lane}
                                    {$this add_test_widget "gem_red.wid" $lane}
                                 }
                              )
                              (2
                                 {if_else $hopo
                                    {$this add_test_widget "gem_yellow_hopo.wid" $lane}
                                    {$this add_test_widget "gem_yellow.wid" $lane}
                                 }
                              )
                              (3
                                 {if_else $hopo
                                    {$this add_test_widget "gem_blue_hopo.wid" $lane}
                                    {$this add_test_widget "gem_blue.wid" $lane}
                                 }
                              )
                              (4
                                 {if_else $hopo
                                    {$this add_test_widget "gem_orange_hopo.wid" $lane}
                                    {$this add_test_widget "gem_orange.wid" $lane}
                                 }
                              )
                           }
                        }
                     }
                     {$task sleep 1}
                     {$task loop}
                  )
               }
            }
         )
         (clear_gems
            {if {exists spew_gems_test}
               {delete spew_gems_test}
               {$this toggle_running}
            }
         )
         (dump
            {print "surface_texture: " [surface_texture] "\n"}
            {print "surface_mesh: " [surface_mesh] "\n"}
            {print "effect_selector: " [effect_selector] "\n"}
            {print "gem_track_index: " [gem_track_index] "\n"}
            {print "num_tracks: " [num_tracks] "\n"}
            {print "multiplier: " [multiplier] "\n"}
            {print "kick_pass_counter: " [kick_pass_counter] "\n"}
         )
         (cycle_black_key_style
            {'++' [black_key_style]}
            {if {> [black_key_style] 3}
               {set [black_key_style] 0}
            }
            {switch [black_key_style]
               (0
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_blue.mesh}
                     {object gem_black_blue_glow.mesh}
                  }
                  {key_black_green.wid set_meshes
                     {object kbgem_black_green.mesh}
                     {object gem_black_green_glow.mesh}
                  }
                  {key_black_red.wid set_meshes
                     {object kbgem_black_red.mesh}
                     {object gem_black_red_glow.mesh}
                  }
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_yellow.mesh}
                     {object gem_black_yellow_glow.mesh}
                  }
                  {black_gem_tex.anim set frame 0}
               )
               (1
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_blue_7c.mesh}
                     {object gem_black_blue_glow_7c.mesh}
                  }
                  {key_black_green.wid set_meshes
                     {object kbgem_black_green_7c.mesh}
                     {object gem_black_green_glow_7c.mesh}
                  }
                  {key_black_red.wid set_meshes
                     {object kbgem_black_red_7c.mesh}
                     {object gem_black_red_glow_7c.mesh}
                  }
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_yellow_7c.mesh}
                     {object gem_black_yellow_glow_7c.mesh}
                  }
                  {black_gem_tex.anim set frame 0}
               )
               (2
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_blue.mesh}
                     {object gem_black_blue_glow.mesh}
                  }
                  {key_black_green.wid set_meshes
                     {object kbgem_black_green.mesh}
                     {object gem_black_green_glow.mesh}
                  }
                  {key_black_red.wid set_meshes
                     {object kbgem_black_red.mesh}
                     {object gem_black_red_glow.mesh}
                  }
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_yellow.mesh}
                     {object gem_black_yellow_glow.mesh}
                  }
                  {black_gem_tex.anim set frame 1}
               )
               (3
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_blue_7c.mesh}
                     {object gem_black_blue_glow_7c.mesh}
                  }
                  {key_black_green.wid set_meshes
                     {object kbgem_black_green_7c.mesh}
                     {object gem_black_green_glow_7c.mesh}
                  }
                  {key_black_red.wid set_meshes
                     {object kbgem_black_red_7c.mesh}
                     {object gem_black_red_glow_7c.mesh}
                  }
                  {key_black_blue.wid set_meshes
                     {object kbgem_black_yellow_7c.mesh}
                     {object gem_black_yellow_glow_7c.mesh}
                  }
                  {black_gem_tex.anim set frame 1}
               )
            }
            [black_key_style]
         )
         (update_screen_position
            ($animate $size_frame $shift_frame $cam_rect_frame)
            {if_else {< [track_slot] [total_slots]}
               {do
                  {if_else $animate
                     {do
                        {track_size.anim animate (dest $size_frame) (period 1)}
                        {track_shift.anim animate (dest $shift_frame) (period 1)}
                        {track_cam_rect.anim animate (dest $cam_rect_frame) (period 1)}
                     }
                     {do
                        {track_size.anim animate (range $size_frame $size_frame) (units 2)}
                        {track_shift.anim animate (range $shift_frame $shift_frame) (units 2)}
                        {track_cam_rect.anim animate
                           (range $cam_rect_frame $cam_rect_frame)
                           (units 2)
                        }
                     }
                  }
                  {$this set_used 1}
               }
               {$this set_used 0}
            }
         )
         (set_used
            ($val)
            {if_else $val
               {if_else {> [total_slots] 1}
                  {script_task 0 (delay 1) (script {track_in.trig trigger})}
                  {track_in.trig trigger}
               }
               {track_out.trig trigger}
            }
            {set [in_use] $val}
         )
      )
   )
   COMMON_BANDTRACK_DATA
)
(VocalTrackDir
   (description "band 2 dir for vocal track")
   (superclasses RndDir)
   (editor
      (reset script (script {$this reset}))
      (deploy script (script {$this deploy}))
      (stop_deploy script (script {$this stop_deploy}))
      (pitch_panel
         (indent
            (pitch_window
               bool
               (help "are we displaying the note tube panel?")
               (post_sync {$this reset})
            )
            (pitch_window_height
               float
               (help "height of the note tube panel")
               (post_sync {$this reset})
            )
            (pitch_window_mesh
               object
               (class Mesh)
               (help "the pitch window mesh")
               (post_sync {$this reset})
            )
            (pitch_window_overlay
               object
               (class Mesh)
               (help "the pitch window overlay mesh")
               (post_sync {$this reset})
            )
         )
      )
      (lead_panel
         (indent
            (lead_lyrics
               bool
               (help "are we showing the lead lyric panel?")
               (post_sync {$this reset})
            )
            (lead_lyric_height
               float
               (hide {! [lead_lyrics]})
               (help "controls the height of the lead lyric bar")
               (post_sync {$this reset})
            )
            (lead_lyric_mesh
               object
               (class Mesh)
               (hide {! [lead_lyrics]})
               (help "the lead lyric bar mesh")
               (post_sync {$this reset})
            )
         )
      )
      (harmony_panel
         (indent
            (harmony_lyrics
               bool
               (help "are we showing the harmony lyric panel?")
               (post_sync {$this reset})
            )
            (harmony_lyric_height
               float
               (hide {! [harmony_lyrics]})
               (help "controls the height of the harmony lyric bar")
               (post_sync {$this reset})
            )
            (harmony_lyric_mesh
               object
               (class Mesh)
               (hide {! [harmony_lyrics]})
               (help "the harmony lyric bar mesh")
               (post_sync {$this reset})
            )
         )
      )
      (lyric_colors
         (indent
            (scrolling
               (indent
                  (lead
                     (indent
                        (lead_coming
                           color
                           (help "Color of the approaching lead lyrics.")
                           (post_sync
                              {$this set_lyric_color [lead_coming] lead [scrolling_coming_alpha]}
                           )
                        )
                        (lead_now
                           color
                           (help "Color of the current lead lyric.")
                           (post_sync {$this set_lyric_color [lead_now] lead [scrolling_now_alpha]})
                        )
                        (lead_past
                           color
                           (help "Color of the lead lyrics after they have been read.")
                           (post_sync {$this set_lyric_color [lead_past] lead [scrolling_past_alpha]})
                        )
                        (lead_od_coming
                           color
                           (help "Color of the approaching lead overdrive lyrics.")
                           (post_sync
                              {$this set_lyric_color [lead_od_coming] lead [scrolling_coming_alpha]}
                           )
                        )
                        (lead_od_now
                           color
                           (help "Color of the current lead overdrive lyric.")
                           (post_sync
                              {$this set_lyric_color [lead_od_now] lead [scrolling_now_alpha]}
                           )
                        )
                        (lead_od_past
                           color
                           (help "Color of the lead overdrive lyrics after they have been read.")
                           (post_sync
                              {$this set_lyric_color [lead_od_past] lead [scrolling_past_alpha]}
                           )
                        )
                     )
                  )
                  (harmony
                     (indent
                        (harmony_coming
                           color
                           (help "Color of the approaching harmony lyrics.")
                           (post_sync
                              {$this set_lyric_color [harmony_coming] harmony [scrolling_coming_alpha]}
                           )
                        )
                        (harmony_now
                           color
                           (help "Color of the current harmony lyric.")
                           (post_sync
                              {$this set_lyric_color [harmony_now] harmony [scrolling_now_alpha]}
                           )
                        )
                        (harmony_past
                           color
                           (help "Color of the harmony lyrics after they have been read.")
                           (post_sync
                              {$this set_lyric_color [harmony_past] harmony [scrolling_past_alpha]}
                           )
                        )
                        (harmony_od_coming
                           color
                           (help "Color of the approaching harmony overdrive lyrics.")
                           (post_sync
                              {$this set_lyric_color
                                 [harmony_od_coming]
                                 harmony
                                 [scrolling_coming_alpha]
                              }
                           )
                        )
                        (harmony_od_now
                           color
                           (help "Color of the current harmony overdrive lyric.")
                           (post_sync
                              {$this set_lyric_color [harmony_od_now] harmony [scrolling_now_alpha]}
                           )
                        )
                        (harmony_od_past
                           color
                           (help "Color of the harmony overdrive lyrics after they have been read.")
                           (post_sync
                              {$this set_lyric_color [harmony_od_past] harmony [scrolling_past_alpha]}
                           )
                        )
                     )
                  )
                  (alpha
                     (indent
                        (scrolling_coming_alpha
                           float
                           (range 0 1)
                           (help "Alpha for coming lyrics.")
                        )
                        (scrolling_now_alpha
                           float
                           (range 0 1)
                           (help "Alpha for active lyric.")
                        )
                        (scrolling_past_alpha
                           float
                           (range 0 1)
                           (help "Alpha for past lyrics.")
                        )
                     )
                  )
               )
            )
            (static
               (indent
                  (lead
                     (indent
                        (lead_static_preview
                           color
                           (help "Color of the preview lead lyrics.")
                           (post_sync
                              {$this set_lyric_color [lead_static_preview] lead [static_preview_alpha]}
                           )
                        )
                        (lead_static_coming
                           color
                           (help "Color of the approaching lead lyrics in the current phrase.")
                           (post_sync
                              {$this set_lyric_color [lead_static_coming] lead [static_coming_alpha]}
                           )
                        )
                        (lead_static_now
                           color
                           (help "Color of the current lead lyric.")
                           (post_sync
                              {$this set_lyric_color [lead_static_now] lead [static_now_alpha]}
                           )
                        )
                        (lead_static_past
                           color
                           (help "Color of the lead lyrics after they have been read.")
                           (post_sync
                              {$this set_lyric_color [lead_static_past] lead [static_past_alpha]}
                           )
                        )
                        (lead_static_od_preview
                           color
                           (help "Color of the preview lead lyrics.")
                           (post_sync
                              {$this set_lyric_color
                                 [lead_static_od_preview]
                                 lead
                                 [static_preview_alpha]
                              }
                           )
                        )
                        (lead_static_od_coming
                           color
                           (help
                              "Color of the approaching lead overdrive lyrics in the current phrase."
                           )
                           (post_sync
                              {$this set_lyric_color [lead_static_od_coming] lead [static_coming_alpha]}
                           )
                        )
                        (lead_static_od_now
                           color
                           (help "Color of the current lead overdrive lyric.")
                           (post_sync
                              {$this set_lyric_color [lead_static_od_now] lead [static_now_alpha]}
                           )
                        )
                        (lead_static_od_past
                           color
                           (help "Color of the lead overdrive lyrics after they have been read.")
                           (post_sync
                              {$this set_lyric_color [lead_static_od_past] lead [static_past_alpha]}
                           )
                        )
                     )
                  )
                  (harmony
                     (indent
                        (harmony_static_preview
                           color
                           (help "Color of the preview harmony lyrics.")
                           (post_sync
                              {$this set_lyric_color
                                 [harmony_static_preview]
                                 harmony
                                 [static_preview_alpha]
                              }
                           )
                        )
                        (harmony_static_coming
                           color
                           (help "Color of the approaching harmony lyrics in the current phrase.")
                           (post_sync
                              {$this set_lyric_color
                                 [harmony_static_coming]
                                 harmony
                                 [static_coming_alpha]
                              }
                           )
                        )
                        (harmony_static_now
                           color
                           (help "Color of the current harmony lyric.")
                           (post_sync
                              {$this set_lyric_color [harmony_static_now] harmony [static_now_alpha]}
                           )
                        )
                        (harmony_static_past
                           color
                           (help "Color of the harmony lyrics after they have been read.")
                           (post_sync
                              {$this set_lyric_color [harmony_static_past] harmony [static_past_alpha]}
                           )
                        )
                        (harmony_static_od_preview
                           color
                           (help "Color of the preview harmony overdrive lyrics.")
                           (post_sync
                              {$this set_lyric_color
                                 [harmony_static_od_preview]
                                 harmony
                                 [static_preview_alpha]
                              }
                           )
                        )
                        (harmony_static_od_coming
                           color
                           (help
                              "Color of the approaching harmony overdrive lyrics in the current phrase."
                           )
                           (post_sync
                              {$this set_lyric_color
                                 [harmony_static_od_coming]
                                 harmony
                                 [static_coming_alpha]
                              }
                           )
                        )
                        (harmony_static_od_now
                           color
                           (help "Color of the current harmony overdrive lyric.")
                           (post_sync
                              {$this set_lyric_color [harmony_static_od_now] harmony [static_now_alpha]}
                           )
                        )
                        (harmony_static_od_past
                           color
                           (help "Color of the harmony overdrive lyrics after they have been read.")
                           (post_sync
                              {$this set_lyric_color
                                 [harmony_static_od_past]
                                 harmony
                                 [static_past_alpha]
                              }
                           )
                        )
                     )
                  )
                  (alpha
                     (indent
                        (static_preview_alpha
                           float
                           (range 0 1)
                           (help "Alpha for static preview lyrics.")
                        )
                        (static_coming_alpha
                           float
                           (range 0 1)
                           (help "Alpha for static current phrase lyrics.")
                        )
                        (static_now_alpha
                           float
                           (range 0 1)
                           (help "Alpha for static active lyric.")
                        )
                        (static_past_alpha
                           float
                           (range 0 1)
                           (help "Alpha for static past lyrics.")
                        )
                     )
                  )
               )
            )
         )
      )
      (track_decoration
         (indent
            (left_deco_mesh
               object
               (class Mesh)
               (post_sync {$this reset})
            )
            (right_deco_mesh
               object
               (class Mesh)
               (post_sync {$this reset})
            )
         )
      )
      (now_bar
         (indent
            (now_bar_width
               float
               (help "the width of the now bar mesh")
               (post_sync {$this reset})
            )
            (now_bar_mesh
               object
               (class Mesh)
               (post_sync {$this reset})
            )
         )
      )
      (pitch_guides
         symbol
         (list (none evenly_spaced harmonic staff keyboard))
         (post_sync {$this reset})
      )
      (tube_style object (class Object tube_style))
      (arrow_style
         object
         (class Object arrow_style)
         (post_sync {$this apply_arrow_style [arrow_style]})
      )
      (font_style
         object
         (class Object font_style)
         (post_sync {$this apply_font_style [font_style]})
      )
      (deploy_sections
         (indent
            (lead_deploy_mat
               object
               (class Mat)
               (post_sync {{$this find lead_deploy.mesh} set mat [lead_deploy_mat]})
            )
            (harmony_deploy_mat
               object
               (class Mat)
               (post_sync {{$this find harmony_deploy.mesh} set mat [harmony_deploy_mat]})
            )
         )
      )
      (phrase_feedback
         (indent
            (feedback_state_lead
               int
               (range -1 4)
               (post_sync
                  {$this set_feedback_state
                     [feedback_state_lead]
                     [feedback_state_harm_1]
                     [feedback_state_harm_2]
                  }
               )
               (help
                  "Rating after a phrase 0 - Lousy 1 - Poor 2 - Ok 3 - Good 4 - Great -1 - Empty Phrase."
               )
               (no_test)
            )
            (feedback_state_harm_1
               int
               (range -1 4)
               (post_sync
                  {$this set_feedback_state
                     [feedback_state_lead]
                     [feedback_state_harm_1]
                     [feedback_state_harm_2]
                  }
               )
               (help
                  "Rating after a phrase 0 - Lousy 1 - Poor 2 - Ok 3 - Good 4 - Great -1 - Empty Phrase."
               )
               (no_test)
            )
            (feedback_state_harm_2
               int
               (range -1 4)
               (post_sync
                  {$this set_feedback_state
                     [feedback_state_lead]
                     [feedback_state_harm_1]
                     [feedback_state_harm_2]
                  }
               )
               (help
                  "Rating after a phrase 0 - Lousy 1 - Poor 2 - Ok 3 - Good 4 - Great -1 - Empty Phrase."
               )
               (no_test)
            )
            (phrase_feedback_trig object (class EventTrigger))
         )
      )
      (vocalist_volume object (class RndDir))
      (configurable_objects
         (array object (class Trans))
         (help "Objects which can change transform or showing per configuration.")
      )
      (vox_configuration
         object
         (class Object vocals_configuration)
         (post_sync {$this reset})
      )
      (side_fade_length float (post_sync {$this update_fade}))
      (spotlight_success_objects
         (indent
            (spotlight_sparkles_only_trig object (class EventTrigger))
            (spotlight_phrase_success_trig object (class EventTrigger))
         )
      )
      COMMON_BANDTRACK_EDITOR
   )
   (types
      (test
         (editor (text_lyrics script (script {$this test_lyrics})))
         (test_lyrics {word.txt set_text "Current Line"})
      )
   )
   COMMON_BANDTRACK_DATA
)
#define COMMON_TRACKPANELDIR_EDITOR (
   (view_time_easy float (post_sync {$this configure_tracks}))
   (view_time_expert float (post_sync {$this configure_tracks}))
   (net_track_alpha float (post_sync {$this configure_tracks}))
   (configuration
      object
      (class Object)
      (post_sync {$this set_configuration [configuration]})
      (help "current configuration")
      (no_test)
   )
   (configurable_objects
      (array object (class Trans))
      (help "Objects which can change transform or showing per configuration.")
   )
)
#define H2H_INSTRUMENT_TYPES ("kInstGuitar" "kInstDrum" "kInstBass" "kInstVocals" "kInstRealGuitar")
(H2HTrackPanelDir
   (description "panel dir that handles tracks & hud in head-to-head mode")
   (superclasses PanelDir)
   (editor
      (reset
         script
         (script
            {$this configure_tracks}
            {$this reset}
         )
      )
      (instrument
         int
         (list (H2H_INSTRUMENT_TYPES))
         (refresh configuration)
         (no_test)
         (post_sync
            {$this configure_tracks}
            {$this play_intro}
         )
      )
      (track_0_net
         bool
         (post_sync {$this configure_tracks})
         (no_test)
      )
      (track_1_net
         bool
         (post_sync {$this configure_tracks})
         (no_test)
      )
      (test_score
         int
         (post_sync {$this set_score_diff [test_score]})
         (no_test)
      )
      COMMON_TRACKPANELDIR_EDITOR
   )
   (types)
)
#define GEM_INSTRUMENT_TYPES (
   "kInstNone"
   "kInstGuitar"
   "kInstDrum"
   "kInstBass"
   "kInstKeys"
   "kInstRealGuitar"
)
(TrackPanelDir
   (description "panel dir that handles tracks & hud")
   (superclasses PanelDir)
   (editor
      (reset
         script
         (script
            {$this reset}
            {$this configure_tracks}
         )
      )
      (vocals
         bool
         (refresh vocals_net)
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (vocals_net
         bool
         (hide {! [vocals]})
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (instrument_A
         int
         (list (GEM_INSTRUMENT_TYPES))
         (refresh inst_A_net configuration)
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (inst_A_net
         bool
         (hide {== [instrument_A] -1})
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (instrument_B
         int
         (list (GEM_INSTRUMENT_TYPES))
         (refresh inst_B_net configuration)
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (inst_B_net
         bool
         (hide {== [instrument_B] -1})
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (instrument_C
         int
         (list (GEM_INSTRUMENT_TYPES))
         (refresh inst_C_net configuration)
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (inst_C_net
         bool
         (hide {== [instrument_C] -1})
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (instrument_D
         int
         (list (GEM_INSTRUMENT_TYPES))
         (refresh inst_D_net configuration)
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (inst_D_net
         bool
         (hide {== [instrument_D] -1})
         (no_test)
         (post_sync {$this configure_tracks})
      )
      (test_multiplier
         int
         (post_sync {$this set_multiplier [test_multiplier]})
         (no_test)
      )
      COMMON_TRACKPANELDIR_EDITOR
      (turn_everything_on
         script
         (script
            {player_intro_00 icon_show}
            {player_intro_01 icon_show}
            {player_intro_02 icon_show}
            {player_intro_03 icon_show}
            {player_intro_00 set_talking 1}
            {player_intro_01 set_talking 1}
            {player_intro_02 set_talking 1}
            {player_intro_03 set_talking 1}
            {player_feedback_00 start_solo}
            {player_feedback_00 set_percent 75}
            {player_feedback_01 start_solo}
            {player_feedback_01 set_percent 25}
            {player_feedback_02 start_solo}
            {player_feedback_02 set_percent 100}
            {player_feedback_03 start_solo}
            {player_feedback_03 set_percent 50}
            {failed_feedback_00 failed 3}
            {failed_feedback_01 failed 3}
            {failed_feedback_02 failed 3}
            {failed_feedback_03 failed 3}
            {popup_help_00 drum_fill}
            {popup_help_01 drum_fill}
            {popup_help_02 drum_fill}
            {popup_help_03 drum_fill}
            {scoreboard set_score_milo 1234567}
            {crowd_meter worst_case}
            {$this set_multiplier 4}
            {mtv_overlay set_showing 1}
            {do
               ($obj)
               {set $obj {vocals get popup_object}}
               {if {!= $obj ""}
                  {$obj scream}
               }
               {set $obj {vocals get player_feedback}}
               {if {!= $obj ""}
                  {$obj start_solo}
                  {$obj set_percent 35}
               }
               {set $obj {vocals get player_intro}}
               {if {!= $obj ""}
                  {$obj icon_show}
                  {$obj set_talking 1}
               }
            }
         )
      )
      (turn_everything_off
         script
         (script
            {player_intro_00 reset}
            {player_intro_01 reset}
            {player_intro_02 reset}
            {player_intro_03 reset}
            {player_intro_00 set_talking 0}
            {player_intro_01 set_talking 0}
            {player_intro_02 set_talking 0}
            {player_intro_03 set_talking 0}
            {player_feedback_00 reset}
            {player_feedback_01 reset}
            {player_feedback_02 reset}
            {player_feedback_03 reset}
            {failed_feedback_00 reset}
            {failed_feedback_01 reset}
            {failed_feedback_02 reset}
            {failed_feedback_03 reset}
            {popup_help_00 reset}
            {popup_help_01 reset}
            {popup_help_02 reset}
            {popup_help_03 reset}
            {scoreboard set_score_milo 0}
            {crowd_meter reset}
            {$this set_multiplier 1}
            {mtv_overlay set_showing 0}
            {do
               ($obj)
               {set $obj {vocals get popup_object}}
               {if {!= $obj ""}
                  {$obj reset}
               }
               {set $obj {vocals get player_feedback}}
               {if {!= $obj ""}
                  {$obj reset}
               }
               {set $obj {vocals get player_intro}}
               {if {!= $obj ""}
                  {$obj reset}
               }
            }
         )
      )
      (game_won script (script {$this game_won}))
      (game_lost script (script {$this game_lost}))
      (everyone_deploy
         script
         (script
            {track_0 deploy}
            {track_1 deploy}
            {track_2 deploy}
            {track_3 deploy}
            {vocals deploy}
            {keys deploy}
         )
      )
      (everyone_stop_deploy
         script
         (script
            {track_0 stop_deploy}
            {track_1 stop_deploy}
            {track_2 stop_deploy}
            {track_3 stop_deploy}
            {vocals stop_deploy}
            {keys stop_deploy}
         )
      )
   )
   (types)
)
(StreakMeterDir
   (description "streak meter for band tracks")
   (superclasses RndDir)
)
(EndingBonusDir
   (description "BRE/unison phrase popup")
   (superclasses RndDir)
   (editor
      (start
         script
         (script {$this start})
         (help "Start the ending bonus.")
      )
      (reset
         script
         (script {$this reset})
         (help "Reset the ending bonus.")
      )
      (success
         script
         (script {$this success})
         (help "Plays success.trig at the end of the bonus.")
      )
      (failure
         script
         (script {$this coda_end})
         (help "Plays failure.trig at the end of the bonus.")
      )
      (score
         int
         (post_sync {$this set_score [score]})
         (help "Ending bonus score.")
         (no_test)
      )
      (unison_start script (script {$this unison_start}))
      (unison_end script (script {$this unison_end}))
      (unison_succeed script (script {$this unison_succeed}))
   )
   (types)
)
(PitchArrowDir
   (description "singer's vocal HUD pitch guide arrow")
   (superclasses RndDir)
   (editor
      (reset
         script
         (script {$this reset})
         (help "reset to the current param values")
      )
      (arrow_style int)
      (toggle_pitched
         script
         (script {$this toggle_pitched})
         (refresh pitched)
      )
      (pitched bool (read_only 1))
      (toggle_spotlight
         script
         (script {$this toggle_spotlight})
         (refresh spotlight)
      )
      (spotlight bool (read_only 1))
      (toggle_deploying
         script
         (script {$this toggle_deploying})
         (refresh deploying)
      )
      (deploying bool (read_only 1))
      (volume
         float
         (range 0 1)
         (help
            "arrow alpha driven by the mic volume in the current frame, normalized between 0 and 1"
         )
         (post_sync {$this sync_volume})
      )
      (tilt
         float
         (range -90 90)
         (post_sync {$this sync_tilt})
         (help "the tilt of the arrow direction in degrees")
      )
      (score
         float
         (range 0 1)
         (help "the score for the current frame, normalized between 0 and 1")
         (post_sync {$this sync_score})
      )
      (harmony_fx
         float
         (range 0 2)
         (help "extra bonus fx that play when nailing harmony with another part")
         (post_sync {$this sync_harm_score})
      )
      (test_color
         symbol
         (list (green yellow orange brown purple blue white))
         (post_sync {$this sync_color})
      )
      (color_fade
         float
         (range 0 1)
         (help
            "controls the saturation of the arrow color: 0 = max saturation, 1 = no saturation"
         )
         (post_sync {$this sync_color_fade})
      )
      (helix_fx_spin_control
         (indent
            (spin_speed
               float
               (help
                  "controls the spin speed for helix particle effects.  Can be animated"
               )
            )
            (spin_anim
               object
               (class Anim)
               (help
                  "this anim will loop its loop range according to the value of spin_speed"
               )
            )
            (spin_begin_frame float (help "loop start frame for spin_anim"))
            (spin_end_frame float (help "loop end frame for spin_anim"))
            (spin_rest_frame
               float
               (help "frame where spin_anim should be when spin_speed is zero")
            )
         )
      )
   )
   (types)
)
#define kMomentNone (0)
#define kMomentSuccess (1)
#define kMomentFail (2)
(EventCompleteDir
   (description "PanelDir for tour event complete screens")
   (superclasses PanelDir)
   (editor
      (enabled bool (no_test))
      (play
         script
         (script {$this play})
         (help "Play animations")
      )
      (skip
         script
         (script {$this skip})
         (help "Skip to end of animations")
      )
      (items
         (array
            (struct
               (anim object (class Anim))
               (icon_label object (class BandLabel))
               (icon_label_str string)
               (text_label object (class BandLabel))
               (text_label_str string)
               (text_label_start int)
               (text_label_end int)
               (sfx object (class Sequence))
               (active bool)
               (moment_success_group object (class Group))
               (moment_fail_group object (class Group))
               (moment_name symbol)
               (moment_success_label object (class BandLabel))
               (moment_fail_label object (class BandLabel))
               (moment_str string)
               (moment_end int)
               (moment_sfx object (class Sequence))
               (moment_state int (list ("kMomentNone" "kMomentSuccess" "kMomentFail")))
            )
         )
      )
      (initial_delay float range (0 5.0))
      (anim_time float range (0 5.0))
      (count_time float range (0 5.0))
      (moment_time float range (0 5.0))
      (challenge_list object (class BandList))
   )
   (types)
)
#define BANDCHARDESC_OUTFITPIECE (
   (struct
      (name
         symbol
         (list
            {$this list_outfits {elem $milo_prop_path {- {size $milo_prop_path} 2}}}
         )
      )
      (color0 int)
      (color1 int)
   )
)
#define BANDCHARDESC_OUTFIT (
   (struct
      (earrings BANDCHARDESC_OUTFITPIECE)
      (facehair BANDCHARDESC_OUTFITPIECE)
      (glasses BANDCHARDESC_OUTFITPIECE)
      (hair BANDCHARDESC_OUTFITPIECE)
      (piercings BANDCHARDESC_OUTFITPIECE)
      (feet BANDCHARDESC_OUTFITPIECE)
      (hands BANDCHARDESC_OUTFITPIECE)
      (legs BANDCHARDESC_OUTFITPIECE)
      (rings BANDCHARDESC_OUTFITPIECE)
      (torso BANDCHARDESC_OUTFITPIECE)
      (wrist BANDCHARDESC_OUTFITPIECE)
   )
)
#define BANDCHARDESC_INSTRUMENTOUTFIT (
   (struct
      (guitar BANDCHARDESC_OUTFITPIECE)
      (bass BANDCHARDESC_OUTFITPIECE)
      (drum BANDCHARDESC_OUTFITPIECE)
      (mic BANDCHARDESC_OUTFITPIECE)
      (keyboard BANDCHARDESC_OUTFITPIECE)
   )
)
(BandCharDesc
   (description
      "Band Character Description, contains all physical appearance attributes."
   )
   (superclasses)
   (editor
      (gender
         symbol
         (list (male female))
         (help "take a wild guess")
      )
      (instrument_type
         symbol
         (list (none guitar bass drum mic keyboard))
         (help "character's current instrument")
      )
      (skin_color int (help "skin color, taken from skin.pal"))
      (head
         (struct
            (eye_color int (help "eye color index"))
            (shape
               int
               (help "shape of the head index")
               (range 0 {- {$this shape_num} 1})
            )
            (chin
               int
               (help "chin index 0-2")
               (range 0 {- {$this chin_num} 1})
            )
            (chin_width
               float
               (help "chin length 0-1")
               (range 0 1)
            )
            (chin_height
               float
               (help "chin height 0-1")
               (range 0 1)
            )
            (jaw_width
               float
               (help "jaw length 0-1")
               (range 0 1)
            )
            (jaw_height
               float
               (help "jaw height 0-1")
               (range 0 1)
            )
            (nose
               int
               (help "nose index")
               (range 0 {- {$this nose_num} 1})
            )
            (nose_width
               float
               (help "nose width 0-1")
               (range 0 1)
            )
            (nose_height
               float
               (help "nose height 0-1")
               (range 0 1)
            )
            (eye
               int
               (help "eye index")
               (range 0 {- {$this eye_num} 1})
            )
            (eye_separation
               float
               (help "eye separation 0-1")
               (range 0 1)
            )
            (eye_height
               float
               (help "eye height 0-1")
               (range 0 1)
            )
            (mouth
               int
               (help "mouth index")
               (range 0 {- {$this mouth_num} 1})
            )
            (mouth_width
               float
               (help "mouth width 0-1")
               (range 0 1)
            )
            (mouth_height
               float
               (help "mouth height 0-1")
               (range 0 1)
            )
            (brow_separation
               float
               (help "eyebrow separation 0-1")
               (range 0 1)
            )
            (brow_height
               float
               (help "eyebrow height 0-1")
               (range 0 1)
            )
            (hide bool (help "if true, loads no head, for development"))
         )
      )
      (eyebrows BANDCHARDESC_OUTFITPIECE)
      (instruments BANDCHARDESC_INSTRUMENTOUTFIT (help "instruments"))
      (street BANDCHARDESC_OUTFIT (help "street clothing"))
      (stage BANDCHARDESC_OUTFIT (help "stage clothing"))
      (deform_frame
         int
         (help "Frame that we're currently showing")
         (no_test)
      )
      (cycle_deform
         script
         (help "Cycles through the deformations")
         (script {$this cycle_deform})
         (refresh deform_frame)
      )
   )
   (types)
)
(BandCharacter
   (description "Band Character")
   (superclasses Character BandCharDesc)
   (editor
      (tempo
         symbol
         (help "song tempo")
         (list (slow medium fast))
      )
      (start_load
         script
         (help "loads clips + outfits according to current settings")
         (script {$this start_load 0})
      )
      (show_stage bool (help "show stage outfits or street outfits"))
      (head_lookat_weight
         float
         (help "What fraction to drive the head lookat")
         (no_test)
      )
      (mic_ik
         object
         (class CharIKHead)
         (help " the mic ik ")
      )
      (prefab
         object
         (class BandCharDesc)
         (dir {bandchardesc_prefabs})
         (help "prefab to copy from or to")
      )
      (load_prefab
         script
         (script {$this load_prefab})
         (help "make the char look like this prefab")
      )
      (save_prefab
         script
         (script {$this save_prefab})
         (help "make the prefab look like the char AND save to disk")
      )
      (reload_prefabs
         script
         (script {bandchardesc_reload_prefabs})
         (help
            "Reloads all prefabs off of disk, use if you just deleted or added a prefab"
         )
      )
      (group_name
         string
         (list
            {object_list
               {if_else [driver]
                  {[driver] get clips}
                  {object ''}
               }
               CharClipGroup
               1
            }
         )
         (help "the group name to use for animating")
         (no_test)
      )
      (toggle_interests_overlay
         script
         (script {$this toggle_interests_overlay})
         (help "Toggles display of debug overlay for interest objects")
      )
      (find_new_interests
         script
         (script {$this find_interest_objects {$this dir}})
         (help
            "If you add an interest, hit this to let the character know about it"
         )
      )
   )
   (types)
)
(CharKeyHandMidi
   (description
      "Keyboard hookups to a midi parser, calculates finger destinations."
   )
   (allowed_dirs Character)
   (superclasses CharPollable CharWeightable)
   (ext keyhand)
   (editor
      (first_spot
         object
         (class Trans)
         (help "Spot at 0%")
      )
      (second_spot
         object
         (class Trans)
         (help "Spot at 100%")
      )
      (ik_object
         object
         (class CharIKFingers)
         (help "CharIKFingers object")
      )
      (run_test script (script {$this run_test}))
      (end_test script (script {$this end_test}))
   )
   (types
      (musician
         (parser_up keyboard_rh_fingers_up)
         (parser_down keyboard_rh_fingers_down)
         (editor
            (parser_up symbol (help "Name of the midi parser for finger up events"))
            (parser_down
               symbol
               (help "Name of the midi parser for finger down events")
            )
         )
         (enter
            {if {exists [parser_up]}
               {[parser_up] add_sink $this}
            }
            {if {exists [parser_down]}
               {[parser_down] add_sink $this}
            }
         )
         (exit
            {handle ([parser_up] remove_sink $this)}
            {handle ([parser_down] remove_sink $this)}
         )
         (game_over
            {handle ([parser_up] remove_sink $this)}
            {handle ([parser_down] remove_sink $this)}
         )
      )
   )
)
(BandWardrobe
   (description
      "Manager class that clothes characters and loads animations under different conditions"
   )
   (test_singleton)
   (editor
      (play_mode
         symbol
         (list (BAND_PLAY_MODES))
         (help
            "Which play mode to use, will reload characters + re-pick directed cuts"
         )
         (no_test 1)
      )
      (shot_set_play_mode
         bool
         (help
            "Allow editing a shot or putting it into the anim bar to set the play_mode"
         )
         (no_test 1)
      )
      (play_shot_5
         bool
         (help
            "Will play the shot_5 camera track, remapping invalid shot categories on the fly"
         )
         (no_test 1)
      )
      (genre
         symbol
         (list (rocker banger dramatic spazz))
         (help "default genres to load in Milo")
         (no_test 1)
      )
      (tempo
         symbol
         (list (slow medium fast))
         (help "default tempo to load in Milo")
         (no_test 1)
      )
      (prefab1
         symbol
         (list {$this prefabs_list})
         (help "prefab prefix of player1")
      )
      (prefab2
         symbol
         (list {$this prefabs_list})
         (help "prefab prefix of player2")
      )
      (prefab3
         symbol
         (list {$this prefabs_list})
         (help "prefab prefix of player3")
      )
      (prefab4
         symbol
         (list {$this prefabs_list})
         (help "prefab prefix of player4")
      )
   )
   (types)
)
(CrowdAudio
   (description "Crowd Audio, makes the crowd cheer and such")
   (superclasses Poll)
   (editor)
   (types)
)
(BandDirector
   (description
      "Band Director, sits in each song file and manages camera + scene changes"
   )
   (superclasses Poll Draw)
   (init {set [scenetrigger] ''})
   (editor
      (debug_char_interests
         script
         (script {$this debug_char_interests})
         (help
            "Cycles through each character, enabling debug rendering of its interest objects"
         )
      )
      (toggle_interests_overlay
         script
         (script {$this toggle_interests_overlay})
         (help "Toggles display of debug overlay for interest objects")
      )
      (song_properties
         (indent
            (bass_intensity
               symbol
               (list (BAND_BASS_EVENTS))
               (help "bass play intensity")
               (no_test 1)
            )
            (drum_intensity
               symbol
               (list (BAND_DRUM_EVENTS))
               (help "drum play intensity")
               (no_test 1)
            )
            (guitar_intensity
               symbol
               (list (BAND_GUITAR_EVENTS))
               (help "guitar play intensity")
               (no_test 1)
            )
            (mic_intensity
               symbol
               (list (BAND_MIC_EVENTS))
               (help "mic play intensity")
               (no_test 1)
            )
            (keyboard_intensity
               symbol
               (list (BAND_KEYBOARD_EVENTS))
               (help "keyboard play intensity")
               (no_test 1)
            )
            (crowd
               symbol
               (list (BAND_CROWD_EVENTS))
               (help "Crowd commands")
               (no_test 1)
            )
            (shot_5
               symbol
               (list ('' COOP_CAM_CATS DIRECTED_CAM_CATS))
               (help "Five instrument authored BandCamShot categories")
               (no_test)
               (propanim_annotate {$this shot_annotate shot_5})
            )
            (shot_bg
               symbol
               (list {$this get_cat_list coop_bg ('' COOP_CAM_CATS DIRECTED_CAM_CATS)})
               (help "Bass + Guitar BandCamShot categories")
               (no_test)
               (propanim_annotate {$this shot_annotate shot_bg})
            )
            (shot_bk
               symbol
               (list {$this get_cat_list coop_bk ('' COOP_CAM_CATS DIRECTED_CAM_CATS)})
               (help "Bass + Keyboard BandCamShot category")
               (no_test)
               (propanim_annotate {$this shot_annotate shot_bk})
            )
            (shot_gk
               symbol
               (list {$this get_cat_list coop_gk ('' COOP_CAM_CATS DIRECTED_CAM_CATS)})
               (help "Guitar + Keyboard BandCamShot categories")
               (no_test)
               (propanim_annotate {$this shot_annotate shot_gk})
            )
            (cur_shot
               object
               (class CamShot)
               (help "currently shown camshot, nice for debugging.")
               (read_only 1)
               (no_test)
            )
            (cur_world
               object
               (class WorldDir)
               (help "currently shown world, nice for debugging.")
               (read_only 1)
               (no_test)
            )
            (excitement
               int
               (help "excitement level")
               (read_only 1)
               (no_test)
            )
            (num_players_failed
               int
               (help "how many have failed")
               (read_only 1)
               (no_test)
            )
            (postproc
               object
               (class PostProc)
               (interp_handlers postproc_interp)
               (propanim_blockview 1)
               (dir {milo cur_dir})
               (help "the current venue postproc.")
               (no_test)
            )
            (cam_postproc
               object
               (class PostProc)
               (help "camera postproc override.  If set, does no postproc blends")
               (read_only 1)
               (no_test)
            )
            (lightpreset
               symbol
               (list (LIGHTING_CATEGORIES))
               (interp_handlers lightpreset_interp)
               (help "the current light preset")
               (no_test)
            )
            (lightpreset_keyframe
               symbol
               (list (PRESET_KEYFRAMES))
               (interp_handlers lightpreset_keyframe_interp)
               (help
                  "author next/prev/first keyframe commands for manual presets: strobes, etc."
               )
               (no_test)
            )
            (world_event
               symbol
               (list (none BAND_WORLD_EVENTS))
               (help "author chorus or verse-specific events, as well as bonusfx")
               (no_test)
            )
            (spot_bass
               symbol
               (list (on off))
               (help "author character-specific spotlights")
               (no_test)
            )
            (spot_drums
               symbol
               (list (on off))
               (help "author character-specific spotlights")
               (no_test)
            )
            (spot_guitar
               symbol
               (list (on off))
               (help "author character-specific spotlights")
               (no_test)
            )
            (spot_keyboard
               symbol
               (list (on off))
               (help "author character-specific spotlights")
               (no_test)
            )
            (spot_vocal
               symbol
               (list (on off))
               (help "author character-specific spotlights")
               (no_test)
            )
            (stagekit_fog
               symbol
               (list (on off))
               (help "author Stage Kit fog machine start/stop events")
               (no_test)
            )
         )
         (help
            "These are the properties animated by the song, displayed here for debugging"
         )
      )
   )
   (types)
)
(P9SongPref
   (description "P9 Song Specific dreamscape and venue preferences")
   (editor
      (venue
         symbol
         (list (budokan cavern dreamscape rooftop shea sullivan))
         (help "Venue is played in")
         (refresh)
      )
      (minivenues
         (array symbol)
         (help "list of minivenues to load")
         P9_HIDE_DREAM
      )
      (scenes
         (array symbol)
         (help "list of scenes to load")
         P9_HIDE_DREAM
      )
      (scene_groups
         (array
            (struct
               (name symbol (help "name of the scene group"))
               (scenetriggers
                  (array symbol)
                  (help "array of random scene triggers to choose from")
               )
            )
         )
         (help
            "array of scene groups, you can use them during authoring and it picks a random scene trigger from inside it"
         )
         P9_HIDE_DREAM
      )
      (song_clips
         symbol
         (help "name of song clips to load, usually just same name as song.")
      )
   )
   (types)
)
(ChordShapeGenerator
   (description
      "a tool for generating arbitrary real guitar chord shape gems from sample geometry"
   )
   (editor
      (chord_source_mesh
         object
         (class Mesh)
         (help "sample mesh from which to create chord meshes")
      )
      (finger_source_mesh
         object
         (class Mesh)
         (help "sample mesh from which to create finger shape meshes")
      )
      (geometric_guides
         (indent
            (base_cross_section
               object
               (class Trans)
               (help
                  "determines where the cross section will be taken to generate the open-string parts of the chord shape"
               )
            )
            (contour_cross_section
               object
               (class Trans)
               (help
                  "determines where the cross section will be taken to generate the fretted parts of the chord shape"
               )
            )
            (base_height
               object
               (class Trans)
               (help
                  "indicated where the top of the base is - everything above this height will be scaled according to the fret position."
               )
            )
         )
      )
      (num_slots
         int
         (range 4 6)
         (help "how many strings the instrument has")
         (refresh
            frets
            smasher_positions
            string_4_fret
            string_5_fret
            string_4
            string_5
         )
      )
      (frets
         (indent
            (string_0_fret
               int
               (range -1 4)
               (help "the fret value for the low E string")
            )
            (string_1_fret
               int
               (range -1 4)
               (help "the fret value for the A string")
            )
            (string_2_fret
               int
               (range -1 4)
               (help "the fret value for the D string")
            )
            (string_3_fret
               int
               (range -1 4)
               (help "the fret value for the G string")
            )
            (string_4_fret
               int
               (range -1 4)
               (help "the fret value for the B string")
               (hide {< [num_slots] 5})
            )
            (string_5_fret
               int
               (range -1 4)
               (help "the fret value for the high E string")
               (hide {< [num_slots] 6})
            )
         )
         (help "the fret position on each string for this chord")
      )
      (smasher_positions
         (indent
            (string_0
               object
               (class Trans)
               (help "position of the low E smasher")
            )
            (string_1
               object
               (class Trans)
               (help "position of the A smasher")
            )
            (string_2
               object
               (class Trans)
               (help "position of the D smasher")
            )
            (string_3
               object
               (class Trans)
               (help "position of the G smasher")
            )
            (string_4
               object
               (class Trans)
               (help "position of the B smasher")
               (hide {< [num_slots] 5})
            )
            (string_5
               object
               (class Trans)
               (help "position of the high E smasher")
               (hide {< [num_slots] 6})
            )
         )
         (help
            "list of smashers from left to right - determines where we consider each string to be"
         )
      )
      (fret_heights
         (indent
            (fret_height_1
               float
               (range 0 5)
               (help "height when fret = 1")
            )
            (fret_height_2
               float
               (range 0 5)
               (help "height when fret = 2")
            )
            (fret_height_3
               float
               (range 0 5)
               (help "height when fret = 3")
            )
            (fret_height_4
               float
               (range 0 5)
               (help "height when fret = 4")
            )
         )
         (help
            "determines the height of the chord shape at a string according to the fret"
         )
      )
      (grade_distances
         (indent
            (grade_distance_1
               float
               (range 0 1)
               (help
                  "how much space the slant takes as a proportion of the width of a smasher when transitioning between fret numbers that differ by 1"
               )
            )
            (grade_distance_2
               float
               (range 0 1)
               (help
                  "how much space the slant takes as a proportion of the width of a smasher when transitioning between fret numbers that differ by 2"
               )
            )
            (grade_distance_3
               float
               (range 0 1)
               (help
                  "how much space the slant takes as a proportion of the width of a smasher when transitioning between fret numbers that differ by 3"
               )
            )
         )
         (help
            "this value controls how steep the slant is between different fret numbers"
         )
      )
      (BUILD script (script {$this generate_chord_shape}))
   )
   (types)
)
(UnisonIcon
   (description "player feedback in a unison phrase")
   (superclasses RndDir)
   (editor
      (reset script (script {$this reset}))
      (start script (script {$this start}))
      (end script (script {$this end}))
      (succeed script (script {$this succeed}))
      (fail script (script {$this fail}))
      (progress
         float
         (range 0 1)
         (no_test)
      )
   )
   (types)
)
(BandConfiguration
   (description
      "Band Configuration, sits in each venue and stores xfms per target per play mode"
   )
   (editor
      (store
         script
         (script {$this store_configuration})
         (help "store the current character locations into this configuration")
      )
      (release
         script
         (script {$this release_configuration})
         (help
            "releases the characters from their waypoints, so they can be moved around in preparation for storing."
         )
      )
      (view
         script
         (script {$this sync_play_mode})
         (help "Re-teleports the characters to their waypoint positions.")
      )
   )
   (types)
)
(OvershellDir
   (description "panel dir that handles the overshell")
   (superclasses PanelDir)
   (types)
)