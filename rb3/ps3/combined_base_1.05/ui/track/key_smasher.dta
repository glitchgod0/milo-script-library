(RndDir
   (types
      (key_smasher
         (editor
            (config
               symbol
               (list
                  (full left right middle_d middle_g middle_a black))
               (post_sync
                  {$this apply_config}))
            (show_marker
               bool
               (post_sync
                  {$this update_marker})
               (refresh marker_octave))
            (marker_octave
               int
               (range -1 4)
               (hide
                  {!
                     [show_marker]})
               (post_sync
                  {$this update_marker}))
            (press
               script
               (script
                  {$this press}))
            (release
               script
               (script
                  {$this release}))
            (hit
               script
               (script
                  {$this hit}))
            (miss
               script
               (script
                  {$this miss}))
            (burn
               script
               (script
                  {$this burn}))
            (stop_burn
               script
               (script
                  {$this stop_burn}))
            (intro
               script
               (script
                  {$this intro}))
            (reset
               script
               (script
                  {$this reset})))
         (config_applied FALSE)
         (config full proxy_save)
         (burning FALSE)
         (glow FALSE)
         (show_marker FALSE proxy_save)
         (marker_octave -1 proxy_save)
         (reset
            {if
               {!
                  [config_applied]}
               {$this apply_config}}
            {set
               [glow]
               FALSE}
            {if_else
               {$this showing}
               {press.anim set frame 0.0}
               {press.anim set frame -4.0}}
            {if
               {exists reset.trig}
               {reset.trig trigger}}
            {set
               [burning]
               TRUE}
            {$this stop_burn}
            {sustain.anim set frame 0.0})
         (apply_config
            {switch
               [config]
               (full
                  {config.anim set frame 0})
               (right
                  {config.anim set frame 1})
               (middle_d
                  {config.anim set frame 2})
               (middle_g
                  {config.anim set frame 2.2})
               (middle_a
                  {config.anim set frame 2.4})
               (left
                  {config.anim set frame 3})
               (black
                  {config.anim set frame 4})}
            {$this update_marker}
            {set
               [config_applied]
               TRUE})
         (update_marker
            {if_else
               [show_marker]
               {do
                  {marker_octave.anim
                     set
                     frame
                     [marker_octave]}
                  {white_key_00.mesh
                     set
                     mat
                     {object keysmasher_colored.mat}}
                  {white_key_01.mesh
                     set
                     mat
                     {object keysmasher_colored.mat}}}
               {do
                  {white_key_00.mesh
                     set
                     mat
                     {object keysmasher.mat}}
                  {white_key_01.mesh
                     set
                     mat
                     {object keysmasher.mat}}}})
         (reset_particles
            {$this
               iterate_self
               (Object particle_launcher)
               $launcher
               {do
                  ($part
                     {$launcher get part})
                  {if
                     $part
                     {$part clear_all_particles}}}})
         (press
            {$this set_glow TRUE})
         (release
            {$this set_glow FALSE})
         (show_key
            {show.trig trigger})
         (hide_key
            {hide.trig trigger})
         (hit
            {hit.trig trigger})
         (hit_bonus
            {hit.trig trigger})
         (coda_hit
            {hit.trig trigger})
         (set_glow
            ($val)
            {if_else
               {$this showing}
               {do
                  {if_else
                     $val
                     {press.trig trigger}
                     {release.trig trigger}}
                  {set
                     [glow]
                     $val}}
               {set
                  [glow]
                  FALSE}})
         (burn
            {burn.trig trigger}
            {set
               [burning]
               TRUE})
         (burn_bonus
            {burn.trig trigger}
            {set
               [burning]
               TRUE})
         (coda_burn
            {burn.trig trigger}
            {set
               [burning]
               TRUE})
         (stop_burn
            {if
               [burning]
               {stop_burn.trig trigger}
               {set
                  [burning]
                  FALSE}})
         (miss
            {if_else
               [glow]
               {miss.trig trigger}
               {miss_after_release.trig trigger}})
         (intro
            {if
               {exists intro.trig}
               {intro.trig trigger}})
         (set_marker_octave
            ($val)
            {set
               [marker_octave]
               $val}
            {$this update_marker}))
      (key_smasher_plate
         (editor
            (reset
               script
               (script
                  {$this reset}))
            (range
               int
               (range 7 15)
               (post_sync
                  {$this update_range}))
            (shift
               float
               (range 0 5)
               (post_sync
                  {shift.anim
                     set
                     frame
                     [shift]}))
            (setup_draworder
               script
               (script
                  {$this setup_draworder TRUE}))
            (lane_coloring
               symbol
               (list
                  (black_and_white colored none))
               (post_sync
                  {$this update_lane_coloring}))
            (smasher_list
               (array
                  object
                  (class RndDir)))
            (test
               script
               (script
                  {$this test 0.2}))
            (fast_test
               script
               (script
                  {$this test 5.0e-2}))
            (stop_test
               script
               (script
                  {$this stop_test}))
            (press_all_keys
               script
               (script
                  {$this press_all}))
            (release_all_keys
               script
               (script
                  {$this release_all})))
         (range 7 proxy_save)
         (shift 0)
         (draw_order_set FALSE)
         (lane_coloring black_and_white)
         (smasher_list
            ())
         (enter
            {$this reset})
         (reset
            {$this update_range}
            {$this update_lane_coloring}
            {$this
               iterate_self
               (RndDir key_smasher)
               $smasher
               {$smasher reset}})
         (update_range
            {set
               $width
               {/
                  7
                  [range]}}
            {width.anim set frame $width}
            {$this
               iterate_self
               (RndDir key_smasher)
               $smasher
               {{$smasher find smasher_width.anim}
                  set
                  frame
                  $width}}
            {set
               $gem_width_anim
               {{$this dir}
                  find
                  key_gem_width.anim}}
            {if
               {!= $gem_width_anim ''}
               {$gem_width_anim set frame $width}})
         (setup_draworder
            ($force)
            {if
               {&&
                  {$this is_proxy}
                  {!
                     [draw_order_set]}}
               {$this reset}
               {$this collect_objects_by_color rail_lane_miss_00.mesh key_lanes.grp TRUE TRUE}
               {$this collect_objects_by_color rail_lane_miss_01.mesh key_lanes.grp TRUE TRUE}
               {$this collect_objects_by_color rail_lane_miss_02.mesh key_lanes.grp TRUE TRUE}
               {$this collect_objects_by_color rail_lane_00.mesh key_lanes.grp TRUE TRUE}
               {$this collect_objects_by_color rail_lane_01.mesh key_lanes.grp TRUE TRUE}
               {$this collect_objects_by_color rail_lane_02.mesh key_lanes.grp TRUE TRUE}
               {$this collect_objects_by_color white_smashers.grp key_meshes.grp TRUE FALSE}
               {$this collect_objects_by_color black_smashers.grp key_meshes.grp FALSE TRUE}
               {$this collect_particles effects.grp after_gems.grp}
               {smashers.grp set_showing FALSE}
               {set
                  [draw_order_set]
                  TRUE}})
         (collect_objects_by_color
            ($obj_name $dst_group $white $black)
            {$this
               iterate_self
               (RndDir key_smasher)
               $smasher
               {if
                  {'||'
                     {&&
                        $black
                        {==
                           {$smasher get config}
                           black}}
                     {&&
                        $white
                        {!=
                           {$smasher get config}
                           black}}}
                  {$dst_group
                     add_object
                     {$smasher find $obj_name}}}})
         (collect_objects_by_config
            ($obj_name $dst_group $config)
            {$this
               iterate_self
               (RndDir key_smasher)
               $smasher
               {if
                  {==
                     {$smasher get config}
                     $config}
                  {$dst_group
                     add_object
                     {$smasher find $obj_name}}}})
         (collect_particles
            ($src_group_name $dst_group)
            {set $source_smasher first_polled_smasher_C_1}
            {set
               $src_group
               {$source_smasher find $src_group_name}}
            {set
               $parts
               {$src_group get_array objects}}
            {foreach
               $part
               $parts
               {$dst_group add_object $part}
               {$src_group remove_object $part}
               {$part set_trans_parent $this}
               {$part set_local_pos 0.0 0.0 0.0}
               {$part set_local_rot 0.0 0.0 0.0}
               {do
                  ($scale_x 1.0)
                  ($scale_y 1.0)
                  ($scale_z 1.0)
                  {$this get_local_scale $scale_x $scale_y $scale_z}
                  {$part
                     set_local_scale
                     {/ 1.0 $scale_x}
                     {/ 1.0 $scale_y}
                     {/ 1.0 $scale_z}}}}
            {$this
               iterate_self
               (RndDir key_smasher)
               $smasher
               {if
                  {!= $smasher $source_smasher}
                  {set
                     $parts
                     {$dst_group get_array objects}}
                  {foreach
                     $part
                     $parts
                     {$smasher
                        iterate_self
                        (Object particle_launcher)
                        $launcher
                        {if
                           {==
                              {{$launcher get part}
                                 name}
                              {$part name}}
                           {$launcher set part $part}}}}}}
            {$this
               iterate_self
               (RndDir key_smasher)
               $smasher
               {if
                  {!= $smasher $source_smasher}
                  {set
                     $parts
                     {$dst_group get_array objects}}
                  {foreach
                     $part
                     $parts
                     {set
                        $local_part_copy
                        {$smasher
                           find
                           {$part name}}}
                     {{$smasher find $src_group_name}
                        remove_object
                        $local_part_copy}
                     {delete $local_part_copy}}}})
         (show_octave_lanes
            ($val)
            {if_else
               $val
               {set $alpha 0.1}
               {set $alpha 0}}
            {$this
               iterate_self
               (RndDir key_smasher)
               $smasher
               {{$smasher find rail_octave.mat}
                  set
                  alpha
                  $alpha}})
         (show_white_key_grading
            ($val)
            {if_else
               $val
               {set $alpha 1}
               {set $alpha 0}}
            {$this
               iterate_self
               (RndDir key_smasher)
               $smasher
               {{$smasher find rail_grading.mat}
                  set
                  alpha
                  $alpha}})
         (miss_left
            {{$this dir}
               key_miss_left})
         (miss_right
            {{$this dir}
               key_miss_right})
         (cycle_lane_coloring
            {switch
               [lane_coloring]
               (black_and_white
                  {set
                     [lane_coloring]
                     colored})
               (colored
                  {set
                     [lane_coloring]
                     none})
               (none
                  {set
                     [lane_coloring]
                     black_and_white})}
            {$this update_lane_coloring}
            [lane_coloring])
         (update_lane_coloring
            {switch
               [lane_coloring]
               (black_and_white
                  {smasher_C_0 set_marker_octave -1}
                  {smasher_D_0 set_marker_octave -1}
                  {smasher_E_0 set_marker_octave -1}
                  {smasher_F_0 set_marker_octave 4}
                  {smasher_G_0 set_marker_octave 4}
                  {smasher_A_0 set_marker_octave 4}
                  {smasher_B_0 set_marker_octave 4}
                  {first_polled_smasher_C_1 set_marker_octave -1}
                  {smasher_D_1 set_marker_octave -1}
                  {smasher_E_1 set_marker_octave -1}
                  {smasher_F_1 set_marker_octave 4}
                  {smasher_G_1 set_marker_octave 4}
                  {smasher_A_1 set_marker_octave 4}
                  {smasher_B_1 set_marker_octave 4}
                  {smasher_C_2 set_marker_octave -1})
               (colored
                  {smasher_C_0 set_marker_octave 0}
                  {smasher_D_0 set_marker_octave 0}
                  {smasher_E_0 set_marker_octave 0}
                  {smasher_F_0 set_marker_octave 3}
                  {smasher_G_0 set_marker_octave 3}
                  {smasher_A_0 set_marker_octave 3}
                  {smasher_B_0 set_marker_octave 3}
                  {first_polled_smasher_C_1 set_marker_octave 1}
                  {smasher_D_1 set_marker_octave 1}
                  {smasher_E_1 set_marker_octave 1}
                  {smasher_F_1 set_marker_octave 2}
                  {smasher_G_1 set_marker_octave 2}
                  {smasher_A_1 set_marker_octave 2}
                  {smasher_B_1 set_marker_octave 2}
                  {smasher_C_2 set_marker_octave 4})
               (none
                  {smasher_C_0 set_marker_octave -1}
                  {smasher_D_0 set_marker_octave -1}
                  {smasher_E_0 set_marker_octave -1}
                  {smasher_F_0 set_marker_octave -1}
                  {smasher_G_0 set_marker_octave -1}
                  {smasher_A_0 set_marker_octave -1}
                  {smasher_B_0 set_marker_octave -1}
                  {first_polled_smasher_C_1 set_marker_octave -1}
                  {smasher_D_1 set_marker_octave -1}
                  {smasher_E_1 set_marker_octave -1}
                  {smasher_F_1 set_marker_octave -1}
                  {smasher_G_1 set_marker_octave -1}
                  {smasher_A_1 set_marker_octave -1}
                  {smasher_B_1 set_marker_octave -1}
                  {smasher_C_2 set_marker_octave -1})})
         (press_all
            {foreach
               $smasher
               [smasher_list]
               {$smasher set_glow TRUE}})
         (release_all
            {foreach
               $smasher
               [smasher_list]
               {$smasher set_glow FALSE}})
         (test
            ($sleep_time)
            {$this reset}
            {$this stop_test}
            {thread_task
               kTaskSeconds
               (name smasher_plate_test)
               (script
                  {foreach
                     $smasher
                     [smasher_list]
                     {$smasher set_glow FALSE}}
                  {if
                     {>
                        {random_int 0 6}
                        2}
                     {do
                        ($smasher)
                        {set
                           $smasher
                           {elem
                              [smasher_list]
                              {random_int
                                 0
                                 {size
                                    [smasher_list]}}}}
                        {while
                           {!
                              {$smasher showing}}
                           {set
                              $smasher
                              {elem
                                 [smasher_list]
                                 {random_int
                                    0
                                    {size
                                       [smasher_list]}}}}}
                        {$smasher set_glow TRUE}
                        {$smasher hit}
                        {if
                           {>=
                              {random_int 0 3}
                              2}
                           {set
                              $smasher
                              {elem
                                 [smasher_list]
                                 {random_int
                                    0
                                    {size
                                       [smasher_list]}}}}
                           {while
                              {!
                                 {$smasher showing}}
                              {set
                                 $smasher
                                 {elem
                                    [smasher_list]
                                    {random_int
                                       0
                                       {size
                                          [smasher_list]}}}}}
                           {$smasher set_glow TRUE}
                           {$smasher hit}}}}
                  {$task sleep $sleep_time}
                  {$task loop})})
         (stop_test
            {if
               {exists smasher_plate_test}
               {delete smasher_plate_test}}
            {foreach
               $smasher
               [smasher_list]
               {$smasher set_glow FALSE}})
         (key_miss_right)
         (key_miss_left))))