#autorun
{func
   freeze_bones
   ($clip)
   {do
      ($bones
         {array 0})
      {switch
         {$clip get_type}
         ((guitar_body drum_body keyboard_body)
            {if
               {==
                  {&
                     {$clip get flags}
                     kLeftArm}
                  0}
               {insert_elems
                  $bones
                  0
                  (bone_L-hand.pos bone_L-hand.quat bone_L-index01.quat bone_L-index02.rotz bone_L-index03.rotz bone_L-middlefinger01.quat bone_L-middlefinger02.rotz bone_L-middlefinger03.rotz bone_L-pinky01.quat bone_L-pinky02.rotz bone_L-pinky03.rotz bone_L-ringfinger01.quat bone_L-ringfinger02.rotz bone_L-ringfinger03.rotz bone_L_thumb01.quat bone_L_thumb02.rotz bone_L_thumb03.rotz)}}
            {if
               {==
                  {&
                     {$clip get flags}
                     kRightArm}
                  0}
               {insert_elems
                  $bones
                  0
                  (bone_R-hand.pos bone_R-hand.quat bone_R-index01.quat bone_R-index02.rotz bone_R-index03.rotz bone_R-middlefinger01.quat bone_R-middlefinger02.rotz bone_R-middlefinger03.rotz bone_R-pinky01.quat bone_R-pinky02.rotz bone_R-pinky03.rotz bone_R-ringfinger01.quat bone_R-ringfinger02.rotz bone_R-ringfinger03.rotz bone_R_thumb01.quat bone_R_thumb02.rotz bone_R_thumb03.rotz)}})
         ((keyboard_left_hand keyboard_right_hand)
            {if
               {==
                  {&
                     {$clip get flags}
                     kLeftArm}
                  0}
               {insert_elems
                  $bones
                  0
                  (bone_L-index01.quat bone_L-index02.rotz bone_L-index03.rotz bone_L-middlefinger01.quat bone_L-middlefinger02.rotz bone_L-middlefinger03.rotz bone_L-pinky01.quat bone_L-pinky02.rotz bone_L-pinky03.rotz bone_L-ringfinger01.quat bone_L-ringfinger02.rotz bone_L-ringfinger03.rotz bone_L_thumb01.quat bone_L_thumb02.rotz bone_L_thumb03.rotz)}}
            {if
               {==
                  {&
                     {$clip get flags}
                     kRightArm}
                  0}
               {insert_elems
                  $bones
                  0
                  (bone_R-index01.quat bone_R-index02.rotz bone_R-index03.rotz bone_R-middlefinger01.quat bone_R-middlefinger02.rotz bone_R-middlefinger03.rotz bone_R-pinky01.quat bone_R-pinky02.rotz bone_R-pinky03.rotz bone_R-ringfinger01.quat bone_R-ringfinger02.rotz bone_R-ringfinger03.rotz bone_R_thumb01.quat bone_R_thumb02.rotz bone_R_thumb03.rotz)}})
         (extras
            {if
               0
               {insert_elems
                  $bones
                  0
                  (bone_L-ankle.quat bone_L-knee.rotz bone_L-thigh.quat bone_L-toe.rotz bone_R-ankle.quat bone_R-knee.rotz bone_R-thigh.quat bone_R-toe.rotz)}})}
      {if
         {size $bones}
         {$clip freeze_bones $bones}}}}
#define MAIN_BODY_COMPRESSION
((tolerance 3.0)
   (bones
      (bone_R-ankle.mesh
         (weight 0.85))
      (bone_L-ankle.mesh
         (weight 0.85))
      (bone_R-hand.mesh)
      (bone_L-hand.mesh)
      (bone_L-index03.mesh)
      (bone_L-middlefinger03.mesh)
      (bone_L-ringfinger03.mesh)
      (bone_L-pinky03.mesh)
      (bone_L-thumb03.mesh)
      (bone_R-index03.mesh)
      (bone_R-middlefinger03.mesh)
      (bone_R-ringfinger03.mesh)
      (bone_R-pinky03.mesh)
      (bone_R-thumb03.mesh)
      (bone_head.mesh
         (weight 1.5)
         (offset 3 6 0))
      (bone_head.mesh
         (weight 1.5)
         (offset -2 6 0))
      (bone_footik.mesh
         (weight 2))))
#define VIGNETTE_COMPRESSION
((tolerance 1.0)
   (bones
      (bone_R-ankle.mesh
         (weight 0.85))
      (bone_L-ankle.mesh
         (weight 0.85))
      (bone_R-hand.mesh)
      (bone_L-hand.mesh)
      (bone_L-index03.mesh)
      (bone_L-middlefinger03.mesh)
      (bone_L-ringfinger03.mesh)
      (bone_L-pinky03.mesh)
      (bone_L-thumb03.mesh)
      (bone_R-index03.mesh)
      (bone_R-middlefinger03.mesh)
      (bone_R-ringfinger03.mesh)
      (bone_R-pinky03.mesh)
      (bone_R-thumb03.mesh)
      (bone_head.mesh
         (weight 1.5)
         (offset 3 6 0))
      (bone_head.mesh
         (weight 1.5)
         (offset -2 6 0))
      (bone_footik.mesh
         (weight 2))
      (bone_prop0.mesh)
      (bone_prop1.mesh)
      (bone_prop2.mesh)
      (bone_prop3.mesh)))
#define EXTRAS_COMPRESSION
((tolerance 3.0)
   (bones
      (bone_R-ankle.mesh
         (weight 0.85))
      (bone_L-ankle.mesh
         (weight 0.85))
      (bone_R-hand.mesh)
      (bone_L-hand.mesh)
      (bone_L-index03.mesh)
      (bone_L-middlefinger03.mesh)
      (bone_L-ringfinger03.mesh)
      (bone_L-pinky03.mesh)
      (bone_L-thumb03.mesh)
      (bone_R-index03.mesh)
      (bone_R-middlefinger03.mesh)
      (bone_R-ringfinger03.mesh)
      (bone_R-pinky03.mesh)
      (bone_R-thumb03.mesh)
      (bone_head.mesh
         (weight 1.5)
         (offset 3 6 0))
      (bone_head.mesh
         (weight 1.5)
         (offset -2 6 0))
      (bone_jaw.mesh)))
#define CROWD_COMPRESSION
((tolerance 3.0)
   (bones
      (bone_R-ankle.mesh
         (weight 0.85))
      (bone_L-ankle.mesh
         (weight 0.85))
      (bone_R-hand.mesh)
      (bone_L-hand.mesh)
      (bone_head.mesh
         (weight 1.5)
         (offset 3 6 0))
      (bone_head.mesh
         (weight 1.5)
         (offset -2 6 0))))
#define VISEME_COMPRESSION
((tolerance 5.0e-2)
   (bones
      (bone_L-brow1.mesh)
      (bone_L-brow2.mesh)
      (bone_L-brow3.mesh)
      (bone_L-cheek.mesh)
      (bone_L-cheek2.mesh)
      (bone_L-crease.mesh)
      (bone_L-eyelid-low.mesh)
      (bone_L-lid.mesh
         (offset 1 0 0))
      (bone_L-lipcorner.mesh)
      (bone_L-nose.mesh)
      (bone_R-brow1.mesh)
      (bone_R-brow2.mesh)
      (bone_R-brow3.mesh)
      (bone_R-cheek.mesh)
      (bone_R-cheek2.mesh)
      (bone_R-crease.mesh)
      (bone_R-eyelid-low.mesh)
      (bone_R-lid.mesh
         (offset 1 0 0))
      (bone_R-lipcorner.mesh)
      (bone_R-nose.mesh)
      (bone_brow-low.mesh)
      (bone_brow-mid.mesh)
      (bone_chin.mesh)
      (bone_forehead.mesh)
      (bone_head.mesh)
      (bone_jaw.mesh)
      (bone_liptop_left.mesh)
      (bone_liptop_mid.mesh)
      (bone_liptop_right.mesh)
      (bone_lowlip_left.mesh)
      (bone_lowlip_mid.mesh)
      (bone_lowlip_right.mesh)
      (bone_neck.mesh)
      (bone_nose.mesh)
      (bone_tongue1.mesh)
      (bone_tongue2.mesh)
      (bone_tongue3.mesh)
      (bone_tongue4.mesh
         (offset 1 0 0))
      (bone_lowlip_left.mesh)
      (bone_lowlip_right.mesh)
      (bone_lowlip_mid.mesh)))
#autorun
{func
   pre_process_clip
   ($clip)
   {freeze_bones $clip}
   {$clip
      set_note
      ""}
   {if_else
      {==
         {$clip get_type}
         "viseme"}
      {$clip change_compression kCompressRots}
      {$clip change_compression kCompressVects}}
   {switch
      {$clip get_type}
      ((guitar_body keyboard_body drum_body mic_body)
         (MAIN_BODY_COMPRESSION))
      ((vignette shell)
         (VIGNETTE_COMPRESSION))
      (viseme
         (VISEME_COMPRESSION))
      (crowd
         (CROWD_COMPRESSION))
      (extras
         (EXTRAS_COMPRESSION))
      0}}
#autorun
{func
   process_clips
   ($dir)
   {if
      {$dir is_a CharClipSet}
      {do
         ($path
            {$dir get_path_name})
         {print
            "loading "
            $path
            "\n"}
         {set
            $loaded_dir
            {load_objects $path}}
         {search_replace
            $path
            "anim_src/"
            ""
            $path}
         {$dir perforce_sync $path}
         {$loaded_dir
            iterate_self
            CharClip
            $c
            {set
               $comparray
               {pre_process_clip $c}}}
         {if
            $comparray
            {char_compress_clips $loaded_dir $comparray kCompressionDistanceAndSpeed 1}}
         {if_else
            {has_any_substr
               $path
               ("/world/vignette/"
                  "/world/meta/closet")}
            {do
               {set
                  $non_animsrc_dir
                  {load_objects $path}}
               {if_else
                  $non_animsrc_dir
                  {do
                     {$non_animsrc_dir
                        iterate_self
                        CharClip
                        $c
                        {set
                           $replace_clip
                           {$loaded_dir
                              find
                              {$c name}}}
                        {if
                           $replace_clip
                           {$replace_clip
                              set
                              (sync_anim)
                              {$c
                                 get
                                 (sync_anim)}}}
                        {delete $c}}
                     {$non_animsrc_dir
                        iterate_self
                        CharClipGroup
                        $g
                        {delete $g}}
                     {merge_dirs $loaded_dir $non_animsrc_dir kMergeReplace 0}
                     {$non_animsrc_dir perforce_resave}}
                  {$loaded_dir perforce_save $path}}}
            {$loaded_dir perforce_save $path}}}}}
#autorun
{func
   process_single_clip
   ($dir $clip)
   {if
      {$dir is_a CharClipSet}
      {do
         ($path
            {$dir get_path_name})
         {search_replace
            $path
            "anim_src/"
            ""
            $path}
         {$dir perforce_sync $path}
         {set
            $dst_dir
            {load_objects $path}}
         {if
            {! $dst_dir}
            {$dir perforce_save $path 1}
            {set
               $dst_dir
               {load_objects $path}}}
         {if_else
            $dst_dir
            {do
               {if_else
                  $clip
                  {do
                     {set
                        $comparray
                        {pre_process_clip $clip}}
                     {if
                        $comparray
                        {char_compress_single_clip $clip $comparray kCompressionDistanceAndSpeed}}
                     {set
                        $old_clip
                        {$dst_dir
                           find
                           {$clip name}}}
                     {set
                        $groups
                        {$clip groups}}
                     {if_else
                        $old_clip
                        {do
                           {$clip
                              set
                              (sync_anim)
                              {$old_clip
                                 get
                                 (sync_anim)}}
                           {replace_object $old_clip $clip FALSE}}
                        {$clip
                           set_name
                           {$clip name}
                           $dst_dir}}
                     {foreach
                        $group
                        $groups
                        {create_clipgroup_and_addclip
                           {$group name}
                           $dst_dir
                           $clip}}
                     {print
                        "saving out to "
                        $path
                        "\n"}
                     {$dst_dir perforce_save $path}
                     {$clip
                        set
                        (sync_anim)
                        ''}}
                  {print
                     "Couldn't find clip "
                     $clipname
                     " in "
                     $path
                     "\n"}}
               {delete $dst_dir}}
            {print
               "Couldn't create file "
               $path
               ".  Does the parent structure exist?\n"}}}}}
#autorun
{func
   create_clipgroup_and_addclip
   ($grpName $dir $clip)
   {set
      $clipGrp
      {$dir find $grpName}}
   {unless
      {&&
         $clipGrp
         {$clipGrp is_a CharClipGroup}}
      {set
         $clipGrp
         {new CharClipGroup}}
      {$clipGrp set_name $grpName $dir}}
   {unless
      {$clipGrp has_clip $clip}
      {$clipGrp add_clip $clip}}}