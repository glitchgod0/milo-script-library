(ObjectDir (types (song)))
(UIFontImporter (default_bitmap_path "ui/resource/image"))
(UILabel
   (resources_path "resource/fonts/")
   (init {set [styles 0 font_resource] bureaugrot_wide_bold})
   (flow_commands
      (set_leaderboard_user_name
         (editor (entry object (class LeaderboardEntry)))
         (entry '')
      )
      (set_dynamic_leaderboard_player_user_name
         (editor (entry object (class DynamicLeaderboardPlayer)))
         (entry '')
      )
      (set_int_with_icon
         (editor
            (integer int)
            (icon_token string (help "Token placed after the comma-separated number"))
         )
         (integer 0)
         (icon_token "")
      )
      (set_ordinal
         (editor (num int))
         (num 0)
      )
      (set_token_with_number
         (editor
            (token symbol (list {$this token_list}))
            (number int)
         )
         (token '')
         (number 0)
      )
      (set_token_with_suffix
         (editor
            (token symbol (list {$this token_list}))
            (suffix string)
         )
         (token '')
         (suffix "")
      )
      (set_dynamic_controller_token
         (editor (token symbol (list {$this token_list})))
         (token '')
      )
      (set_webcode
         (editor (webcode string))
         (webcode "")
      )
   )
)
(UIButton
   (resources_path "resource/fonts/")
   (init {set [styles 0 font_resource] bureaugrot_wide_bold})
)
(UIList
   (allowed_dirs RndDir)
   (resources_path "resource/lists/")
   (init {set [list_resource] list})
)
(UISlider (resources_path "resource/sliders/"))
(InlineHelp
   (allowed_dirs RndDir)
   (resources_path "resource/inline_help")
   (init
      {set [resource] default}
      {$this set_type default}
   )
   (types
      (default
         (text_label "text.lbl")
         (action_chars (joypad "" "A" "B" "Y" "S" "s" "" "" "" "" "" "R" "" "" "X"))
      )
   )
)
(RndDir
   (types
      (cred_results_stats
         (editor
            (which_instrument_icon
               symbol
               (list
                  (
                     (drums "Drums")
                     (bass "Bass")
                     (guitar "Guitar")
                     (vocals "Vocals")
                     (keys "Keyboard")
                     (genre "Genre")
                  )
               )
               (help "Determines which icon we show")
            )
            (accuracy_counter int (help "Final value for accuracy counter"))
            (cred_increase int (help "Final value for cred increase counter"))
            (cred_total_start int (help "Initial value for cred total"))
            (has_track bool (help "Should we display this info."))
            (animating_accuracy
               bool
               (help "Set to FALSE when the accuracy counting animation finishes.")
            )
            (animating_cred
               bool
               (help "Set to FALSE when the cred counting animation finishes.")
            )
            (done_animating
               bool
               (help "Set to TRUE when the all animations are finished.")
            )
            (dummy_cred_counter int (help "Dummy value, used to drive counting anim"))
            (dummy_accuracy_counter
               int
               (help "Dummy value, used to drive counting anim")
            )
         )
         (accuracy_counter 80)
         (cred_increase 930)
         (cred_total_start 45230)
         (has_track TRUE)
         (which_instrument_icon drums)
         (animating_cred FALSE)
         (animating_accuracy FALSE)
         (done_animating FALSE)
         (dummy_cred_counter 0)
         (dummy_accuracy_counter 0)
         (update_accuracy
            {accuracy.lbl set_token_fmt
               results_accuracy_value
               [dummy_accuracy_counter]
            }
            {if {== [dummy_accuracy_counter] [accuracy_counter]}
               {$this set animating_accuracy FALSE}
               {if {! [animating_cred]}
                  {$this set done_animating TRUE}
               }
            }
         )
         (update_cred
            {increase.lbl set_token_fmt
               results_cred_increase_value
               [dummy_cred_counter]
            }
            {cred.lbl set_token_fmt
               results_cred_value
               {'+' [cred_total_start] [dummy_cred_counter]}
            }
            {if {== [dummy_cred_counter] [cred_increase]}
               {$this set animating_cred FALSE}
               {if {! [animating_accuracy]}
                  {$this set done_animating TRUE}
               }
            }
         )
         (reset_values
            {$this set animating_accuracy FALSE}
            {$this set animating_cred FALSE}
            {$this set done_animating FALSE}
            {$this set dummy_accuracy_counter 0}
            {$this set dummy_cred_counter 0}
         )
         (flow_commands (update_accuracy) (update_cred) (reset_values))
      )
      (recommendation_icon_proxy
         (editor
            (rec_type int (help "The RecommendationType we should be showing."))
         )
         (rec_type 1)
      )
   )
)
(PanelDir
   (types
      (transitioning_panel
         (editor
            (in_transition bool (help "Are we still playing a transition animation?"))
            (frames_for_transition
               int
               (help "Number of frames of animation for transitions")
            )
            (start_header int (help "Which index of the header we are changing from"))
            (target_header int (help "Which index of the header we are changing to"))
            (start_group int (help "Which group of screens we are changing from"))
            (target_group int (help "Which group of screens we are changing to"))
            (anim_type
               symbol
               (list
                  (
                     (shift_left "Animate plots moving left")
                     (shift_right "Animate plots moving right")
                     (shift_up "Animate plots moving up")
                     (shift_down "Animate plots moving down")
                  )
               )
               (help "Which direction we are going in")
            )
         )
         (supported_events (animate_store_banner))
         (in_transition FALSE)
         (frames_for_transition 10)
         (start_header 0)
         (target_header 0)
         (start_group 0)
         (target_group 0)
         (anim_type shift_left)
      )
      (challenge_request_proxy
         (help "Panel properties used to signal challenge-related flow events.")
         (editor
            (challenge_popup_state
               symbol
               (list
                  (
                     (force_hidden "Challenge Request popup hidden, no animations.")
                     (hidden "Challenge Request popup hidden.")
                     (loading "Challenge Request popup is visible and loading.")
                     (visible "Challenge Request response is visible and not loading.")
                  )
               )
               (help "The visual state of the Challenge Request popup.")
            )
         )
         (challenge_popup_state hidden)
      )
      (options_panel
         (editor
            (which_options
               symbol
               (list
                  (
                     (none "This is the main options menu")
                     (audio_video "Audio and Video Options")
                  )
               )
            )
         )
         (which_options none)
      )
      (powerup_select_panel
         (editor
            (coins int (help "How much money do we currently have?"))
            (coins_display
               int
               (help "How much money would you have after this purchase?")
            )
            (purchase_total
               int
               (help "How much is the sum total of all powerups we've selected?")
            )
            (purchasing
               bool
               (help
                  "Are we currently waiting for the server to tell us whether our purchase was successful."
               )
            )
            (main_powerup_menu
               symbol
               (list
                  (
                     (active "Active powerups catagory")
                     (passive_a "Passive powerups a catagory")
                     (passive_b "Passive powerups b catagory")
                     (play_song "Play song")
                     (none "None of the powerup displays")
                  )
               )
            )
         )
         (coins 0)
         (coins_display 0)
         (purchase_total 0)
         (purchasing FALSE)
         (main_powerup_menu none)
      )
      (medal_proxy
         (editor (medal_index int (help "Which medal am I?")))
         (medal_index 0 proxy_save)
      )
      (hud
         (editor (blitz_hidden bool (help "Should we show the blitz_meter?")))
         (blitz_hidden FALSE)
      )
      (loading_panel
         (set_powerup_icon
            ($powerup $mat)
            {do
               ($texName
                  {if_else $powerup
                     {sprintf "%s_keep.tex" $powerup}
                     "none_keep.tex"
                  }
               )
               ($tex {$this find $texName})
               {$mat set diffuse_tex $tex}
            }
         )
         (flow_commands
            (set_powerup_icon
               (editor
                  (powerup symbol (list ('' POWERUPS)))
                  (mat object (class Mat))
               )
               (powerup "")
               (mat '')
            )
         )
      )
   )
)
(UIListDir
   (types
      (song_select
         (editor
            (star_on
               object
               (class Mat)
               (help "Material for star on value")
            )
            (star_off
               object
               (class Mat)
               (help "Material for star off value")
            )
            (star_gold
               object
               (class Mat)
               (help "Material for star on gold value")
            )
         )
         (star_on '')
         (star_off '')
         (star_gold '')
      )
      (inbox_messages
         (editor
            (challenge
               object
               (class Mat)
               (help "Material for challenge messages")
            )
            (bonus
               object
               (class Mat)
               (help "Material for bonus song messages")
            )
            (announcement
               object
               (class Mat)
               (help "Material for announcement messages")
            )
            (purchased_songs
               object
               (class Mat)
               (help "Material for recently purchased messages")
            )
            (upsell
               object
               (class Mat)
               (help "Material for upsell messages")
            )
         )
         (challenge '')
         (bonus '')
         (announcement '')
         (purchased_songs '')
         (upsell '')
      )
   )
)
(PropertyEventProvider
   (allowed_dirs ObjectDir)
   (types
      (track_results
         (editor
            (part_name
               symbol
               (list (DRUMS BASS GUITAR VOCALS KEYS))
               (help "The part that this track is (DRUMS, BASS, etc)")
            )
            (prev_cred_level
               int
               (help "The cred level the player had before this song")
            )
            (new_cred_level
               int
               (help "The cred level the player reached from playing this song")
            )
            (anim_cred_level
               int
               (help
                  "The cred level that we're currently animating against (set in Flow)"
               )
            )
            (prev_cred_percent
               int
               (help
                  "The amount of cred (in an int percent) the player had before this song"
               )
            )
            (new_cred_percent
               int
               (help
                  "The new amount of cred (in an int percent) the player reached from playing this song"
               )
            )
            (track_percent_hit int (help "The percent number of gems hit"))
            (track_gems_seen
               int
               (help "The number of gems the player saw on the track")
            )
            (track_gems_hit
               int
               (help "The number of gems the player hit on the track")
            )
         )
         (part_name DRUMS)
         (prev_cred_level 0)
         (new_cred_level 0)
         (anim_cred_level 0)
         (prev_cred_percent 0)
         (new_cred_percent 100)
         (track_percent_hit 0)
         (track_gems_seen 0)
         (track_gems_hit 0)
      )
      (results_panel
         (editor
            (score int (help "The player's score for this song"))
            (previous_high_score
               int
               (help
                  "The highest score attained before this one. Zero if first time playing"
               )
            )
            (stars int (help "The player's stars for this song."))
            (previous_level
               int
               (help "The level we were at before finishing this song")
            )
            (level
               int
               (help
                  "The level reached from this new score (float to represent progress to next level)"
               )
            )
            (anim_level int (help "The currently animating level"))
            (previous_level_percent
               int
               (help "The percent completed of the level before finishing this song")
            )
            (level_percent
               int
               (help "The percent completed of our level after finishing this song")
            )
            (finished_score_animation
               bool
               (help
                  "Have we finished animating the score/stars on the shared results panel?"
               )
            )
            (challenge_id
               int
               (help
                  "ID of the challenge.  If the ID is -1, then there was no challenge on this song."
               )
            )
         )
         (score 0)
         (previous_high_score 0)
         (stars 0)
         (previous_level 0)
         (level 0)
         (previous_level_percent 0)
         (level_percent 0)
         (anim_level 0)
         (finished_score_animation FALSE)
         (challenge_id -1)
      )
      (song_results_panel
         (editor
            (current_cash int (help "The current tallied cash total"))
            (target_cash int (help "The cash total we are counting up to"))
            (current_cred int (help "The current tallied cred total"))
            (target_cred int (help "The cred total we are counting up to"))
            (next_cred_threshold
               int
               (help
                  "How much cred is needed to unlock the next powerup. -1 if no more powerups left"
               )
            )
            (last_cred_threshold
               int
               (help "How much cred was needed to unlock the last powerup.")
            )
            (is_animating bool (help "Are we still animating the last bonus"))
            (cash_bonus_name symbol (help "The name of the bonus we are animating"))
            (cred_bonus_name symbol (help "The name of the bonus we are animating"))
            (cash_countup_speed float (help "The rate at which we count up the cash"))
            (cred_countup_speed float (help "The rate at which we count up the cred"))
         )
         (next_cred_threshold 1000)
         (last_cred_threshold 0)
         (current_cash 0)
         (target_cash 0)
         (current_cred 0)
         (target_cred 0)
         (is_animating FALSE)
         (cash_bonus_name '')
         (cred_bonus_name '')
         (cash_countup_speed 100.0)
         (cred_countup_speed 100.0)
      )
      (leaderboard_events
         (help
            "Event Provider used to signal Leaderboard events, including state change."
         )
         (editor
            (display_state
               symbol
               (list
                  (
                     (hidden "All leaderboard display hidden.")
                     (loading "Show loading animations.")
                     (visible "Show the standard leaderboard display.")
                     (empty "Show the 'no scores yet' text.")
                     (unavailable "Show the 'leaderboards service unavailable' text.")
                  )
               )
               (help "The visual state of the leaderboards.")
            )
         )
         (display_state hidden)
      )
      (store_menu_loading_events
         (help
            "Event Provider used to signal load-state events for the store menu screen."
         )
         (editor
            (load_state
               symbol
               (list
                  (
                     (unavailable "Currently unavailable (unloadable).")
                     (loading "Show loading animations.")
                     (loaded "Loading complete; show normal screen.")
                  )
               )
               (help "The loading state of the menu.")
            )
         )
         (load_state loaded)
      )
      (powerup_unlock_panel
         (editor
            (powerup
               symbol
               (list ('' POWERUPS))
               (help "Which powerup was just unlocked?")
            )
            (powerup_desc symbol (help "token to describe this powerup."))
            (going_forward
               bool
               (help "Are we transitioning the unlock animation forward or backward?")
            )
         )
         (going_forward TRUE)
         (powerup '')
         (powerup_desc '')
      )
      (career_results_panel
         (editor
            (cred_genre int (help "Total cred accumulated for the current Genre."))
            (cred_drums int (help "Total cred accumulated for Drums."))
            (cred_bass int (help "Total cred accumulated for Bass."))
            (cred_guitar int (help "Total cred accumulated for Guitar."))
            (cred_vocals int (help "Total cred accumulated for Vocals."))
            (cred_keys int (help "Total cred accumulated for Keys."))
            (accuracy_genre int (help "Overall accuracy for the curreent Genre."))
            (accuracy_drums int (help "Accuracy for this play of Drums."))
            (accuracy_bass int (help "Accuracy for this play of Bass."))
            (accuracy_guitar int (help "Accuracy for this play of Guitar."))
            (accuracy_vocals int (help "Accuracy for this play of Vocals."))
            (accuracy_keys int (help "Accuracy for this play of Keys."))
         )
         (cred_genre 0)
         (cred_drums 0)
         (cred_bass 0)
         (cred_guitar 0)
         (cred_vocals 0)
         (cred_keys 0)
         (accuracy_genre 0)
         (accuracy_drums 0)
         (accuracy_bass 0)
         (accuracy_guitar 0)
         (accuracy_vocals 0)
         (accuracy_keys 0)
      )
      (pup_breakdown
         (editor
            (base_score int)
            (blitz_mode int)
            (finale int)
            (solo int)
            (power_up_1
               symbol
               (list ('' POWERUPS))
               (help "Which powerup was used")
            )
            (power_up_2
               symbol
               (list ('' POWERUPS))
               (help "Which powerup was used")
            )
            (power_up_3
               symbol
               (list ('' POWERUPS))
               (help "Which powerup was used")
            )
            (power_up_1_amt int)
            (power_up_2_amt int)
            (power_up_3_amt int)
         )
         (power_up_1 '')
         (power_up_2 '')
         (power_up_3 '')
         (power_up_1_amt 0)
         (power_up_2_amt 0)
         (power_up_3_amt 0)
         (base_score 0)
         (blitz_mode 0)
         (finale 0)
         (solo 0)
         (set_powerup_icon
            ($powerup_num $mat)
            {do
               ($powerup
                  {switch $powerup_num
                     (0 [power_up_1])
                     (1 [power_up_2])
                     (2 [power_up_3])
                     none
                  }
               )
               ($texName {sprintf "%s_keep.tex" $powerup})
               ($tex {{$this dir} find $texName})
               {$mat set diffuse_tex $tex}
            }
         )
         (flow_commands
            (set_powerup_icon
               (editor
                  (powerup_num int)
                  (mat object (class Mat))
               )
               (powerup_num 0)
               (mat '')
            )
         )
      )
      (demo_state
         (editor
            (is_in_demo_mode
               bool
               (help "The overall demo state (0 means not in demo mode)")
            )
            (state
               int
               (help "The state of progress along the TSL/Player Profile track")
            )
         )
         (is_in_demo_mode FALSE)
         (state 0)
      )
      (controller_mapping_state
         (editor
            (controller_mapping_index
               int
               (help "Which controller configuration we are mapped to")
            )
            (is_ps3 bool (help "Should we show a PS3 controller instead?"))
         )
         (controller_mapping_index 0)
         (is_ps3 FALSE)
      )
      (audio_video_options
         (editor
            (which_av_option
               symbol
               (list
                  (
                     (overscan_enable "Video Overscan")
                     (active_track_vol "Active Track Volume")
                     (sound_fx_vol "Sound Effects Volume")
                     (bass_boost_enable "Bass Boost")
                     (none "No options selected")
                  )
               )
            )
            (overscan bool (help "Is Overscan enabled?"))
            (active_track_vol_value int (help "Value of the active track volume"))
            (sound_fx_vol_value int (help "Value of the sound effects volume"))
            (bass_boost bool (help "Is Bass Boost enabled?"))
         )
         (which_av_option none)
         (overscan FALSE)
         (active_track_vol_value 5)
         (sound_fx_vol_value 8)
         (bass_boost FALSE)
      )
      (show_apology_state
         (editor
            (should_show_extra_apology
               bool
               (help "Was the connection lost after starting the game?")
            )
         )
         (should_show_extra_apology FALSE)
      )
      (loading_state
         (editor
            (state
               symbol
               (list (loading waiting_for_button))
               (help "The panel could be loading or waiting for user input")
            )
            (active_powerup
               symbol
               (list ('' POWERUPS))
               (help "Which powerup type is being displayed")
            )
            (passive_powerup_a
               symbol
               (list ('' POWERUPS))
               (help "Which powerup type is being displayed")
            )
            (passive_powerup_b
               symbol
               (list ('' POWERUPS))
               (help "Which powerup (from the passive_b type list) is displayed?")
            )
         )
         (state loading)
         (active_powerup '')
         (passive_powerup_a '')
         (passive_powerup_b '')
      )
   )
)
(PlayerPortrait
   (description "Displays player portrait and info")
   (superclasses UIComponent)
   (allowed_dirs RndDir)
   (ext pp)
   (resources_path "resource/player_portrait")
   (init
      {$this set_type default}
      {set [resource] default}
   )
   (editor
      (level int (help "The player's current level"))
      (portrait_index int (help "This player's id for his picture"))
   )
   (types
      (default
         (portraits
            gamerpic_00.tex
            gamerpic_01.tex
            gamerpic_02.tex
            gamerpic_03.tex
            gamerpic_04.tex
            gamerpic_05.tex
            gamerpic_06.tex
            gamerpic_07.tex
            gamerpic_08.tex
            gamerpic_09.tex
            gamerpic_10.tex
            gamerpic_11.tex
            gamerpic_12.tex
            gamerpic_13.tex
            gamerpic_14.tex
            gamerpic_15.tex
            gamerpic_16.tex
            gamerpic_17.tex
            gamerpic_18.tex
            gamerpic_19.tex
            gamerpic_20.tex
            gamerpic_21.tex
            gamerpic_22.tex
            gamerpic_23.tex
            gamerpic_24.tex
            gamerpic_25.tex
            gamerpic_26.tex
            gamerpic_27.tex
            gamerpic_28.tex
            gamerpic_29.tex
         )
      )
   )
)