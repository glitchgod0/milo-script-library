(PropertyEventProvider
   (allowed_dirs ObjectDir)
   (types
      (song_state
         (editor
            (current_beat float ('what beat we are currently on (changes frequently)'))
            (song_ratio
               float
               (help 'How far through the song we are [0 to 1] (changes frequently)')
            )
            (num_tracks int (help "How many tracks are in this song"))
            (up_down float (help 'If the world geometry is going up or down. [-1..1]'))
            (left_right
               float
               (help 'If the world geometry is going left or right. [-1..1]')
            )
            (bounciness
               float
               (help 'If the world geometry is bouncing up and down. [0..1]')
            )
            (snakiness
               float
               (help 'If the world geometry is snaking left and right. [0..1]')
            )
            (bankiness float (help 'How much the track banks when turning. [0..1]'))
            (song_section float (help 'What song section we are currently in.'))
            (beat_type float (help 'What type of beat animation to play right now.'))
            (intensity
               int
               (help 'How intense is the part of the song are we in right now.')
            )
            (shot_category symbol (help 'Shot category'))
            (shot_play_mode symbol (help 'Current play mode for the shot'))
            (bass symbol (help 'The intensity of the bass part'))
            (drum symbol (help 'The intensity of the drum part'))
            (guitar symbol (help 'The intensity of the guitar part'))
            (mic symbol (help 'The intensity of the mic part'))
            (keyboard symbol (help 'The intensity of the keyboard part'))
            (part2_sing
               symbol
               (list (singalong_off singalong_on))
               (help 'Whether part 2 is singing along')
            )
            (part3_sing
               symbol
               (list (singalong_off singalong_on))
               (help 'Whether part 3 is singing along')
            )
            (part4_sing
               symbol
               (list (singalong_off singalong_on))
               (help 'Whether part 4 is singing along')
            )
            (spotlight_bass bool (help 'Whether ths spot on the bass player is on'))
            (spotlight_drums bool (help 'Whether ths spot on the drums player is on'))
            (spotlight_guitar
               bool
               (help 'Whether ths spot on the guitar player is on')
            )
            (spotlight_keyboard
               bool
               (help 'Whether ths spot on the keyboard player is on')
            )
            (spotlight_vocal bool (help 'Whether ths spot on the vocal player is on'))
            (crowd symbol (help 'What would the crowd state be right now.'))
            (lighting symbol (help 'What lighting mode are we in right now.'))
            (section_type symbol (help 'What song section are we in right now.'))
         )
         (event_driven_properties
            {array
               (section_type intensity crowd gem_count_metric lighting)
            }
         )
         (gem_count_metric 0)
         (current_beat 0.0)
         (song_ratio 0.0)
         (up_down 0.0)
         (left_right 0.0)
         (bounciness 0.0)
         (snakiness 0.0)
         (bankiness 0.0)
         (song_section 0.0)
         (beat_type 0.0)
         (num_tracks 4)
         (intensity 1)
         (lighting '')
         (section_type intro)
         (crowd crowd_realtime)
         (spotlight_bass FALSE)
         (spotlight_drums FALSE)
         (spotlight_guitar FALSE)
         (spotlight_keyboard FALSE)
         (spotlight_vocal FALSE)
         (shot_category '')
         (shot_play_mode '')
         (bass idle_realtime)
         (drum idle_realtime)
         (guitar idle_realtime)
         (mic idle_realtime)
         (keyboard idle_realtime)
         (part2_sing singalong_off)
         (part3_sing singalong_off)
         (part4_sing singalong_off)
      )
      (powerups_state
         (editor
            (active_powerup
               symbol
               (list ('' POWERUPS))
               (help "Which powerup type is being displayed")
            )
            (passive_powerup_a
               symbol
               (list ('' POWERUPS))
               (help "Which powerup type is being displayed")
            )
            (passive_powerup_b
               symbol
               (list ('' POWERUPS))
               (help "Which powerup (from the passive_b type list) is displayed?")
            )
            (powerup_energy
               float
               (help "How much energy we've accumulated, from 0 to 1")
            )
            (powerup_deploying bool)
            (powerup_can_deploy
               bool
               (help "Is the deployable powerup *able* to be deployed?")
            )
            (powerup_minimum_deploy_energy
               float
               (help
                  "[0,1]. How much energy is required before this powerup can be deployed."
               )
            )
            (note_streak
               int
               (help "How many notes have we hit in a row without passing or missing?")
            )
            (track_switch_enabled
               bool
               (help "Are we currently able to smash by track switching?")
            )
            (track_switch_energy
               float
               (help
                  "How much energy we currently have on our track-switch smashing ability"
               )
            )
            (tambourine_percentage
               int
               (help "What percentage of tambourines have been hit so far? [0, 100]")
            )
            (jackpot int (help "How much the jackpot is currently worth."))
            (plasma_shot_x_offset float (help "[0, trackCount]."))
            (plasma_shot_y_offset
               float
               (help "Offset from the smasher for the plasma shot wave.")
            )
            (plasma_rotation float)
            (plasma_shot_progress
               float
               (help "How far into the plasma shot we are. [0, 1].")
            )
            (bass_groove_streak
               int
               (help "How many notes have we hit in a row on the bass track?")
            )
         )
         (active_powerup '')
         (passive_powerup_a '')
         (passive_powerup_b '')
         (powerup_energy 0.0)
         (powerup_deploying FALSE)
         (powerup_can_deploy FALSE)
         (powerup_minimum_deploy_energy 0.0)
         (note_streak -1)
         (track_switch_enabled FALSE)
         (track_switch_energy 0.0)
         (tambourine_percentage 0)
         (jackpot 0)
         (plasma_shot_x_offset 0.0)
         (plasma_shot_y_offset 0.0)
         (plasma_rotation 0.0)
         (plasma_shot_progress 0.0)
         (bass_groove_streak 0)
         (supported_events
            (
               (autoplay_begin
                  (editor
                     (autoplay_begin_track int (help "Which track is being autoplayed?"))
                     (autoplay_begin_track_type
                        symbol
                        (list ('' GUITAR BASS DRUMS KEYS VOCALS))
                        (help "The track type we're autoplaying.")
                     )
                  )
                  (autoplay_begin_track 0)
                  (autoplay_begin_track_type '')
               )
               (autoplay_set_y
                  (editor
                     (autoplay_y float (help "The y-position of the autoplay smasher."))
                  )
                  (autoplay_y 0.0)
               )
               autoplay_end
               (letter_hit
                  (editor (letter_index int (help "Which letter was hit (starting at 0)")))
                  (letter_index 0)
               )
               entered_tambourine_phrase
               exited_tambourine_phrase
               (jackpot_countdown
                  (editor
                     (jackpot_countdown_count
                        int
                        (help "Countdown number for jackpot pre-deploy.")
                     )
                  )
                  (jackpot_countdown_count 0)
               )
               jackpot_go
               jackpot_lost
               jackpot_won
               (chance_reward
                  (editor
                     (reward_kind symbol (help "What kind of reward was received?"))
                     (reward_value int (help "How much of the reward type was received?"))
                  )
                  (reward_kind "")
                  (reward_value 0)
               )
               (ripple_bonus
                  (editor (points int (help "How many points did we get?")))
                  (points 0)
               )
               ripple_finish
               (arkanoid_gem_bonus
                  (editor (points int (help "How many points did we get?")))
                  (points 0)
               )
               (grenade_launch
                  (editor
                     (grenade_index
                        int
                        (help "Used for allowing multiple active grenades in flight.")
                     )
                     (grenade_src_track
                        int
                        (help "Which track the grenade is taking off from.")
                     )
                     (grenade_dst_track int (help "Which track the grenade will land on."))
                     (grenade_flight_duration_sec
                        float
                        (help "How long the grenade is in the air for.")
                     )
                  )
                  (grenade_index 0)
                  (grenade_src_track 0)
                  (grenade_dst_track 1)
                  (grenade_flight_duration_sec 1.0)
               )
               (grenade_exploded
                  (editor
                     (grenade_explode_index
                        int
                        (help "Used for allowing multiple active grenades in flight.")
                     )
                     (grenade_points
                        int
                        (help "How many points were earned from a grenade explosion.")
                     )
                  )
                  (grenade_explode_index 0)
                  (grenade_points 0)
               )
               (mine_exploded
                  (editor
                     (mine_points
                        int
                        (help "How many points were earned from the mine explosion.")
                     )
                  )
                  (mine_points 0)
               )
               (plasma_shot
                  (editor
                     (plasma_track_index int (help "Which track the plasma was shot on."))
                  )
                  (plasma_track_index 0)
               )
               (plasma_update
                  (editor
                     (plasma_update_points
                        int
                        (help "How many total points the plasma has hit so far.")
                     )
                  )
                  (plasma_update_points 0)
               )
               plasma_done
               (bass_groove_point_bonus
                  (editor
                     (points int (help "How many points were just awarded due to bass groove?"))
                  )
                  (points 0)
               )
               (solo_start
                  (editor
                     (solo_start_track_type
                        symbol
                        (list ('' GUITAR BASS DRUMS KEYS VOCALS))
                        (help "What track type the solo is starting on.")
                     )
                  )
                  (solo_start_track_type '')
               )
               (solo_progress
                  (editor
                     (solo_progress_track_type
                        symbol
                        (list ('' GUITAR BASS DRUMS KEYS VOCALS))
                        (help "What track type the solo progress is for.")
                     )
                     (solo_progress_percent
                        int
                        (help "How well the player is doing on the solo. [0,100].")
                     )
                  )
                  (solo_progress_track_type '')
                  (solo_progress_percent 0)
               )
               (solo_end
                  (editor
                     (solo_end_track_type
                        symbol
                        (list ('' GUITAR BASS DRUMS KEYS VOCALS))
                        (help "What track type the solo is ending on.")
                     )
                     (solo_end_percent
                        int
                        (help "The final percent achieved by the player. [0,100].")
                     )
                     (solo_end_points int (help "How many points earned in the solo."))
                  )
                  (solo_end_track_type '')
                  (solo_end_percent 0)
                  (solo_end_points 0)
               )
               (rhythmic_track_change
                  (editor
                     (rhythmic_from_track int (help "Which track index we are changing from."))
                     (rhythmic_to_track int (help "Which track index we are changing to."))
                     (rhythmic_points
                        int
                        (help "How many bonus points were awarded for rhythmicly track switching.")
                     )
                  )
                  (rhythmic_from_track 0)
                  (rhythmic_to_track 0)
                  (rhythmic_points 0)
               )
            )
         )
      )
      (player_state
         (song_finale_done
            {if {exists game}
               {game song_finale_done}
            }
         )
         (add_score
            ($points)
            {if {exists game}
               {game add_score $points}
            }
         )
         (editor
            (score_multiplier
               int
               (help 'The multiplier applied to all points (increased by streaking)')
            )
            (max_score_multiplier
               int
               (help 'The current limit on our score multiplier')
            )
            (gem_value_multiplier
               float
               (help
                  'The multiplier applied to the point value of gems (affected by powerups)'
               )
            )
            (powerup
               symbol
               (list (none POWERUPS))
               (help 'Which powerup do we currently have, if any')
            )
            (deploying_powerup_remaining
               float
               (help 'How much of the powerup duration remains [1 to 0]')
            )
            (excitement float (help 'How well the player is doing right now [0 to 1]'))
            (growth int (help 'Goes from 0..4 based on how the plots should grow.'))
            (score int (help 'The current score of the player'))
            (stars
               float
               (help "How many stars the player has earned so far. Fractional.")
            )
            (on_fire bool (help "Is the player currently on fire?"))
            (peak_state int (help '1 if we are in peak state.  0 if not.'))
            (current_track int (help "What track is currently engaged."))
            (current_track_type
               symbol
               (list (none GUITAR BASS DRUMS DRUMS2 KEYS VOCALS))
               (help 'The instrument type of the currently selected track.')
            )
            (blitz_active
               bool
               (help
                  "Once blitz_level cap is reached, blitz turns on and starts decaying."
               )
            )
            (blitz_percentage
               float
               (help "[0, 1]. How close we are to entering or exiting blitz mode.")
            )
            (guitar_level
               int
               (help "What level is the guitar track at?  0 means no guitar.")
            )
            (bass_level
               int
               (help "What level is the bass track at?  0 means no guitar.")
            )
            (drums_level
               int
               (help "What level is the drums track at?  0 means no guitar.")
            )
            (vocals_level
               int
               (help "What level is the vocals track at?  0 means no guitar.")
            )
            (keys_level
               int
               (help "What level is the keys track at?  0 means no guitar.")
            )
            (level_cap
               int
               (help "What is the highest level tracks can currently reach?")
            )
            (ignore_guitar_level
               bool
               (help "Is the guitar track too sparse this section to level up?")
            )
            (ignore_bass_level
               bool
               (help "Is the bass track too sparse this section to level up?")
            )
            (ignore_drums_level
               bool
               (help "Is the drums track too sparse this section to level up?")
            )
            (ignore_vocals_level
               bool
               (help "Is the vocals track too sparse this section to level up?")
            )
            (ignore_keys_level
               bool
               (help "Is the keys track too sparse this section to level up?")
            )
         )
         (score_multiplier 1)
         (max_score_multiplier 6)
         (gem_value_multiplier 1.0)
         (powerup none)
         (deploying_powerup_remaining 0.0)
         (excitement 0.0)
         (growth 0)
         (score 200)
         (stars 0.0)
         (on_fire FALSE)
         (peak_state 0)
         (current_track 0)
         (current_track_type none)
         (blitz_active FALSE)
         (blitz_percentage 0.0)
         (guitar_level 0)
         (bass_level 0)
         (drums_level 0)
         (vocals_level 0)
         (keys_level 0)
         (level_cap 4)
         (ignore_guitar_level FALSE)
         (ignore_bass_level FALSE)
         (ignore_drums_level FALSE)
         (ignore_vocals_level FALSE)
         (ignore_keys_level FALSE)
         (supported_events
            (
               (game_pause_change
                  (editor
                     (game_paused bool (help "Was the game paused (true) or resumed (false)?"))
                     (pause_reason
                        symbol
                        (list ('' PAUSE_REASONS))
                        (help "Reason the game was paused.")
                     )
                  )
                  (game_paused TRUE)
                  (pause_reason '')
               )
               beatmatch_fill_entered
               beatmatch_fill_exited
               fill_failed
               (fill_succeeded
                  (editor (points int (help "How many points awarded for fill.")))
                  (points 0)
               )
               (checkpoint
                  (editor
                     (checkpoint_level_delta
                        int
                        (help "How much the base level of all tracks has incremented. [0,3].")
                     )
                  )
                  (checkpoint_level_delta 0)
               )
               begin_song
               end_song
               music_end
               leave_song
               (finale_bonuses
                  (editor
                     (track_0_bonus int (help "End-of-song finale bonus for track 0."))
                     (track_1_bonus int (help "End-of-song finale bonus for track 1."))
                     (track_2_bonus int (help "End-of-song finale bonus for track 2."))
                     (track_3_bonus int (help "End-of-song finale bonus for track 3."))
                     (track_4_bonus int (help "End-of-song finale bonus for track 4."))
                  )
                  (track_0_bonus 0)
                  (track_1_bonus 0)
                  (track_2_bonus 0)
                  (track_3_bonus 0)
                  (track_4_bonus 0)
               )
               stream_started
               (powerup_deployed
                  (editor (deployed_powerup symbol (list (POWERUPS))))
                  (deployed_powerup jackpot)
               )
               (powerup_depleted
                  (editor (depleted_powerup symbol (list (POWERUPS))))
                  (depleted_powerup jackpot)
               )
               (powerup_depleting
                  (editor (depleting_powerup symbol (list (POWERUPS))))
                  (depleting_powerup jackpot)
               )
               score_bonus_collected
               (level_cap_changed
                  (editor (level_delta int))
                  (level_delta 1)
               )
               track_level_changed
               (points_added
                  (editor
                     (points int (help "How many points were added."))
                     (track_index int (help "The track the points came from."))
                     (lane_index int (help "The lane the points came from."))
                  )
                  (points 0)
                  (track_index -1)
                  (lane_index -1)
               )
               (gem_hit
                  (editor
                     (track_index int (help "Which track did this happen on?"))
                     (bonus bool (help "Was the gem a bonus gem?"))
                     (fire bool (help "Was the gem on fire?"))
                     (mine bool (help "Was the gem a mine?"))
                     (letter bool (help "Was the gem a bonus letter?"))
                     (crit bool (help "Was the gem critcally hit?"))
                     (lane int (help "Which lane did this happen on?"))
                  )
                  (track_index 0)
                  (bonus FALSE)
                  (fire FALSE)
                  (mine FALSE)
                  (letter FALSE)
                  (crit FALSE)
                  (lane 0)
               )
               (swing
                  (editor
                     (track_index int (help "Which track did this happen on?"))
                     (lane int (help "Which lane did this happen on?"))
                  )
                  (track_index 0)
                  (lane 0)
               )
               (miss
                  (editor
                     (track_index int (help "Which track did this happen on?"))
                     (miss_track_type
                        symbol
                        (list (none guitar bass drum keys vocals))
                        (help "What's the type of the track?")
                     )
                     (lane int (help "Which lane did this happen on?"))
                  )
                  (track_index 0)
                  (miss_track_type none)
                  (lane 0)
               )
               (sustain_on
                  (editor
                     (track_index int (help "Which track did this happen on?"))
                     (lane int (help "Which lane did this happen on?"))
                  )
                  (track_index 0)
                  (lane 0)
               )
               (sustain_off
                  (editor
                     (track_index int (help "Which track did this happen on?"))
                     (lane int (help "Which lane did this happen on?"))
                  )
                  (track_index 0)
                  (lane 0)
               )
               bonus_gem_phrase_captured
               (track_change
                  (editor
                     (on_marker bool (help "Did the track change occur on a beat marker?"))
                     (from_track int (help "Which track index we are changing from."))
                     (to_track int (help "Which track index we are changing to."))
                  )
                  (on_marker FALSE)
                  (from_track 0)
                  (to_track 0)
               )
               (set_autoplay_smasher
                  (editor
                     (track_index int (help "Which track is changing autoplay status."))
                     (autoplay bool (help "Is autoplay turning on or off for the track."))
                  )
                  (track_index 0)
                  (autoplay FALSE)
               )
               (firework_start
                  (editor
                     (track_index int (help "Which track the firework powerup is starting on."))
                  )
                  (track_index 0)
               )
               (firework_lane_change
                  (editor
                     (track_index int (help "Which track the firework powerup is changing to."))
                     (last_track_index
                        int
                        (help "Which track the firework powerup was previously on.")
                     )
                  )
                  (track_index 0)
                  (last_track_index 0)
               )
               (firework_adjust_distance
                  (editor (y_dist int (help "How far back the object should be")))
                  (y_dist 0)
               )
               (firework_end (editor (help "Did the player win the pursuit")))
               (arkanoid_start)
               (arkanoid_adjust_distance
                  (editor
                     (x_dist int (help "How far to the right the object should be"))
                     (y_dist int (help "How far back the object should be"))
                  )
                  (x_dist 0)
                  (y_dist 0)
               )
               (arkanoid_end)
               (arkanoid_ricochet
                  (editor
                     (arkanoid_ricochet_wall
                        symbol
                        (list ('' left right front back))
                        (help "Which wall the arkanoid ricocheted off of.")
                     )
                  )
                  (arkanoid_ricochet_wall '')
               )
               (pursuit_start
                  (editor
                     (track_index int (help "Which track the pursuit powerup is starting on."))
                     (lane_index int (help "Which lane the pursuit powerup is starting on."))
                  )
                  (track_index 0)
                  (lane_index 0)
               )
               (pursuit_track_change
                  (editor
                     (track_change_to
                        int
                        (help "Which track the pursuit powerup is changing to.")
                     )
                     (track_change_from
                        int
                        (help "Which track the pursuit powerup was previously on.")
                     )
                  )
                  (track_change_to 0)
                  (track_change_from 0)
               )
               (pursuit_lane_change
                  (editor
                     (lane_change_to
                        int
                        (help "Which lane the pursuit powerup is changing to.")
                     )
                     (lane_change_from
                        int
                        (help "Which lane the pursuit powerup was previously on.")
                     )
                  )
                  (lane_change_to 0)
                  (lane_change_from 0)
               )
               (pursuit_adjust_distance
                  (editor
                     (y_dist int (help "How far back the object should be"))
                     (from_gem_hit
                        bool
                        (help "Whether to start animations for hitting/missing pursuit gems")
                     )
                  )
                  (y_dist 0)
                  (from_gem_hit FALSE)
               )
               (pursuit_end
                  (editor
                     (success bool (help "Did the player win the pursuit"))
                     (pursuit_points int (help "The points awarded for winning the pursuit."))
                  )
                  (success FALSE)
                  (pursuit_points 0)
               )
               (blitz_award_points
                  (editor
                     (blitz_awarded_points float (help "The points that blitz awarded."))
                     (blitz_awarded_streak_length
                        int
                        (help "How many gems were hit to reward these points.")
                     )
                  )
                  (blitz_awarded_points 0.0)
                  (blitz_awarded_streak_length 0)
               )
            )
         )
         (flow_commands
            song_finale_done
            (add_score
               (editor (points float (help "Points to add to the player's score.")))
               (points 0.0)
            )
         )
      )
      (tutorial_state
         (editor
            (powerup_disabled
               bool
               (help
                  "Is the ability to deploy a powerup disabled?  Should hide the energy meter and powerup icon"
               )
            )
            (score_disabled
               bool
               (help
                  "Are we capable of earning points right now? Should hide score and stars"
               )
            )
            (blitz_disabled
               bool
               (help "Is Blitz-mode achievable? Is its meter visible?")
            )
            (track_levels_disabled bool (help "Are tracks able to level up?"))
            (dynamic_leaderboard_disabled
               bool
               (help "Is the dynamic leaderboard active and visible or not?")
            )
         )
         (powerup_disabled FALSE)
         (score_disabled FALSE)
         (blitz_disabled FALSE)
         (track_levels_disabled FALSE)
         (dynamic_leaderboard_disabled FALSE)
         (supported_events
            (
               (tutorial_event_begin
                  (editor
                     (beginning_event
                        symbol
                        (list ('' TUTORIAL_EVENTS))
                        (help "Which tutorial event just began?")
                     )
                     (retry_token
                        symbol
                        (help "The token to use if the player is retrying a test.")
                     )
                     (event_fail_count
                        int
                        (help "How many times has the player failed the display event?")
                     )
                  )
                  (beginning_event '')
                  (retry_token '')
                  (event_fail_count 0)
               )
               (tutorial_event_end
                  (editor
                     (ending_event
                        symbol
                        (list ('' TUTORIAL_EVENTS))
                        (help "Which tutorial event just ended?")
                     )
                  )
                  (ending_event '')
               )
               tutorial_pre_jump
               tutorial_post_jump
               show_remedial_track_switch
               hide_remedial_track_switch
               show_remedial_powerup
               hide_remedial_powerup
            )
         )
      )
   )
)